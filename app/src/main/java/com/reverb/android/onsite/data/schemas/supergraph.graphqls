schema @link(url: "https://specs.apollo.dev/link/v1.0") @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION) @link(url: "https://the-guild.dev/graphql/mesh/spec/v1.0", import: ["@transport", "@extraSchemaDefinitionDirective"]) {
  query: Query
  mutation: Mutation
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

directive @transport(kind: String!, subgraph: String!, location: String!, headers: [[String]], options: TransportOptions) repeatable on SCHEMA

directive @extraSchemaDefinitionDirective(directives: _DirectiveExtensions) repeatable on OBJECT

directive @additionalField on FIELD_DEFINITION

scalar join__FieldSet

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY
  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

enum join__Graph {
  COREQL @join__graph(name: "coreql", url: "GRAPHQL__MESH__ENDPOINT__REPLACE__COREQL")
  RQL @join__graph(name: "rql", url: "GRAPHQL__MESH__ENDPOINT__REPLACE__RQL")
  SEARCH_REMIXER @join__graph(name: "search-remixer", url: "GRAPHQL__MESH__ENDPOINT__REPLACE__RQL")
}

"""An ISO 8601-encoded datetime"""
scalar Timestamp @join__type(graph: COREQL) @join__type(graph: RQL) @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

scalar TransportOptions @join__type(graph: COREQL) @join__type(graph: RQL) @join__type(graph: SEARCH_REMIXER)

scalar _DirectiveExtensions @join__type(graph: COREQL) @join__type(graph: RQL) @join__type(graph: SEARCH_REMIXER)

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @join__type(graph: SEARCH_REMIXER) @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Brand implements INode @join__type(graph: COREQL, key: "_id") @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  """brands.uuid"""
  id: String
  name: String
  slug: String
  webLink: core_apimessages_Link @join__field(graph: RQL)
  uuid: String @join__field(graph: RQL)
  images(input: Input_core_apimessages_ImagesRequest!): [core_apimessages_Image] @join__field(graph: RQL)
  metrics(input: Input_rql_BrandOrderSearch): reverb_search_SearchResponse @join__field(graph: RQL)
  manager: rql_BrandManager @join__field(graph: RQL)
}

type CSP implements INode @join__type(graph: COREQL, key: "_id") @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  brand: Brand
  brandUuid: String
  """comparison_shopping_pages.id"""
  id: String
  image(input: Input_core_apimessages_ImagesRequest!): core_apimessages_Image
  inventory: core_apimessages_CSPInventory
  productReviewSearch(input: Input_reverb_search_ProductReviewsSearchRequest): rql_CSPProductReviewSearchResponse
  slug: String
  specs: core_apimessages_CSPSpec
  title: String
  videos: core_apimessages_CSPVideo
  webLink: core_apimessages_Link
  summary: String @join__field(graph: RQL)
  newListingsLink: core_apimessages_Link @join__field(graph: RQL) @deprecated
  usedListingsLink: core_apimessages_Link @join__field(graph: RQL) @deprecated
  categoryUuids: [String] @join__field(graph: RQL)
  metaDescription: String @join__field(graph: RQL)
  body: String @join__field(graph: RQL)
  model: String @join__field(graph: RQL)
  canonicalProductIds: [String] @join__field(graph: RQL)
  upcs: [String] @join__field(graph: RQL)
  finishes: [String] @join__field(graph: RQL)
  generic: Boolean @join__field(graph: RQL)
  categoryRootUuid: String @join__field(graph: RQL)
  canonicalProductImageApprovedIds: [String] @join__field(graph: RQL)
  images(input: Input_rql_ImageQuery!): [core_apimessages_Image] @join__field(graph: RQL)
  categories: [Category] @join__field(graph: RQL)
  breadcrumbs: [core_apimessages_ProductBreadcrumb] @join__field(graph: RQL)
  reviews(input: Input_core_apimessages_CSPReviewsRequest): core_apimessages_CSPReviews @join__field(graph: RQL)
  featuredListing: arbiter_FeaturedListingResponse @join__field(graph: RQL)
  indexedFeaturedListing: Listing @join__field(graph: RQL)
  reviewsCount: Int @join__field(graph: RQL)
  averageReviewRating: Float @join__field(graph: RQL)
  similarCSPs(input: Input_reverb_search_CSPSearchRequest): [CSP] @join__field(graph: RQL)
  priceGuide: core_apimessages_PriceGuide @join__field(graph: RQL)
  expressSalePriceEstimate(input: Input_rql_ExpressSalePriceEstimate): reverb_pricing_PriceRecommendation @join__field(graph: RQL)
  priceRecommendations(input: Input_rql_CSPPriceRecommendation): [reverb_pricing_PriceRecommendation] @join__field(graph: RQL)
  canonicalProducts: [CanonicalProduct] @join__field(graph: RQL)
  expressSaleItemBid: core_apimessages_CSPExpressSaleItemBid @join__field(graph: RQL)
  myReview: core_apimessages_ProductReview @join__field(graph: RQL)
}

type Category implements INode @join__type(graph: COREQL, key: "_id") @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  cmsLink: core_apimessages_Link
  cmsUrl: core_apimessages_Link
  """categories.uuid"""
  id: String
  leaf: Boolean
  name: String
  root: Boolean
  rootSlug: String
  slug: String
  webLink: core_apimessages_Link
  children: [core_apimessages_Category] @join__field(graph: RQL)
  parent: core_apimessages_Category @join__field(graph: RQL)
  images(input: Input_core_apimessages_ImagesRequest!): [core_apimessages_Image] @join__field(graph: RQL)
  childCategories(input: Input_reverb_search_ListingsSearchRequest): [Category] @join__field(graph: RQL)
  parentCategories: [Category] @join__field(graph: RQL)
}

type CuratedSet implements INode @join__type(graph: COREQL) @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _source: String
  """curated_sets.id"""
  id: String
  setType: String
  slug: String
  title: String
  webLink: core_apimessages_Link
  _id: ID @join__field(graph: RQL)
  images(input: Input_core_apimessages_ImagesRequest!): [core_apimessages_Image] @join__field(graph: RQL)
}

type Listing implements INode @join__type(graph: COREQL, key: "_id") @join__type(graph: RQL, key: "_id") @join__type(graph: SEARCH_REMIXER, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID @join__field(graph: COREQL, type: "ID") @join__field(graph: RQL, type: "ID") @join__field(graph: SEARCH_REMIXER, type: "ID!")
  _source: String @join__field(graph: COREQL) @join__field(graph: RQL)
  acceptedPaymentMethods: [String] @join__field(graph: COREQL) @join__field(graph: RQL)
  """JSON-encoded Adyen response to parse client-side"""
  adyenCheckoutPaymentMethodsConfig: String @join__field(graph: COREQL) @join__field(graph: RQL)
  affirmFinancingPromotion: core_apimessages_AffirmFinancingPromotion @join__field(graph: COREQL) @join__field(graph: RQL)
  """
  Returns 0% configuration for Affirm. Includes whether listing is eligible and if listing is enabled. User must be an admin or seller on listing.
  """
  affirmZeroPercentFinancingConfiguration: core_apimessages_ListingAffirmZeroPercentFinancingConfiguration @join__field(graph: COREQL) @join__field(graph: RQL)
  allShippingPrices: core_apimessages_ShippingPrices @join__field(graph: COREQL) @join__field(graph: RQL)
  """
  Total quantity that a buyer can set from a listing to a cart item. This value will be zero if the listing is not inventoried, or if an inventoried listing is out of stock.
  """
  allowedBuyerQuantity: Int @join__field(graph: COREQL) @join__field(graph: RQL)
  autoOffers: core_apimessages_AutoOffer @join__field(graph: COREQL) @join__field(graph: RQL)
  """
  Available sales memberships for the listing - includes whether listing is in the sale and whether listing is eligible for the sale. User must be an admin or seller on listing.
  """
  availableSalesMemberships: core_apimessages_ListingSalesMemberships @join__field(graph: COREQL) @join__field(graph: RQL)
  brandSlug: String @join__field(graph: COREQL) @join__field(graph: RQL)
  breadcrumbs: [core_apimessages_ProductBreadcrumb] @join__field(graph: COREQL) @join__field(graph: RQL)
  bumpEligible: Boolean @join__field(graph: COREQL) @join__field(graph: RQL)
  bumpKey: core_apimessages_BumpKey @join__field(graph: COREQL) @join__field(graph: RQL)
  bumpRate: core_apimessages_BumpRate @join__field(graph: COREQL) @join__field(graph: RQL)
  bumped: Boolean @join__field(graph: COREQL) @join__field(graph: RQL)
  """canonical_products.id"""
  canonicalProductId: String @join__field(graph: COREQL) @join__field(graph: RQL)
  categories: [Category] @join__field(graph: COREQL) @join__field(graph: RQL)
  categoryRootUuid: String @join__field(graph: COREQL) @join__field(graph: RQL)
  """includes product_type.uuids"""
  categoryUuids: [String] @join__field(graph: COREQL) @join__field(graph: RQL)
  certifiedPreOwned(input: Input_core_apimessages_NodeRequest_Lookup_Params_ListingsCertifiedPreOwned): core_apimessages_ListingCertifiedPreOwned @join__field(graph: COREQL) @join__field(graph: RQL)
  combinedShippingParent: Boolean @join__field(graph: COREQL) @join__field(graph: RQL)
  condition: core_apimessages_Condition @join__field(graph: COREQL) @join__field(graph: RQL)
  countryOfOrigin: String @join__field(graph: COREQL) @join__field(graph: RQL)
  counts: core_apimessages_ListingCounts @join__field(graph: COREQL) @join__field(graph: RQL)
  createdAt: google_protobuf_Timestamp @join__field(graph: COREQL) @join__field(graph: RQL)
  csp: CSP @join__field(graph: COREQL) @join__field(graph: RQL)
  cspId: String @join__field(graph: COREQL) @join__field(graph: RQL)
  cspUuid: String @join__field(graph: COREQL) @join__field(graph: RQL)
  curatedSets: [CuratedSet] @join__field(graph: COREQL) @join__field(graph: RQL)
  currency: String @join__field(graph: COREQL) @join__field(graph: RQL)
  """auctions.uuid"""
  currentAuctionId: String @join__field(graph: COREQL) @join__field(graph: RQL)
  description: String @join__field(graph: COREQL) @join__field(graph: RQL)
  digitalDetails: core_apimessages_ListingDigitalDetails @join__field(graph: COREQL) @join__field(graph: RQL)
  estimatedMonthlyPaymentPlan: core_apimessages_EstimatedMonthlyPayment @join__field(graph: COREQL) @join__field(graph: RQL)
  exclusiveChannel: String @join__field(graph: COREQL) @join__field(graph: RQL)
  experiments: [core_apimessages_NonUserExperiment] @join__field(graph: COREQL) @join__field(graph: RQL)
  expressPay: core_apimessages_ListingExpressPay @join__field(graph: COREQL) @join__field(graph: RQL)
  finish: String @join__field(graph: COREQL) @join__field(graph: RQL)
  handmade: Boolean @join__field(graph: COREQL) @join__field(graph: RQL)
  hasInventory: Boolean @join__field(graph: COREQL) @join__field(graph: RQL)
  """products.id"""
  id: String @join__field(graph: COREQL, type: "String") @join__field(graph: RQL, type: "String") @join__field(graph: SEARCH_REMIXER, type: "String!")
  images(input: Input_core_apimessages_ImagesRequest!): [core_apimessages_Image] @join__field(graph: COREQL) @join__field(graph: RQL)
  inventory: Int @join__field(graph: COREQL) @join__field(graph: RQL)
  """
  True if listing is eligible for auto offers. User must be an admin or seller on listing.
  """
  isAutoOfferEligible: Boolean @join__field(graph: COREQL) @join__field(graph: RQL)
  """True if buyer is eligible to make an offer for the listing."""
  isBuyerOfferEligible: Boolean @join__field(graph: COREQL) @join__field(graph: RQL)
  listingType: core_apimessages_Listing_ListingType @join__field(graph: COREQL) @join__field(graph: RQL)
  localizedContents: [core_apimessages_LocalizedListingContent] @join__field(graph: COREQL) @join__field(graph: RQL)
  make: String @join__field(graph: COREQL) @join__field(graph: RQL)
  maxBuyerQuantity: Int @join__field(graph: COREQL) @join__field(graph: RQL)
  merchandisingType: String @join__field(graph: COREQL) @join__field(graph: RQL)
  merchandisingUuid: String @join__field(graph: COREQL) @join__field(graph: RQL)
  model: String @join__field(graph: COREQL) @join__field(graph: RQL)
  offersEnabled: Boolean @join__field(graph: COREQL) @join__field(graph: RQL)
  orders(input: Input_core_apimessages_BulkOrdersRequest_Query): OrderCollection @join__field(graph: COREQL) @join__field(graph: RQL)
  otherBuyersWithListingInCartCounts: Int @join__field(graph: COREQL) @join__field(graph: RQL)
  overriddenAttributes: [String] @join__field(graph: COREQL) @join__field(graph: RQL)
  prefersReverbShippingLabel: Boolean @join__field(graph: COREQL) @join__field(graph: RQL)
  preorderInfo: core_apimessages_PreorderInfo @join__field(graph: COREQL) @join__field(graph: RQL)
  price: core_apimessages_Money @join__field(graph: COREQL) @join__field(graph: RQL)
  priceGuide: PriceGuide @join__field(graph: COREQL) @join__field(graph: RQL)
  priceGuideUuid: String @join__field(graph: COREQL) @join__field(graph: RQL)
  priceRecommendation(input: Input_rql_ListingPriceRecommendationRequest): reverb_pricing_PriceRecommendation @join__field(graph: COREQL) @join__field(graph: RQL)
  pricing(input: Input_core_apimessages_NodeRequest_Lookup_Params_ListingsPricings): core_apimessages_ListingPricing @join__field(graph: COREQL) @join__field(graph: RQL)
  """product_types.id"""
  productTypeId: String @join__field(graph: COREQL) @join__field(graph: RQL)
  propSixtyFiveWarning: String @join__field(graph: COREQL) @join__field(graph: RQL)
  propSixtyFiveWarningImg: core_apimessages_Link @join__field(graph: COREQL) @join__field(graph: RQL)
  protectionPlanOptions: [core_apimessages_ProtectionPlanOptions] @join__field(graph: COREQL) @join__field(graph: RQL)
  publishedAt: google_protobuf_Timestamp @join__field(graph: COREQL) @join__field(graph: RQL)
  relistable: Boolean @join__field(graph: COREQL) @join__field(graph: RQL)
  sale: core_apimessages_Sale @join__field(graph: COREQL) @join__field(graph: RQL)
  sales: [core_apimessages_Sale] @join__field(graph: COREQL) @join__field(graph: RQL)
  sameDayShippingIneligible: Boolean @join__field(graph: COREQL) @join__field(graph: RQL)
  scheduledPriceDrops: [core_apimessages_ScheduledPriceDrop] @join__field(graph: COREQL) @join__field(graph: RQL)
  """postgres id (polymorphic with 'seed_type')"""
  seedId: String @join__field(graph: COREQL) @join__field(graph: RQL)
  seedType: core_apimessages_Listing_SeedType @join__field(graph: COREQL) @join__field(graph: RQL)
  seller: User @join__field(graph: COREQL) @join__field(graph: RQL)
  sellerCost: core_apimessages_Money @join__field(graph: COREQL) @join__field(graph: RQL)
  """users.id"""
  sellerId: String @join__field(graph: COREQL) @join__field(graph: RQL)
  sellerPrice: core_apimessages_Money @join__field(graph: COREQL) @join__field(graph: RQL)
  sellerReportedMap: core_apimessages_Money @join__field(graph: COREQL) @join__field(graph: RQL)
  """users.uuid"""
  sellerUuid: String @join__field(graph: COREQL) @join__field(graph: RQL)
  shipmentPackage: ShipmentPackage @join__field(graph: COREQL) @join__field(graph: RQL)
  shipping(input: Input_core_apimessages_ShippingPricesRequest): core_apimessages_ShippingPrices @join__field(graph: COREQL) @join__field(graph: RQL)
  shippingProfileId: String @join__field(graph: COREQL) @join__field(graph: RQL)
  shop(input: Input_core_apimessages_ShopsRequest): Shop @join__field(graph: COREQL) @join__field(graph: RQL)
  """shops.id"""
  shopId: String @join__field(graph: COREQL) @join__field(graph: RQL)
  shopUuid: String @join__field(graph: COREQL) @join__field(graph: RQL)
  signals(input: Input_reverb_signals_SignalRequest): [reverb_signals_Signal] @join__field(graph: COREQL) @join__field(graph: RQL)
  similarListings(input: Input_reverb_search_SimilarListingsSearchRequest): [Listing] @join__field(graph: COREQL) @join__field(graph: RQL)
  sku: String @join__field(graph: COREQL) @join__field(graph: RQL)
  slug: String @join__field(graph: COREQL) @join__field(graph: RQL)
  soldAsIs: Boolean @join__field(graph: COREQL) @join__field(graph: RQL)
  specs: core_apimessages_ListingSpec @join__field(graph: COREQL) @join__field(graph: RQL)
  state: String @join__field(graph: COREQL) @join__field(graph: RQL)
  stateDescription: String @join__field(graph: COREQL) @join__field(graph: RQL)
  storageLocation: String @join__field(graph: COREQL) @join__field(graph: RQL)
  subcategoryUuids: [String] @join__field(graph: COREQL) @join__field(graph: RQL)
  taxExempt: Boolean @join__field(graph: COREQL) @join__field(graph: RQL)
  taxIncluded: Boolean @join__field(graph: COREQL) @join__field(graph: RQL)
  taxIncludedHint: String @join__field(graph: COREQL) @join__field(graph: RQL)
  taxPolicies: [core_apimessages_ShopTaxPolicy] @join__field(graph: COREQL) @join__field(graph: RQL)
  title: String @join__field(graph: COREQL) @join__field(graph: RQL)
  traits: [core_apimessages_Trait] @join__field(graph: COREQL) @join__field(graph: RQL)
  upc: String @join__field(graph: COREQL) @join__field(graph: RQL)
  upcDoesNotApply: Boolean @join__field(graph: COREQL) @join__field(graph: RQL)
  usOutlet: Boolean @join__field(graph: COREQL) @join__field(graph: RQL)
  vatIncluded: Boolean @join__field(graph: COREQL) @join__field(graph: RQL)
  vatIncludedHint: String @join__field(graph: COREQL) @join__field(graph: RQL)
  video: core_apimessages_Video @join__field(graph: COREQL) @join__field(graph: RQL)
  watching: Boolean @join__field(graph: COREQL) @join__field(graph: RQL)
  year: String @join__field(graph: COREQL) @join__field(graph: RQL)
  salePrice: core_apimessages_Money @join__field(graph: RQL) @deprecated
  shippingPrice: core_apimessages_Money @join__field(graph: RQL) @deprecated
  offerBotRule: core_apimessages_OfferBotRule @join__field(graph: RQL)
  estimatedMonthlyPayment: core_apimessages_Money @join__field(graph: RQL)
  isInCart: Boolean @join__field(graph: RQL)
  similarCSPs(input: Input_reverb_search_CSPSearchRequest): [CSP] @join__field(graph: RQL)
  bumpRecommendations: reverb_search_BumpRecommendationsResults @join__field(graph: RQL)
  bumpInteractionsCounts: arbiter_BumpInteractionCountsResponse @join__field(graph: RQL)
  orderStats: core_apimessages_OrderStats @join__field(graph: RQL)
  esScore: Float @join__field(graph: RQL)
  """
  True if listing is valid for publish. If not valid, returns error messages.
  """
  publishValidation: core_apimessages_ListingValidForPublish @join__field(graph: RQL)
}

type Mutation @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  acceptTradeIn(input: AcceptTradeInInput!): TradeIn @join__field(graph: COREQL)
  createTradeIn(input: CreateTradeInInput!): TradeIn @join__field(graph: COREQL)
  createWatch(input: Input_core_apimessages_WatchesCreateRequest): core_apimessages_UpdateWatchResponse
  deleteTaxProfile: core_apimessages_TaxProfile @join__field(graph: COREQL)
  deleteWatch(input: Input_core_apimessages_WatchesDeleteRequest): core_apimessages_UpdateWatchResponse
  rejectTradeIn(input: RejectTradeInInput!): TradeIn @join__field(graph: COREQL)
  createNegotiation(input: Input_core_apimessages_CreateNegotiationRequest): core_apimessages_NegotiationsResponse @join__field(graph: RQL)
  createAutoOffer(input: Input_core_apimessages_CreateAutoOfferRequest): core_apimessages_CreateAutoOfferResponse @join__field(graph: RQL)
  setupShopPaymentMethods(input: Input_core_apimessages_SetupPaymentMethodsRequest): core_apimessages_SetupPaymentMethodsResponse @join__field(graph: RQL)
  updateMyShopBillingMethod(input: Input_core_apimessages_UpdateBillingMethodRequest): core_apimessages_UpdateBillingMethodResponse @join__field(graph: RQL)
  billingMethodVerifyShopper(input: Input_core_apimessages_BillingMethodVerifyShopperRequest): core_apimessages_BillingMethodVerifyShopperResponse @join__field(graph: RQL)
  billingMethodIdentifyShopper(input: Input_core_apimessages_BillingMethodIdentifyShopperRequest): core_apimessages_BillingMethodIdentifyShopperResponse @join__field(graph: RQL)
  billingMethodChallengeShopper(input: Input_core_apimessages_BillingMethodChallengeShopperRequest): core_apimessages_BillingMethodChallengeShopperResponse @join__field(graph: RQL)
  promotionalCodeRedeem(input: Input_core_apimessages_RedeemPromotionalCodeRequest): core_apimessages_RedeemPromotionalCodeResponse @join__field(graph: RQL)
  updateNegotiation(input: Input_core_apimessages_UpdateNegotiationRequest): core_apimessages_UpdateNegotiationResponse @join__field(graph: RQL)
  shippingProtection(input: Input_core_apimessages_ShippingProtectionRequest): core_apimessages_ShippingProtectionResponse @join__field(graph: RQL)
  createShipment(input: Input_core_apimessages_CreateShipmentRequest): Shipment @join__field(graph: RQL)
  purchaseShippingRate(input: Input_core_apimessages_PurchaseShippingRateRequest): core_apimessages_PurchaseShippingRateResponse @join__field(graph: RQL)
  updateReturnPolicy(input: Input_core_apimessages_UpdateReturnPolicyRequest): core_apimessages_UpdateReturnPolicyResponse @join__field(graph: RQL)
  updateMyShop(input: Input_core_apimessages_UpdateMyShopRequest): core_apimessages_UpdateMyShopResponse @join__field(graph: RQL)
  generateDraft(input: Input_core_apimessages_SeedListingRequest): core_apimessages_SeedListingResponse @join__field(graph: RQL)
  updateMyAddress(input: Input_core_apimessages_UpdateAddressRequest): core_apimessages_UpdateAddressResponse @join__field(graph: RQL)
  deleteMyAddress(input: Input_core_apimessages_AddressDeleteRequest): core_apimessages_DeleteResponse @join__field(graph: RQL)
  updateMyShopShippingProfiles(input: Input_core_apimessages_UpdateMyShopShippingProfilesRequest): core_apimessages_UpdateMyShopShippingProfilesResponse @join__field(graph: RQL)
  updateFeedbackRequest(input: Input_core_apimessages_UpdateFeedbackRequest): core_apimessages_UpdateFeedbackResponse @join__field(graph: RQL)
  declineFeedbackRequest(input: Input_core_apimessages_DeclineFeedbackRequest): core_apimessages_DeclineFeedbackResponse @join__field(graph: RQL)
  addListingToCuratedSet(input: Input_core_apimessages_AdminCuratedSetsCurateRequest): core_apimessages_AdminCuratedSetsCurateResponse @join__field(graph: RQL)
  removeListingFromCuratedSet(input: Input_core_apimessages_AdminCuratedSetsCurateRequest): core_apimessages_AdminCuratedSetsCurateResponse @join__field(graph: RQL)
  featureListingInCuratedSet(input: Input_core_apimessages_AdminCuratedSetsCurateRequest): core_apimessages_AdminCuratedSetsCurateResponse @join__field(graph: RQL)
  unfeatureListingInCuratedSet(input: Input_core_apimessages_AdminCuratedSetsCurateRequest): core_apimessages_AdminCuratedSetsCurateResponse @join__field(graph: RQL)
  voteProductReview(input: Input_core_apimessages_ProductReviewVoteRequest): core_apimessages_ProductReviewVoteResponse @join__field(graph: RQL)
  updateProductReview(input: Input_core_apimessages_UpdateProductReviewRequest): core_apimessages_UpdateProductReviewResponse @join__field(graph: RQL)
  flagProductReview(input: Input_core_apimessages_FlagProductReviewRequest): core_apimessages_FlagProductReviewResponse @join__field(graph: RQL)
  adminBlockProductReview(input: Input_core_apimessages_AdminBlockProductReviewRequest): core_apimessages_AdminBlockProductReviewResponse @join__field(graph: RQL)
  addListingToMyCuratedSet(input: Input_core_apimessages_MyCuratedSetMembershipRequest): core_apimessages_MyCuratedSetMembershipResponse @join__field(graph: RQL)
  removeListingFromMyCuratedSet(input: Input_core_apimessages_MyCuratedSetMembershipRequest): core_apimessages_MyCuratedSetMembershipResponse @join__field(graph: RQL)
  addListingToMyAffirmCuratedSet(input: Input_core_apimessages_MyAffirmCuratedSetMembershipRequest): core_apimessages_MyCuratedSetMembershipResponse @join__field(graph: RQL)
  removeListingFromMyAffirmCuratedSet(input: Input_core_apimessages_MyAffirmCuratedSetMembershipRequest): core_apimessages_MyCuratedSetMembershipResponse @join__field(graph: RQL)
  reverifyCreditCard(input: Input_core_apimessages_ReverifyCreditCardRequest): core_apimessages_ReverifyCreditCardResponse @join__field(graph: RQL)
  startCheckout(input: Input_core_apimessages_StartCheckoutRequest): core_apimessages_StartCheckoutResponse @join__field(graph: RQL)
  startPaypalCheckout(input: Input_core_apimessages_StartPaypalCheckoutRequest): core_apimessages_StartPaypalCheckoutResponse @join__field(graph: RQL)
  createCheckoutPaypalOrder(input: Input_core_apimessages_CreateCheckoutPaypalOrderRequest): core_apimessages_CreateCheckoutPaypalOrderResponse @join__field(graph: RQL)
  updateCheckoutPaypalOrder(input: Input_core_apimessages_UpdateCheckoutPaypalOrderRequest): core_apimessages_UpdateCheckoutPaypalOrderResponse @join__field(graph: RQL)
  processApprovedPaypalOrder(input: Input_core_apimessages_ProcessApprovedPaypalOrderRequest): core_apimessages_ProcessApprovedPaypalOrderResponse @join__field(graph: RQL)
  createExpressSaleCheckout(input: Input_core_apimessages_CreateExpressSaleCheckoutRequest): core_apimessages_CreateExpressSaleCheckoutResponse @join__field(graph: RQL)
  completeExpressSaleCheckout(input: Input_core_apimessages_CompleteExpressSaleCheckoutRequest): core_apimessages_CompleteExpressSaleCheckoutResponse @join__field(graph: RQL)
  updateCheckoutShippingAddress(input: Input_core_apimessages_CheckoutUpdateShippingAddressRequest): core_apimessages_CheckoutUpdateShippingAddressResponse @join__field(graph: RQL)
  selectCheckoutShippingAddress(input: Input_core_apimessages_CheckoutSelectShippingAddressRequest): core_apimessages_CheckoutSelectShippingAddressResponse @join__field(graph: RQL)
  selectCheckoutOrderShippingMethod(input: Input_core_apimessages_CheckoutSelectOrderShippingMethodRequest): core_apimessages_CheckoutSelectOrderShippingMethodResponse @join__field(graph: RQL)
  updateCheckoutShippingEstimate(input: Input_core_apimessages_CheckoutUpdateShippingEstimateRequest): core_apimessages_CheckoutUpdateShippingEstimateResponse @join__field(graph: RQL)
  finalizeDigitalWalletPayment(input: Input_core_apimessages_CheckoutFinalizeDigitalWalletPaymentRequest): core_apimessages_CheckoutFinalizeDigitalWalletPaymentResponse @join__field(graph: RQL)
  finalizeCardCheckoutPayment(input: Input_core_apimessages_FinalizeCardCheckoutPaymentRequest): core_apimessages_FinalizeCardCheckoutPaymentResponse @join__field(graph: RQL)
  finalizeAffirmCheckoutPayment(input: Input_core_apimessages_FinalizeAffirmCheckoutPaymentRequest): core_apimessages_FinalizeAffirmCheckoutPaymentResponse @join__field(graph: RQL)
  createCheckoutPaymentRedirectUrl(input: Input_core_apimessages_CheckoutCreatePaymentRedirectUrlRequest): core_apimessages_CheckoutCreatePaymentRedirectUrlResponse @join__field(graph: RQL)
  finalizePaypalCheckoutPayment(input: Input_core_apimessages_FinalizePaypalCheckoutPaymentRequest): core_apimessages_FinalizePaypalCheckoutPaymentResponse @join__field(graph: RQL)
  finalizeRedirectAuthCheckoutPayment(input: Input_core_apimessages_FinalizeRedirectAuthCheckoutPaymentRequest): core_apimessages_FinalizeRedirectAuthCheckoutPaymentResponse @join__field(graph: RQL)
  startCheckoutForListing(input: Input_core_apimessages_StartCheckoutForListingRequest): core_apimessages_StartCheckoutForListingResponse @join__field(graph: RQL)
  applyCheckoutDiscountCode(input: Input_core_apimessages_ApplyCheckoutDiscountCodeRequest): core_apimessages_ApplyCheckoutDiscountCodeResponse @join__field(graph: RQL)
  selectCheckoutCreditCard(input: Input_core_apimessages_SelectCheckoutCreditCardRequest): core_apimessages_SelectCheckoutCreditCardResponse @join__field(graph: RQL)
  updateCheckoutBillingAddress(input: Input_core_apimessages_UpdateCheckoutBillingAddressRequest): core_apimessages_UpdateCheckoutBillingAddressResponse @join__field(graph: RQL)
  selectCheckoutPaymentMethod(input: Input_core_apimessages_SelectCheckoutPaymentMethodRequest): core_apimessages_SelectCheckoutPaymentMethodResponse @join__field(graph: RQL)
  editCart(input: Input_core_apimessages_CheckoutCartEditRequest): core_apimessages_CheckoutCartEditResponse @join__field(graph: RQL)
  moveCartItemToWatchList(input: Input_core_apimessages_CartMoveToWatchListRequest): core_apimessages_CartMoveToWatchListResponse @join__field(graph: RQL)
  editCheckoutCart(input: Input_rql_CheckoutCartEditRequest): rql_CheckoutCartEditResponse @join__field(graph: RQL)
  finalizeRedirectPaymentCheckout(input: Input_core_apimessages_CheckoutFinalizeRedirectPaymentCheckoutRequest): core_apimessages_CheckoutFinalizeRedirectPaymentCheckoutResponse @join__field(graph: RQL)
  checkoutVerifyShopper(input: Input_core_apimessages_CheckoutVerifyShopperRequest): core_apimessages_CheckoutVerifyShopperResponse @join__field(graph: RQL)
  checkoutIdentifyShopper(input: Input_core_apimessages_CheckoutIdentifyShopperRequest): core_apimessages_CheckoutIdentifyShopperResponse @join__field(graph: RQL)
  checkoutChallengeShopper(input: Input_core_apimessages_CheckoutChallengeShopperRequest): core_apimessages_CheckoutChallengeShopperResponse @join__field(graph: RQL)
  guestCheckoutVerifyShopper(input: Input_core_apimessages_GuestCheckoutVerifyShopperRequest): core_apimessages_CheckoutVerifyShopperResponse @join__field(graph: RQL)
  deleteAutoOffer(input: Input_core_apimessages_DeleteAutoOfferRequest): core_apimessages_DeleteAutoOfferResponse @join__field(graph: RQL)
  cancelOrder(input: Input_core_apimessages_CancelOrderRequest): core_apimessages_CancelOrderResponse @join__field(graph: RQL)
  trackBumpInteraction(input: Input_core_apimessages_TrackBumpInteractionRequest): core_apimessages_TrackBumpInteractionResponse @join__field(graph: RQL)
  registerMyPacklinkAccount(input: Input_core_apimessages_RegisterMyPacklinkAccountRequest): core_apimessages_RegisterMyPacklinkAccountResponse @join__field(graph: RQL)
  loginMyPacklinkAccount(input: Input_core_apimessages_LoginMyPacklinkAccountRequest): core_apimessages_LoginMyPacklinkAccountResponse @join__field(graph: RQL)
  createPacklinkDraft(input: Input_core_apimessages_CreatePacklinkDraftRequest): core_apimessages_CreatePacklinkDraftResponse @join__field(graph: RQL)
  crupdateGearCollectionItem(input: Input_core_apimessages_UpdateGearCollectionItemRequest): GearCollectionItem @join__field(graph: RQL)
  updateGearCollectionItemState(input: Input_core_apimessages_UpdateGearCollectionItemStateRequest): GearCollectionItem @join__field(graph: RQL)
  deleteGearCollectionItem(input: Input_core_apimessages_DeleteGearCollectionItemRequest): GearCollectionItem @join__field(graph: RQL)
  updateMyGearCollectionSettings(input: Input_core_apimessages_UpdateMyGearCollectionSettingsRequest): core_apimessages_UpdateMyGearCollectionSettingsResponse @join__field(graph: RQL)
  createTaxIdentification(input: Input_core_apimessages_CreateTaxIdentificationRequest): core_apimessages_CreateTaxIdentificationResponse @join__field(graph: RQL)
  updateTaxIdentification(input: Input_core_apimessages_UpdateTaxIdentificationRequest): core_apimessages_UpdateTaxIdentificationResponse @join__field(graph: RQL)
  deactivateTaxIdentification(input: Input_core_apimessages_DeactivateTaxIdentificationRequest): core_apimessages_DeactivateTaxIdentificationResponse @join__field(graph: RQL)
  requestTaxFormDownload(input: Input_core_apimessages_RequestTaxFormDownloadRequest): core_apimessages_RequestTaxFormDownloadResponse @join__field(graph: RQL)
  taxFormDownload(input: Input_core_apimessages_TaxFormDownloadRequest): core_apimessages_TaxFormDownloadResponse @join__field(graph: RQL)
  createMyPlaidLinkToken(input: Input_core_apimessages_CreateMyPlaidLinkTokenRequest): core_apimessages_CreateMyPlaidLinkTokenResponse @join__field(graph: RQL)
  requestAccountDeletion(input: Input_core_apimessages_RequestAccountDeletionRequest): core_apimessages_RequestAccountDeletionResponse @join__field(graph: RQL)
  saveMyPlaidAccount(input: Input_core_apimessages_SaveMyPlaidAccountRequest): core_apimessages_SaveMyPlaidAccountResponse @join__field(graph: RQL)
  delinkUserService(input: Input_core_apimessages_DelinkUserServiceRequest): core_apimessages_DelinkUserServiceResponse @join__field(graph: RQL)
  cancelPlaidAccount(input: Input_core_apimessages_CancelPlaidAccountRequest): core_apimessages_CancelPlaidAccountResponse @join__field(graph: RQL)
  updateUniversalPromoCampaign(input: Input_core_apimessages_UpdateUniversalPromoCampaignRequest): core_apimessages_UpdateUniversalPromoCampaignResponse @join__field(graph: RQL)
  crupdateListing(input: Input_core_apimessages_UpdateListingRequest): Listing @join__field(graph: RQL)
  updateListingState(input: Input_core_apimessages_UpdateListingStateRequest): core_apimessages_UpdateListingStateResponse @join__field(graph: RQL)
  crupdateMyShopCampaign(input: Input_core_apimessages_UpdateMyShopCampaignRequest): core_apimessages_MyShopCampaign @join__field(graph: RQL)
  createMyCreditCard(input: Input_core_apimessages_CreateMyCreditCardRequest): core_apimessages_CreateMyCreditCardResponse @join__field(graph: RQL)
  updateMyCreditCard(input: Input_core_apimessages_UpdateMyCreditCardRequest): core_apimessages_UpdateMyCreditCardResponse @join__field(graph: RQL)
  deleteMyCreditCard(input: Input_core_apimessages_DeleteMyCreditCardRequest): core_apimessages_DeleteMyCreditCardResponse @join__field(graph: RQL)
  createMyAction(input: Input_core_apimessages_CreateMyActionRequest): core_apimessages_CreateMyActionResponse @join__field(graph: RQL)
  clearBrowsingHistory: core_apimessages_DeleteResponse @join__field(graph: RQL)
  flagMessage(input: Input_core_apimessages_ConversationFlagMessageRequest): core_apimessages_ConversationFlagMessageResponse @join__field(graph: RQL)
  listingCorrection(input: Input_core_apimessages_ListingCorrectionRequest): core_apimessages_ListingCorrectionResponse @join__field(graph: RQL)
  payMyStatement(input: Input_core_apimessages_PayMyStatementRequest): core_apimessages_PayMyStatementResponse @join__field(graph: RQL)
  createTruliooOnboardingRecord: core_apimessages_CreateTruliooOnboardingRecordResponse @join__field(graph: RQL)
  restartTruliooOnboardingWorkflow: core_apimessages_TruliooOnboardingResponse @join__field(graph: RQL)
  upsertMyFavorite(input: Input_core_apimessages_UpsertMyFavoriteRequest): core_apimessages_UpsertMyFavoriteResponse @join__field(graph: RQL)
  deleteMyFavorite(input: Input_core_apimessages_DeleteMyFavoriteRequest): core_apimessages_DeleteMyFavoriteResponse @join__field(graph: RQL)
  generateAdminReport(input: Input_core_apimessages_GenerateAdminReportRequest): core_apimessages_GenerateAdminReportResponse @join__field(graph: RQL)
  undoDeleteMyFavorite(input: Input_core_apimessages_UndoDeleteMyFavoriteRequest): core_apimessages_UndoDeleteMyFavoriteResponse @join__field(graph: RQL)
  markOrderAsReceived(input: Input_core_apimessages_MarkOrderAsReceivedRequest): core_apimessages_MarkOrderAsReceivedResponse @join__field(graph: RQL)
  createMyFeedbackMessage(input: Input_core_apimessages_CreateMyFeedbackMessageRequest): core_apimessages_CreateMyFeedbackMessageResponse @join__field(graph: RQL)
  deleteMyFeedbackMessage(input: Input_core_apimessages_DeleteMyFeedbackMessageRequest): core_apimessages_DeleteMyFeedbackMessageResponse @join__field(graph: RQL)
  updateInternationalTaxProfile(input: Input_core_apimessages_UpdateInternationalTaxProfileRequest): core_apimessages_UpdateInternationalTaxProfileResponse @join__field(graph: RQL)
  deleteDraftListing(input: Input_core_apimessages_DraftListingDeleteRequest): core_apimessages_DraftListingDeleteResponse @join__field(graph: RQL)
  createMySaleMembership(input: Input_core_apimessages_CreateMySaleMembershipRequest): core_apimessages_CreateMySaleMembershipResponse @join__field(graph: RQL)
  deleteMySaleMembership(input: Input_core_apimessages_DeleteMySaleMembershipRequest): core_apimessages_DeleteMySaleMembershipResponse @join__field(graph: RQL)
  bulkDeleteListings(input: Input_core_apimessages_BulkDeleteListingsRequest): core_apimessages_BulkDeleteListingsResponse @join__field(graph: RQL)
  bulkDeleteListingsAsync(input: Input_core_apimessages_BulkDeleteListingsAsyncRequest): core_apimessages_SellerBulkActionAsyncResponse @join__field(graph: RQL)
  bulkPublishListings(input: Input_core_apimessages_BulkPublishListingsRequest): core_apimessages_BulkPublishListingsResponse @join__field(graph: RQL)
  bulkPublishListingsAsync(input: Input_core_apimessages_BulkPublishListingsAsyncRequest): core_apimessages_SellerBulkActionAsyncResponse @join__field(graph: RQL)
  bulkCreateAutoOffers(input: Input_core_apimessages_BulkCreateAutoOffersRequest): core_apimessages_SellerBulkActionResponse @join__field(graph: RQL)
  bulkCreateAutoOffersAsync(input: Input_core_apimessages_BulkCreateAutoOffersAsyncRequest): core_apimessages_SellerBulkActionAsyncResponse @join__field(graph: RQL)
  bulkDeleteAutoOffers(input: Input_core_apimessages_BulkDeleteAutoOffersRequest): core_apimessages_SellerBulkActionResponse @join__field(graph: RQL)
  bulkDeleteAutoOffersAsync(input: Input_core_apimessages_BulkDeleteAutoOffersAsyncRequest): core_apimessages_SellerBulkActionAsyncResponse @join__field(graph: RQL)
  bulkCreateBumped(input: Input_core_apimessages_BulkCreateBumpedRequest): core_apimessages_SellerBulkActionResponse @join__field(graph: RQL)
  bulkCreateBumpedAsync(input: Input_core_apimessages_BulkCreateBumpedAsyncRequest): core_apimessages_SellerBulkActionAsyncResponse @join__field(graph: RQL)
  bulkDeleteBumped(input: Input_core_apimessages_BulkDeleteBumpedRequest): core_apimessages_SellerBulkActionResponse @join__field(graph: RQL)
  bulkDeleteBumpedAsync(input: Input_core_apimessages_BulkDeleteBumpedAsyncRequest): core_apimessages_SellerBulkActionAsyncResponse @join__field(graph: RQL)
  bulkCreateZeroPercentAffirm(input: Input_core_apimessages_BulkCreateZeroPercentAffirmRequest): core_apimessages_SellerBulkActionResponse @join__field(graph: RQL)
  bulkCreateZeroPercentAffirmAsync(input: Input_core_apimessages_BulkCreateZeroPercentAffirmAsyncRequest): core_apimessages_SellerBulkActionAsyncResponse @join__field(graph: RQL)
  bulkDeleteZeroPercentAffirm(input: Input_core_apimessages_BulkDeleteZeroPercentAffirmRequest): core_apimessages_SellerBulkActionResponse @join__field(graph: RQL)
  bulkDeleteZeroPercentAffirmAsync(input: Input_core_apimessages_BulkDeleteZeroPercentAffirmAsyncRequest): core_apimessages_SellerBulkActionAsyncResponse @join__field(graph: RQL)
  bulkCreateSaleMemberships(input: Input_core_apimessages_BulkSaleMembershipsRequest): core_apimessages_SellerBulkActionResponse @join__field(graph: RQL)
  bulkDeleteSaleMemberships(input: Input_core_apimessages_BulkSaleMembershipsRequest): core_apimessages_SellerBulkActionResponse @join__field(graph: RQL)
  publishAllListings: core_apimessages_PublishAllListingsResponse @join__field(graph: RQL)
  bulkExportListings(input: Input_core_apimessages_BulkExportListingsRequest): core_apimessages_BulkExportListingsResponse @join__field(graph: RQL)
  myShopExportDac7OrderData(input: Input_core_apimessages_MyShopExportDac7OrderDataRequest): core_apimessages_MyShopExportDac7OrderDataResponse @join__field(graph: RQL)
  createRecentSearch(input: Input_core_apimessages_CreateRecentSearchRequest): core_apimessages_CreateRecentSearchResponse @join__field(graph: RQL)
  acceptAddressSuggestion(input: Input_core_apimessages_AcceptAddressSuggestionRequest): core_apimessages_AcceptAddressSuggestionResponse @join__field(graph: RQL)
  createAdyenOnboardingLink(input: Input_core_apimessages_AdyenOnboardingLinkRequest): core_apimessages_AdyenOnboardingLinkResponse @join__field(graph: RQL)
  truliooOnboardingRecordResendPscEmail(input: Input_core_apimessages_TruliooOnboardingRecordResendPscEmailRequest): core_apimessages_TruliooOnboardingRecordResendPscEmailResponse @join__field(graph: RQL)
  selectAddressAutocompleteSuggestion(input: Input_core_apimessages_SelectAddressAutocompleteSuggestionRequest): core_apimessages_SelectAddressAutocompleteSuggestionResponse @join__field(graph: RQL)
  updateCrossPlatformListingSession(input: Input_core_apimessages_UpdateCrossPlatformListingSessionRequest): core_apimessages_UpdateCrossPlatformListingSessionResponse @join__field(graph: RQL)
  exportSecondaryUserActivities(input: Input_core_apimessages_ExportSecondaryUserActivitiesRequest): core_apimessages_ExportSecondaryUserActivitiesResponse @join__field(graph: RQL)
  createUserShopPermission(input: Input_core_apimessages_CreateUserShopPermissionRequest): core_apimessages_CreateOrUpdateUserShopPermissionResponse @join__field(graph: RQL)
  updateUserShopPermission(input: Input_core_apimessages_UpdateUserShopPermissionRequest): core_apimessages_CreateOrUpdateUserShopPermissionResponse @join__field(graph: RQL)
  deleteUserShopPermission(input: Input_core_apimessages_DeleteUserShopPermissionRequest): core_apimessages_DeleteUserShopPermissionResponse @join__field(graph: RQL)
  crupdateCartItemProtectionPlan(input: Input_core_apimessages_UpdateCartItemProtectionPlanRequest): core_apimessages_UpdateCartItemProtectionPlanResponse @join__field(graph: RQL)
  deleteCartItemProtectionPlan(input: Input_core_apimessages_DeleteCartItemProtectionPlanRequest): core_apimessages_DeleteCartItemProtectionPlanResponse @join__field(graph: RQL)
  sendDigitalListingDownloadEmail(input: Input_core_apimessages_DigitalListingSendDownloadEmailRequest): core_apimessages_DigitalListingSendDownloadEmailResponse @join__field(graph: RQL)
  setAccertifyTokens(input: Input_core_apimessages_SetAccertifyTokensRequest): core_apimessages_SetAccertifyTokensResponse @join__field(graph: RQL)
  removeFeedEntry(input: Input_reverb_feed_RemoveEntryRequest): reverb_feed_RemoveEntryResponse @join__field(graph: RQL)
  dismissUserUpdate(input: Input_reverb_updates_DismissMyUpdateRequest): reverb_updates_DimissMyUpdateResponse @join__field(graph: RQL)
  bulkTrackImpressions(input: Input_arbiter_BulkTrackImpressionsRequest): arbiter_BulkTrackImpressionsResponse @join__field(graph: RQL)
  setEmailSubscription(input: Input_rql_EmailSubscription): rql_EmailSubscription @join__field(graph: RQL)
  setEmailGlobalSubscribe(input: Input_rql_SetGlobalSubscribeRequest): rql_Me @join__field(graph: RQL)
  triggerOptInEmail(input: Input_rql_Blank): braze_TriggerCampaignSendResponse @join__field(graph: RQL)
  exchangeCurrency(input: Input_reverb_config_cache_ExchangeCurrencyRequest): reverb_config_cache_ExchangeCurrencyResponse @join__field(graph: RQL)
  updateAdvertiser(input: Input_core_apimessages_UpdateAdvertiserRequest): core_apimessages_UpdateAdvertiserResponse @join__field(graph: RQL)
  updateAdCampaign(input: Input_core_apimessages_UpdateAdCampaignRequest): core_apimessages_UpdateAdCampaignResponse @join__field(graph: RQL)
  updateAdGroup(input: Input_core_apimessages_UpdateAdGroupRequest): core_apimessages_UpdateAdGroupResponse @join__field(graph: RQL)
  copyAdGroup(input: Input_core_apimessages_CopyAdGroupRequest): core_apimessages_CopyAdGroupResponse @join__field(graph: RQL)
  updateAdGroupKeywords(input: Input_core_apimessages_UpdateAdGroupKeywordsRequest): core_apimessages_UpdateAdGroupKeywordsResponse @join__field(graph: RQL)
  updateAd(input: Input_core_apimessages_UpdateAdRequest): core_apimessages_UpdateAdResponse @join__field(graph: RQL)
  updateAdZone(input: Input_core_apimessages_UpdateAdZoneRequest): core_apimessages_UpdateAdZoneResponse @join__field(graph: RQL)
  DeleteAd(input: Input_core_apimessages_DeleteAdRequest): core_apimessages_DeleteAdResponse @join__field(graph: RQL)
  deleteAdminTax1099kReportingThreshold(input: Input_core_apimessages_AdminTax1099kReportingThresholdDeleteRequest): core_apimessages_AdminTax1099kReportingThresholdDeleteResponse @join__field(graph: RQL)
  updateAdminTax1099kReportingThreshold(input: Input_core_apimessages_AdminTax1099kReportingThresholdUpdateRequest): core_apimessages_AdminTax1099kReportingThresholdUpdateResponse @join__field(graph: RQL)
  createAdminTax1099kReportingThreshold(input: Input_core_apimessages_AdminTax1099kReportingThresholdCreateRequest): core_apimessages_AdminTax1099kReportingThresholdCreateResponse @join__field(graph: RQL)
  createAdminNote(input: Input_core_apimessages_AdminNoteCreateRequest): core_apimessages_AdminNote @join__field(graph: RQL)
  updateAdminNote(input: Input_core_apimessages_AdminNoteUpdateRequest): core_apimessages_AdminNote @join__field(graph: RQL)
  _trace: _Trace! @additionalField
}

type MyShop implements INode @join__type(graph: COREQL, key: "_id") @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  """Only visible to the shop owner"""
  acceptsAffirm: Boolean
  address: core_apimessages_Address
  """Only visible to the shop owner"""
  canCurateSales: Boolean
  createdAt: Timestamp
  currency: String
  """Only visible to the shop owner"""
  currencySetting: String
  """Only visible to the shop owner"""
  defaultLocale: String
  description: String
  """Only visible to the shop owner"""
  firstTimeSeller: Boolean
  """Only visible to the shop owner"""
  hasAccountRep: Boolean
  id: String
  """Only visible to the shop owner"""
  inclusiveVatPricingEnabled: Boolean
  internationalTaxProfile: core_apimessages_InternationalTaxProfile
  """Only visible to the shop owner"""
  isShopInEu: Boolean
  """Only visible to the shop owner"""
  isShopInUk: Boolean
  """Only visible to the shop owner"""
  listableConditions: [core_apimessages_Condition]
  lowballOfferPercentage: Int
  manufacturersSafetyInformation: String
  """Only visible to the shop owner"""
  marketplaceTaxReportingCountryCode: String
  name: String
  """Only visible to the shop owner"""
  offerPolicy: core_apimessages_ShopConfig_OfferPolicy
  onVacation: Boolean
  paymentMethod: core_apimessages_MyShopOnboardingResponse_PaymentMethod
  paymentPolicy: String
  preferredSeller: Boolean
  quickResponder: Boolean
  quickShipper: Boolean
  quickShipperSpeed: core_apimessages_Shop_QuickShipperSpeed
  """Unused by any client but needed in mobile apps RQL queries"""
  recentlyShipped: Boolean @deprecated(reason: "Unused by new clients. Required for legacy mobile app queries")
  returnPolicy: core_apimessages_ReturnPolicy
  """Only visible to the shop owner"""
  sameDayShippingConfigured: Boolean
  shippingPolicy: String
  """Only visible to the shop owner"""
  shippingRegionSettings: [core_apimessages_ShippingRegionSetting]
  """Only visible to the shop owner"""
  shopSupportedLocaleCodes: [String]
  shopType: core_apimessages_Shop_ShopType
  showSold: Boolean
  slug: String
  taxPolicies: [core_apimessages_ShopTaxPolicy]
  taxProfile: core_apimessages_TaxProfile
  tradeIns: [TradeIn] @join__field(graph: COREQL)
  userId: String
  userUuid: String
  uuid: String
  vatId: String
  website: String
  ordersSearch(input: Input_reverb_search_OrderSearchRequest): reverb_search_SearchResponse @join__field(graph: RQL)
  billingMethodStatus: core_apimessages_MyShopOnboardingResponse_BillingMethodStatus @join__field(graph: RQL)
  originCountryCode: String @join__field(graph: RQL)
  paypalSetupStatus: core_apimessages_MyShopOnboardingResponse_PaypalSetupStatus @join__field(graph: RQL)
  adyenBalanceOnboardingDetails: core_apimessages_AdyenBalanceOnboardingResponse @join__field(graph: RQL)
  paypalProfile: core_apimessages_MyShopPaypalProfileResponse_PaypalProfile @join__field(graph: RQL)
  shippingProfiles: [core_apimessages_MyShippingProfile] @join__field(graph: RQL)
  packlink: core_apimessages_MyPacklinkAccountStatusResponse @join__field(graph: RQL)
  sales: core_apimessages_MySalesResponse @join__field(graph: RQL)
  interactions(input: Input_arbiter_SellerInteractionTimeSeriesRequest): arbiter_SellerInteractionTimeSeriesResponse @join__field(graph: RQL)
  taxIdentifications: [core_apimessages_TaxIdentification] @join__field(graph: RQL)
  listings(input: Input_reverb_search_ListingsSearchRequest): reverb_search_SearchResponse @join__field(graph: RQL)
  orderRefundStats(input: Input_core_apimessages_MyShopOrderRefundStatsRequest): core_apimessages_MyShopOrderRefundStatsResponse @join__field(graph: RQL)
  truliooOnboarding: core_apimessages_TruliooOnboarding @join__field(graph: RQL)
  businessRegistrationNumber: core_apimessages_BusinessRegistrationNumber @join__field(graph: RQL)
  shopCampaigns: [core_apimessages_MyShopCampaign] @join__field(graph: RQL)
  informActThresholdStatus: core_apimessages_InformActThresholdStatus @join__field(graph: RQL)
  sellerVerificationPolicy: core_apimessages_SellerVerificationPolicyResponse @join__field(graph: RQL)
  userShopPermissions: [UserShopPermission] @join__field(graph: RQL)
  earnings(input: Input_core_apimessages_MyShopEarningsRequest): core_apimessages_MyShopEarningsResponse @join__field(graph: RQL)
  bumpStats(input: Input_core_apimessages_MyShopBumpStatsRequest): core_apimessages_MyShopBumpStatsResponse @join__field(graph: RQL)
  shopStats(input: Input_core_apimessages_MyShopStatsRequest): core_apimessages_MyShopStatsResponse @join__field(graph: RQL)
  badges: [core_apimessages_ShopBadge] @join__field(graph: RQL)
}

type Negotiation implements INode @join__type(graph: COREQL, key: "_id") @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  """negotiations.id"""
  id: String
  lastOffer: core_apimessages_Offer
  """repeated Offer offers = 2;"""
  state: core_apimessages_NegotiationState @join__field(graph: RQL)
  buyerUuid: String @join__field(graph: RQL)
  sellerUuid: String @join__field(graph: RQL)
  expiresAt: google_protobuf_Timestamp @join__field(graph: RQL)
  orderUuids: [String] @join__field(graph: RQL)
  taxIncluded: Boolean @join__field(graph: RQL)
  taxIncludedHint: String @join__field(graph: RQL)
  """deprecated in favor of seller_shipping_warning"""
  buyerOutsideListingShippingRegions: Boolean @join__field(graph: RQL) @deprecated
  negotiationType: core_apimessages_NegotiationType @join__field(graph: RQL)
  sellerShippingWarning: String @join__field(graph: RQL)
  buyerWillPayImmediately: Boolean @join__field(graph: RQL)
  buyer: User @join__field(graph: RQL)
  seller: User @join__field(graph: RQL)
  orders: [Order] @join__field(graph: RQL)
  offers: [core_apimessages_Offer] @join__field(graph: RQL)
  shippingLocation: core_apimessages_Address @join__field(graph: RQL)
  orderHistory(input: Input_rql_OrderQuery): reverb_search_SearchResponse @join__field(graph: RQL)
}

type Order implements INode @join__type(graph: COREQL) @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  createdAt: google_protobuf_Timestamp
  """orders.id"""
  legacyOrderId: String
  orderUrl: core_apimessages_Link
  paidAt: google_protobuf_Timestamp
  status: core_apimessages_Order_Status
  buyerUuid: String @join__field(graph: RQL)
  shopUuid: String @join__field(graph: RQL)
  """products.id"""
  listingId: String @join__field(graph: RQL)
  shippingMethod: core_apimessages_ShippingMethod @join__field(graph: RQL)
  sellerUuid: String @join__field(graph: RQL)
  checkoutUuid: String @join__field(graph: RQL)
  settlementAmountProductSubtotal: core_apimessages_Money @join__field(graph: RQL)
  quantity: Int @join__field(graph: RQL)
  """users.id"""
  legacyBuyerId: String @join__field(graph: RQL)
  updatedAt: google_protobuf_Timestamp @join__field(graph: RQL)
  shippedAt: google_protobuf_Timestamp @join__field(graph: RQL)
  needsFeedbackForBuyer: Boolean @join__field(graph: RQL)
  needsFeedbackForSeller: Boolean @join__field(graph: RQL)
  orderType: String @join__field(graph: RQL)
  shippingProvider: String @join__field(graph: RQL)
  shippingCode: String @join__field(graph: RQL)
  amountProduct: core_apimessages_Money @join__field(graph: RQL)
  amountTotal: core_apimessages_Money @join__field(graph: RQL)
  amountTax: core_apimessages_Money @join__field(graph: RQL)
  amountShipping: core_apimessages_Money @join__field(graph: RQL)
  statusDescription: String @join__field(graph: RQL)
  webTrackingUrl: String @join__field(graph: RQL)
  shipmentStatus: String @join__field(graph: RQL)
  mobileStatus: String @join__field(graph: RQL)
  carrierCalculatedShippingAmount: core_apimessages_Money @join__field(graph: RQL)
  shippingTaxed: Boolean @join__field(graph: RQL)
  paymentRequiredAt: google_protobuf_Timestamp @join__field(graph: RQL)
  protectionPlan: Boolean @join__field(graph: RQL)
  carrierCalculatedCarrier: String @join__field(graph: RQL)
  protectionPlanEligible: Boolean @join__field(graph: RQL)
  title: String @join__field(graph: RQL)
  uuid: String @join__field(graph: RQL)
  id: String @join__field(graph: RQL)
  customsInfo: core_apimessages_OrderCustomsInfo @join__field(graph: RQL)
  listing: Listing @join__field(graph: RQL)
  verifiedShippingAddress: core_apimessages_OrderVerifyShippingAddressResponse @join__field(graph: RQL)
  flatRateShippingOptions: core_apimessages_OrderFlatRateShippingOptionsResponse @join__field(graph: RQL)
  buyer: User @join__field(graph: RQL)
  seller: User @join__field(graph: RQL)
  feedback: [core_apimessages_Feedback] @join__field(graph: RQL)
  payments: [core_apimessages_Payment] @join__field(graph: RQL)
  packlinkShipment: core_apimessages_PacklinkShipment @join__field(graph: RQL)
  notes: [core_apimessages_OrderNote] @join__field(graph: RQL)
  refunds: core_apimessages_OrderRefunds @join__field(graph: RQL)
  buyerOrder: core_apimessages_BuyerOrder @join__field(graph: RQL)
  sellerOrder: core_apimessages_SellerOrder @join__field(graph: RQL)
  shippingAddress: core_apimessages_Address @join__field(graph: RQL)
}

type OrderCollection @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  nodes: [Order]
  _ids: [ID] @join__field(graph: RQL)
  pageInfo: rql_PageInfo @join__field(graph: RQL)
}

type PriceGuide implements INode @join__type(graph: COREQL) @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _source: String
  """price_guides.id"""
  id: String
  images(input: Input_core_apimessages_ImagesRequest!): [core_apimessages_Image]
  priceHigh: core_apimessages_Money
  priceLow: core_apimessages_Money
  title: String
  webLink: core_apimessages_Link
  _id: ID @join__field(graph: RQL)
}

type ProductReview implements INode @join__type(graph: COREQL, key: "_id") @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  body: String
  createdAt: Timestamp
  id: String
  isMyReview: Boolean
  rating: Int
  reported: Boolean
  reviewer: core_apimessages_Reviewer
  title: String
  verified: Boolean
  voteCount: Int
  voted: Boolean
}

type Query @extraSchemaDefinitionDirective(directives: {transport: [{kind: "http", subgraph: "coreql", location: "GRAPHQL__MESH__ENDPOINT__REPLACE__COREQL", headers: [["Accept", "{context.headers['accept']}"], ["Accept-Language", "{context.headers['accept-language']}"], ["Accept-Version", "{context.headers['accept-version']}"], ["Authorization", "{context.headers['authorization']}"], ["Cache-Control", "{context.headers['cache-control']}"], ["Content-Type", "{context.headers['content-type']}"], ["If-Modified-Since", "{context.headers['if-modified-since']}"], ["Keep-Alive", "{context.headers['keep-alive']}"], ["Origin", "{context.headers['origin']}"], ["True-Client-IP", "{context.headers['true-client-ip']}"], ["User-Agent", "{context.headers['user-agent']}"], ["X-Auth-Token", "{context.headers['x-auth-token']}"], ["X-CSRF-Token", "{context.headers['x-csrf-token']}"], ["X-Context-Id", "{context.headers['x-context-id']}"], ["X-Display-Currency", "{context.headers['x-display-currency']}"], ["X-Experiments", "{context.headers['x-experiments']}"], ["X-Google-Recaptcha-Token", "{context.headers['x-google-recaptcha-token']}"], ["X-HTTP-Method-Override", "{context.headers['x-http-method-override']}"], ["X-Item-Region", "{context.headers['x-item-region']}"], ["X-Operation-Name", "{context.params.operationName}"], ["X-Postal-Code", "{context.headers['x-postal-code']}"], ["X-Request-Deadline", "{context.headers['x-request-deadline']}"], ["X-Request-Id", "{context.headers['x-request-id']}"], ["X-Requested-With", "{context.headers['x-requested-with']}"], ["X-Resolve-Datasources", "{context.headers['x-resolve-datasources']}"], ["X-Reverb-App", "{context.headers['x-reverb-app']}"], ["X-Reverb-Device-Info", "{context.headers['x-reverb-device-info']}"], ["X-Reverb-Embed-Location", "{context.headers['x-reverb-embed-location']}"], ["X-Reverb-User-Info", "{context.headers['x-reverb-user-info']}"], ["X-Secondary-User-Enabled", "{context.headers['x-secondary-user-enabled']}"], ["X-Session-Id", "{context.headers['x-session-id']}"], ["X-Shipping-Region", "{context.headers['x-shipping-region']}"]], options: {}}]}) @extraSchemaDefinitionDirective(directives: {transport: [{kind: "http", subgraph: "rql", location: "GRAPHQL__MESH__ENDPOINT__REPLACE__RQL", headers: [["Accept", "{context.headers['accept']}"], ["Accept-Language", "{context.headers['accept-language']}"], ["Accept-Version", "{context.headers['accept-version']}"], ["Authorization", "{context.headers['authorization']}"], ["Cache-Control", "{context.headers['cache-control']}"], ["Content-Type", "{context.headers['content-type']}"], ["If-Modified-Since", "{context.headers['if-modified-since']}"], ["Keep-Alive", "{context.headers['keep-alive']}"], ["Origin", "{context.headers['origin']}"], ["True-Client-IP", "{context.headers['true-client-ip']}"], ["User-Agent", "{context.headers['user-agent']}"], ["X-Auth-Token", "{context.headers['x-auth-token']}"], ["X-CSRF-Token", "{context.headers['x-csrf-token']}"], ["X-Context-Id", "{context.headers['x-context-id']}"], ["X-Display-Currency", "{context.headers['x-display-currency']}"], ["X-Experiments", "{context.headers['x-experiments']}"], ["X-Google-Recaptcha-Token", "{context.headers['x-google-recaptcha-token']}"], ["X-HTTP-Method-Override", "{context.headers['x-http-method-override']}"], ["X-Item-Region", "{context.headers['x-item-region']}"], ["X-Operation-Name", "{context.params.operationName}"], ["X-Postal-Code", "{context.headers['x-postal-code']}"], ["X-Request-Deadline", "{context.headers['x-request-deadline']}"], ["X-Request-Id", "{context.headers['x-request-id']}"], ["X-Requested-With", "{context.headers['x-requested-with']}"], ["X-Resolve-Datasources", "{context.headers['x-resolve-datasources']}"], ["X-Reverb-App", "{context.headers['x-reverb-app']}"], ["X-Reverb-Device-Info", "{context.headers['x-reverb-device-info']}"], ["X-Reverb-Embed-Location", "{context.headers['x-reverb-embed-location']}"], ["X-Reverb-User-Info", "{context.headers['x-reverb-user-info']}"], ["X-Secondary-User-Enabled", "{context.headers['x-secondary-user-enabled']}"], ["X-Session-Id", "{context.headers['x-session-id']}"], ["X-Shipping-Region", "{context.headers['x-shipping-region']}"]], options: {}}]}) @extraSchemaDefinitionDirective(directives: {transport: [{kind: "http", subgraph: "search-remixer", location: "GRAPHQL__MESH__ENDPOINT__REPLACE__RQL", headers: [["Accept", "{context.headers['accept']}"], ["Accept-Language", "{context.headers['accept-language']}"], ["Accept-Version", "{context.headers['accept-version']}"], ["Authorization", "{context.headers['authorization']}"], ["Cache-Control", "{context.headers['cache-control']}"], ["Content-Type", "{context.headers['content-type']}"], ["If-Modified-Since", "{context.headers['if-modified-since']}"], ["Keep-Alive", "{context.headers['keep-alive']}"], ["Origin", "{context.headers['origin']}"], ["True-Client-IP", "{context.headers['true-client-ip']}"], ["User-Agent", "{context.headers['user-agent']}"], ["X-Auth-Token", "{context.headers['x-auth-token']}"], ["X-CSRF-Token", "{context.headers['x-csrf-token']}"], ["X-Context-Id", "{context.headers['x-context-id']}"], ["X-Display-Currency", "{context.headers['x-display-currency']}"], ["X-Experiments", "{context.headers['x-experiments']}"], ["X-Google-Recaptcha-Token", "{context.headers['x-google-recaptcha-token']}"], ["X-HTTP-Method-Override", "{context.headers['x-http-method-override']}"], ["X-Item-Region", "{context.headers['x-item-region']}"], ["X-Operation-Name", "{context.params.operationName}"], ["X-Postal-Code", "{context.headers['x-postal-code']}"], ["X-Request-Deadline", "{context.headers['x-request-deadline']}"], ["X-Request-Id", "{context.headers['x-request-id']}"], ["X-Requested-With", "{context.headers['x-requested-with']}"], ["X-Resolve-Datasources", "{context.headers['x-resolve-datasources']}"], ["X-Reverb-App", "{context.headers['x-reverb-app']}"], ["X-Reverb-Device-Info", "{context.headers['x-reverb-device-info']}"], ["X-Reverb-Embed-Location", "{context.headers['x-reverb-embed-location']}"], ["X-Reverb-User-Info", "{context.headers['x-reverb-user-info']}"], ["X-Secondary-User-Enabled", "{context.headers['x-secondary-user-enabled']}"], ["X-Session-Id", "{context.headers['x-session-id']}"], ["X-Shipping-Region", "{context.headers['x-shipping-region']}"]], options: {}}]}) @join__type(graph: COREQL) @join__type(graph: RQL) @join__type(graph: SEARCH_REMIXER) {
  _source: String @join__field(graph: COREQL) @join__field(graph: RQL)
  adServe(input: Input_core_apimessages_AdServeRequest): core_apimessages_AdServeResponse @join__field(graph: COREQL) @join__field(graph: RQL)
  countries: core_apimessages_CountriesResponse @join__field(graph: COREQL)
  listing(input: Input_rql_NodeQuery): Listing @join__field(graph: COREQL) @join__field(graph: RQL)
  listings(input: Input_rql_CollectionQuery): [Listing] @join__field(graph: COREQL) @join__field(graph: RQL)
  me: rql_Me @join__field(graph: COREQL) @join__field(graph: RQL)
  shop(input: Input_rql_NodeQuery): Shop @join__field(graph: COREQL) @join__field(graph: RQL)
  tradeIn(input: Input_rql_NodeQuery): TradeIn @join__field(graph: COREQL)
  tradeInEligibility(input: TradeInEligibilityInput!): TradeInEligibility @join__field(graph: COREQL)
  user(input: Input_rql_NodeQuery): User @join__field(graph: COREQL) @join__field(graph: RQL)
  cspSearch(input: Input_reverb_search_CSPSearchRequest): reverb_search_SearchResponse @join__field(graph: RQL)
  completions(input: Input_reverb_search_CompletionsRequest): reverb_search_SearchResponse @join__field(graph: RQL)
  autocomplete(input: Input_reverb_search_AutocompleteRequest): reverb_search_AutocompleteResponse @join__field(graph: RQL)
  priceGuidesSearch(input: Input_reverb_search_PriceGuidesSearchRequest): reverb_search_SearchResponse @join__field(graph: RQL)
  listingsSearch(input: Input_reverb_search_ListingsSearchRequest): reverb_search_SearchResponse @join__field(graph: RQL)
  listingsAggregationSearch(input: Input_reverb_search_ListingsSearchRequest): reverb_search_ListingsAggregationResponse @join__field(graph: RQL)
  shippingRegionFilter(input: Input_reverb_search_ShippingRegionFilterRequest): reverb_search_ShippingRegionFilterResponse @join__field(graph: RQL)
  bumpedSortedListings(input: Input_reverb_search_ListingsSearchRequest): ListingCollection @join__field(graph: RQL)
  cspSponsoredListing(input: Input_reverb_search_ListingsSearchRequest): arbiter_FeaturedListingResponse @join__field(graph: RQL)
  priceRecordsSearch(input: Input_rql_PriceRecordSearchRequest): reverb_search_SearchResponse @join__field(graph: RQL)
  ordersSearch(input: Input_rql_OrdersSearchRequest): reverb_search_SearchResponse @join__field(graph: RQL)
  productReviewsSearch(input: Input_reverb_search_ProductReviewsSearchRequest): reverb_search_SearchResponse @join__field(graph: RQL)
  gearCollectionItemsSearch(input: Input_rql_GearCollectionItemsSearchRequest): reverb_search_SearchResponse @join__field(graph: RQL)
  similarListingsSearch(input: Input_reverb_search_SimilarListingsSearchRequest): reverb_search_SearchResponse @join__field(graph: RQL)
  userWatchesSearch(input: Input_core_apimessages_UserWatchesRequest): WatchCollection @join__field(graph: RQL)
  homepage(input: Input_rql_HomepageRequest): core_apimessages_HomepageResponse @join__field(graph: RQL)
  cmsPagesSearch(input: Input_reverb_search_CMSPagesSearchRequest): reverb_search_SearchResponse @join__field(graph: RQL)
  exchangeRates(input: Input_reverb_config_cache_ExchangeRateRequest): reverb_config_cache_CurrencyResponse @join__field(graph: RQL)
  collection(input: Input_rql_ReflectCollectionQuery): [Reflection] @join__field(graph: RQL)
  node(input: Input_rql_ReflectQuery): Reflection @join__field(graph: RQL)
  csps(input: Input_rql_CollectionQuery): [CSP] @join__field(graph: RQL)
  sellingFees(input: Input_core_apimessages_SellingFeesRequest): core_apimessages_SellingFeesResponse @join__field(graph: RQL)
  cmsPages(input: Input_cms_PagesRequest): cms_PagesResponse @join__field(graph: RQL)
  cmsPagesFetch(input: Input_rql_CollectionWithDraftsQuery): [CMSPage] @join__field(graph: RQL)
  curatedSets(input: Input_rql_CollectionQuery): [CuratedSet] @join__field(graph: RQL)
  collectionHeader(input: Input_core_apimessages_CollectionHeaderRequest): CollectionHeader @join__field(graph: RQL)
  articles(input: Input_rql_CollectionQuery): [Article] @join__field(graph: RQL)
  brands(input: Input_rql_CollectionQuery): [Brand] @join__field(graph: RQL)
  categories(input: Input_core_apimessages_CategoriesRequest): [Category] @join__field(graph: RQL)
  orderBundles(input: Input_rql_CollectionQuery): [OrderBundle] @join__field(graph: RQL)
  recentlyViewedListings(input: Input_core_apimessages_RecentlyViewedListingsRequest): [Listing] @join__field(graph: RQL)
  searchMetadata(input: Input_core_apimessages_SearchMetadataRequest): core_apimessages_SearchMetadataResponse @join__field(graph: RQL)
  priceRecommendations(input: Input_reverb_pricing_PriceRecommendationsRequest): reverb_pricing_PriceRecommendationsResponse @join__field(graph: RQL)
  cspPriceRecommendations(input: Input_reverb_pricing_CSPPriceRecommendationsRequest): reverb_pricing_PriceRecommendationsResponse @join__field(graph: RQL)
  priceScores(input: Input_reverb_pricing_PriceScoresRequest): reverb_pricing_PriceScoresResponse @join__field(graph: RQL)
  cpSuggestions(input: Input_rql_CollectionQuery): [core_apimessages_CPSuggestions] @join__field(graph: RQL)
  seedListing(input: Input_core_apimessages_SeedListingRequest): core_apimessages_SeedListingResponse @join__field(graph: RQL)
  myDirectCheckoutProfile(input: Input_core_apimessages_MyDirectCheckoutProfileRequest): core_apimessages_MyDirectCheckoutProfileResponse @join__field(graph: RQL)
  experiments: core_apimessages_ExperimentsResponse @join__field(graph: RQL)
  intlAddressFormConfig: reverb_config_cache_InternationalAddressFormConfigResponse @join__field(graph: RQL)
  mosaicTilesHomepage: core_apimessages_MosaicTilesResponse @join__field(graph: RQL)
  promotionalCodeVerify(input: Input_core_apimessages_VerifyPromotionalCodeRequest): core_apimessages_VerifyPromotionalCodeResponse @join__field(graph: RQL)
  bearerV2Token(input: Input_core_apimessages_BearerV2TokenRequest): core_apimessages_BearerV2TokenResponse @join__field(graph: RQL)
  loggedOutRecommendations(input: Input_mparticle_Mpid): reverb_search_SearchResponse @join__field(graph: RQL)
  findFavorite(input: Input_core_apimessages_FindFavoriteRequest): core_apimessages_FindFavoriteResponse @join__field(graph: RQL)
  estimateNegotiationSalesTax(input: Input_core_apimessages_EstimateNegotiationSalesTaxRequest): core_apimessages_EstimateNegotiationSalesTaxResponse @join__field(graph: RQL)
  myFeedbackMessages(input: Input_core_apimessages_MyFeedbackMessagesRequest): core_apimessages_MyFeedbackMessagesResponse @join__field(graph: RQL)
  formSelectCategories(input: Input_core_apimessages_FormSelectCategoriesRequest): core_apimessages_FormSelectCategoriesResponse @join__field(graph: RQL)
  crossPlatformListingStatus(input: Input_core_apimessages_CrossPlatformListingStatusRequest): core_apimessages_CrossPlatformListingStatusResponse @join__field(graph: RQL)
  addressVerify(input: Input_core_apimessages_AddressVerifyRequest): core_apimessages_AddressVerifyResponse @join__field(graph: RQL)
  findAddressAutocompleteSuggestions(input: Input_core_apimessages_FindAddressAutocompleteSuggestionsRequest): core_apimessages_FindAddressAutocompleteSuggestionsResponse @join__field(graph: RQL)
  shopAdyenBalancePlatformNotifications(input: Input_core_apimessages_ShopAdyenBalancePlatformNotificationsIndexRequest): core_apimessages_ShopAdyenBalancePlatformNotificationsIndexResponse @join__field(graph: RQL)
  getAdyenRegion: core_apimessages_ShowAdyenRegionResponse @join__field(graph: RQL)
  paypalOnboardSeller: core_apimessages_PaypalOnboardSellerResponse @join__field(graph: RQL)
  featuredListing(input: Input_arbiter_FeaturedListingRequest): arbiter_FeaturedListingResponse @join__field(graph: RQL)
  findAddressSuggestions(input: Input_rql_FindAddressSuggestionRequest): rql_FindAddressSuggestionResponse @join__field(graph: RQL)
  selectAddressSuggestion(input: Input_rql_SelectAddressSuggestionRequest): rql_SelectAddressSuggestionResponse @join__field(graph: RQL)
  trendingSearches(input: Input_reverb_personalization_GetTrendingSearchesRequest): reverb_personalization_TrendingSearchesResponse @join__field(graph: RQL)
  querySuggestions(input: Input_reverb_personalization_QuerySuggestionsRequest): reverb_personalization_QuerySuggestionsResponse @join__field(graph: RQL)
  cpToListingRecs(input: Input_rql_CPRecommendationsRequest): rql_RecommendationsGenericResponse @join__field(graph: RQL)
  recommendedShops(input: Input_rql_ShopsRecommendationsRequest): [Shop] @join__field(graph: RQL)
  browsepage(input: Input_rql_NodeQuery): BrowsePage @join__field(graph: RQL)
  canonicalproduct(input: Input_rql_NodeQuery): CanonicalProduct @join__field(graph: RQL)
  estimatednewlistingprice(input: Input_rql_NodeQuery): EstimatedNewListingPrice @join__field(graph: RQL)
  category(input: Input_rql_NodeQuery): Category @join__field(graph: RQL)
  cmspage(input: Input_rql_NodeQuery): CMSPage @join__field(graph: RQL)
  collectionheader(input: Input_rql_NodeQuery): CollectionHeader @join__field(graph: RQL)
  csp(input: Input_rql_NodeQuery): CSP @join__field(graph: RQL)
  checkout(input: Input_rql_NodeQuery): Checkout @join__field(graph: RQL)
  checkoutaction(input: Input_rql_NodeQuery): CheckoutAction @join__field(graph: RQL)
  curatedset(input: Input_rql_NodeQuery): CuratedSet @join__field(graph: RQL)
  expresssalecheckout(input: Input_rql_NodeQuery): ExpressSaleCheckout @join__field(graph: RQL)
  gearcollectionitem(input: Input_rql_NodeQuery): GearCollectionItem @join__field(graph: RQL)
  order(input: Input_rql_NodeQuery): Order @join__field(graph: RQL)
  myshop(input: Input_rql_NodeQuery): MyShop @join__field(graph: RQL)
  negotiation(input: Input_rql_NodeQuery): Negotiation @join__field(graph: RQL)
  orderbundle(input: Input_rql_NodeQuery): OrderBundle @join__field(graph: RQL)
  packagesizesuggestion(input: Input_rql_NodeQuery): PackageSizeSuggestion @join__field(graph: RQL)
  priceguide(input: Input_rql_NodeQuery): PriceGuide @join__field(graph: RQL)
  publiccomponent(input: Input_rql_NodeQuery): PublicComponent @join__field(graph: RQL)
  sale(input: Input_rql_NodeQuery): Sale @join__field(graph: RQL)
  sellercheckout(input: Input_rql_NodeQuery): SellerCheckout @join__field(graph: RQL)
  shipment(input: Input_rql_NodeQuery): Shipment @join__field(graph: RQL)
  storefront(input: Input_rql_NodeQuery): Storefront @join__field(graph: RQL)
  article(input: Input_rql_NodeQuery): Article @join__field(graph: RQL)
  brand(input: Input_rql_NodeQuery): Brand @join__field(graph: RQL)
  watch(input: Input_rql_NodeQuery): Watch @join__field(graph: RQL)
  shopcampaigncoupon(input: Input_rql_NodeQuery): ShopCampaignCoupon @join__field(graph: RQL)
  siteBanner(input: Input_core_apimessages_SiteBannerRequest): core_apimessages_SiteBanner @join__field(graph: RQL)
  sitebanner(input: Input_rql_NodeQuery): SiteBanner @join__field(graph: RQL)
  pricechange(input: Input_rql_NodeQuery): PriceChange @join__field(graph: RQL)
  myupdate(input: Input_rql_NodeQuery): MyUpdate @join__field(graph: RQL)
  myupdatespromotion(input: Input_rql_NodeQuery): MyUpdatesPromotion @join__field(graph: RQL)
  shipmentpackage(input: Input_rql_NodeQuery): ShipmentPackage @join__field(graph: RQL)
  publicpricerecord(input: Input_rql_NodeQuery): PublicPriceRecord @join__field(graph: RQL)
  productreview(input: Input_rql_NodeQuery): ProductReview @join__field(graph: RQL)
  usershoppermission(input: Input_rql_NodeQuery): UserShopPermission @join__field(graph: RQL)
  advertisersSearch(input: Input_core_apimessages_AdvertisersSearchRequest): core_apimessages_AdvertisersSearchResponse @join__field(graph: RQL)
  adCampaignsSearch(input: Input_core_apimessages_AdCampaignsSearchRequest): core_apimessages_AdCampaignsSearchResponse @join__field(graph: RQL)
  adGroupsSearch(input: Input_core_apimessages_AdGroupsSearchRequest): core_apimessages_AdGroupsSearchResponse @join__field(graph: RQL)
  adsSearch(input: Input_core_apimessages_AdsSearchRequest): core_apimessages_AdsSearchResponse @join__field(graph: RQL)
  adZonesSearch(input: Input_core_apimessages_AdZonesSearchRequest): core_apimessages_AdZonesSearchResponse @join__field(graph: RQL)
  userSearch(input: Input_core_apimessages_AdminUserSearchRequest): core_apimessages_AdminUserSearchResponse @join__field(graph: RQL)
  datadogErrorsSearch(input: Input_core_apimessages_AdminUserDatadogErrorsSearchRequest): core_apimessages_AdminUserDatadogErrorsSearchResponse @join__field(graph: RQL)
  taxReportingThresholdSearch(input: Input_core_apimessages_AdminTax1099kReportingThresholdSearchRequest): core_apimessages_AdminTax1099kReportingThresholdSearchResponse @join__field(graph: RQL)
  adminNotesSearch(input: Input_core_apimessages_AdminNotesSearchRequest): core_apimessages_AdminNotesSearchResponse @join__field(graph: RQL)
  advertiser(input: Input_rql_NodeQuery): Advertiser @join__field(graph: RQL)
  adcampaign(input: Input_rql_NodeQuery): AdCampaign @join__field(graph: RQL)
  adgroup(input: Input_rql_NodeQuery): AdGroup @join__field(graph: RQL)
  ad(input: Input_rql_NodeQuery): Ad @join__field(graph: RQL)
  adzone(input: Input_rql_NodeQuery): AdZone @join__field(graph: RQL)
  universalpromocampaign(input: Input_rql_NodeQuery): UniversalPromoCampaign @join__field(graph: RQL)
  marketplaceListingsSearch(input: MarketplaceSearchInput!): SearchResult! @join__field(graph: SEARCH_REMIXER)
  _trace: _Trace! @additionalField
}

type ShipmentPackage implements INode @join__type(graph: COREQL, key: "_id") @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  allowedCarriers: [String]
  height: core_apimessages_Measurement
  id: String
  length: core_apimessages_Measurement
  packageSizeSuggestionId: String
  predefinedPackage: String
  reverbSuggested: Boolean @deprecated(reason: "Unused by clients")
  weight: core_apimessages_Measurement
  width: core_apimessages_Measurement
}

type Shop implements INode @join__type(graph: COREQL, key: "_id") @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  """Only visible to the shop owner"""
  acceptsAffirm: Boolean
  address: core_apimessages_Address
  banner(namedTransform: core_apimessages_NamedImageTransforms = SHOP_BANNER): core_apimessages_Image
  buyerCoupons: [ShopCampaignCoupon]
  """Only visible to the shop owner"""
  canCurateSales: Boolean
  certifiedPreOwned(input: Input_core_apimessages_NodeRequest_Lookup_Params_ShopsCertifiedPreOwned): core_apimessages_ShopCertifiedPreOwned
  createdAt: Timestamp
  currency: String
  """Only visible to the shop owner"""
  currencySetting: String
  """Only visible to the shop owner"""
  defaultLocale: String
  description: String
  euOdrAddress: core_apimessages_Address
  """Only visible to the shop owner"""
  firstTimeSeller: Boolean
  freeDomesticShippingRate: core_apimessages_ShippingRates
  """Only visible to the shop owner"""
  hasAccountRep: Boolean
  id: String
  images(input: Input_core_apimessages_ImagesRequest!): [core_apimessages_Image]
  """Only visible to the shop owner"""
  inclusiveVatPricingEnabled: Boolean
  """Only visible to the shop owner"""
  isShopInEu: Boolean
  """Only visible to the shop owner"""
  isShopInUk: Boolean
  """Only visible to the shop owner"""
  listableConditions: [core_apimessages_Condition]
  lowballOfferPercentage: Int
  manufacturersSafetyInformation: String
  """Only visible to the shop owner"""
  marketplaceTaxReportingCountryCode: String
  name: String
  """Only visible to the shop owner"""
  offerPolicy: core_apimessages_ShopConfig_OfferPolicy
  onVacation: Boolean
  orders: reverb_search_SearchResponse
  paymentPolicy: String
  preferredSeller: Boolean
  quickResponder: Boolean
  quickShipper: Boolean
  quickShipperSpeed: core_apimessages_Shop_QuickShipperSpeed
  """Unused by any client but needed in mobile apps RQL queries"""
  recentlyShipped: Boolean @deprecated(reason: "Unused by new clients. Required for legacy mobile app queries")
  returnPolicy: core_apimessages_ReturnPolicy
  sales: [core_apimessages_Sale]
  """Only visible to the shop owner"""
  sameDayShippingConfigured: Boolean
  shippingPolicy: String
  shippingProfiles: [core_apimessages_ShippingProfile]
  """Only visible to the shop owner"""
  shippingRegionSettings: [core_apimessages_ShippingRegionSetting]
  """Only visible to the shop owner"""
  shopSupportedLocaleCodes: [String]
  shopType: core_apimessages_Shop_ShopType
  showSold: Boolean
  slug: String
  taxPolicies: [core_apimessages_ShopTaxPolicy]
  user: User
  userId: String
  userUuid: String
  uuid: String
  vatId: String
  video: core_apimessages_Video
  website: String
}

type ShopCampaignCoupon implements INode @join__type(graph: COREQL, key: "_id") @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  applyToBStockConditions: Boolean
  applyToNewConditions: Boolean
  applyToUsedConditions: Boolean
  code: String
  couponHeader: String
  descriptionSummary: String
  discountValue: String
  excludedBrands: [Brand]
  excludedCategories: [Category]
  expiresAt: Timestamp
  id: String
  restrictionsSummary: String
  status: core_apimessages_ShopCampaignCoupon_Status
}

type TradeIn @join__type(graph: COREQL, key: "_id") {
  _id: ID
  _source: String
  """Current trade in appraisal prices"""
  appraisals: [TradeInAppraisal]
  canonicalProduct: core_apimessages_CanonicalProduct
  createdAt: Timestamp
  id: String
  """Appraisal prices when the trade in was created"""
  originalAppraisals: [TradeInAppraisal]
  seller: User
  state: TradeInStatus
}

type TradeInAppraisal @join__type(graph: COREQL) {
  _source: String
  condition: core_apimessages_Condition
  price: core_apimessages_Money
}

type TradeInEligibility @join__type(graph: COREQL) {
  _source: String
  appraisals: [TradeInAppraisal]
  dealers: [Shop]
  isEligible: Boolean
}

type User implements INode @join__type(graph: COREQL, key: "_id") @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  avatar: core_apimessages_Image
  feedback(input: Input_core_apimessages_FeedbacksRequest!): core_apimessages_FeedbacksResponse
  feedbackSummary: core_apimessages_FeedbackSummary
  firstName: String
  """users.id"""
  id: String
  name: String
  shopUuid: String
  shortname: String
  uuid: String
  shop(input: Input_core_apimessages_ShopsRequest): core_apimessages_Shop @join__field(graph: RQL)
}

type core_apimessages_Ad @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  adCampaignUuid: String
  adGroupName: String
  adGroupUuid: String
  advertiserUuid: String
  deletedAt: Timestamp
  format: core_apimessages_AdFormat
  imageAdCreative: core_apimessages_ImageAdCreative
  localizedContents: [core_apimessages_AdLocalizedContent]
  uuid: String
  id: Int @join__field(graph: RQL)
  campaignId: Int @join__field(graph: RQL)
}

type core_apimessages_AdGroup @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  adCampaignUuid: String
  description: String
  name: String
  status: core_apimessages_AdGroup_AdStatus
  targetedAdZoneSlugs: [String]
  targetedAdZones: [core_apimessages_AdGroupZone]
  targetedBrandSlugs: [String]
  targetedCategoryUuids: [String]
  targetedCountryCodes: [String]
  targetedDevices: [String]
  uuid: String
}

type core_apimessages_AdGroupZone @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  adGroup: core_apimessages_AdGroup
  adZone: core_apimessages_AdZone
  endsAt: Timestamp
  startsAt: Timestamp
}

type core_apimessages_AdLocalizedContent @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  imageAdCreative: core_apimessages_ImageAdCreative
  locale: String
}

type core_apimessages_AdPlacementResponse @join__type(graph: COREQL) @join__type(graph: RQL, key: "_id") {
  _source: String
  ad: core_apimessages_Ad
  adZones: [core_apimessages_AdZone]
  candidates: [core_apimessages_Candidate]
  _id: ID @join__field(graph: RQL)
}

type core_apimessages_AdServeResponse @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  ad: core_apimessages_Ad
  placements: [core_apimessages_AdPlacementResponse]
}

type core_apimessages_AdZone @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  description: String
  name: String
  slug: String
  status: core_apimessages_AdZone_AdZoneStatus
  uuid: String
}

"""For API response"""
type core_apimessages_Address @join__type(graph: COREQL, key: "_id") @join__type(graph: RQL, key: "_id") {
  _id: ID
  _source: String
  addressPresent: Boolean
  country: core_apimessages_Country
  countryCode: String
  displayLocation: String
  email: String
  extendedAddress: String
  """Equivalent to uuid"""
  id: String
  """True if the address has all required fields"""
  isComplete: Boolean
  """addresses.id"""
  legacyId: String
  locality: String
  name: String
  phone: String
  postalCode: String
  primary: Boolean
  region: String
  """
  Localized based on region field. Example: a region code of CA in the US will have a name of "California."
  """
  regionName: String
  streetAddress: String
  uuid: String
  """True if primary address fields match address details in Loqate"""
  verified: Boolean
}

type core_apimessages_AffirmFinancingPromotion @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  availableTermMonths: [Int]
  endsAt: google_protobuf_Timestamp
  financingPlan: String
  """affirm_financing_promotions.id"""
  id: String
  links: core_apimessages_AffirmFinancingPromotionLinks
  maxTermMonth: Int
  startsAt: google_protobuf_Timestamp
  zeroPercentFinancing: Boolean
}

type core_apimessages_AffirmFinancingPromotionLinks @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  curatedSet: core_apimessages_Link
}

type core_apimessages_AutoOffer @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  id: String
  listingId: String
  message: String
  percentage: Int
  price: core_apimessages_Money
  shippingPriceOverride: core_apimessages_Money
  pushToExisting: Boolean @join__field(graph: RQL) @deprecated
  instantOffersEnabled: Boolean @join__field(graph: RQL) @deprecated
}

type core_apimessages_AvailableAction @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  """Same value as name, but calling it id helps with frontend apollo cache"""
  id: core_apimessages_UserActionName
  name: core_apimessages_UserActionName
  status: core_apimessages_UserActionStatus
}

"""this is the encoded bump key sent as a response"""
type core_apimessages_BumpKey @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  """encoded bump key"""
  key: String
}

type core_apimessages_BumpRate @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  rate: Float
}

type core_apimessages_CSPInventory @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  """comparison_shopping_pages.id"""
  id: String
  newLowPrice: core_apimessages_Money
  newTotal: Int
  """comparison_shopping_pages.slug"""
  slug: String
  usedLowPrice: core_apimessages_Money
  usedTotal: Int
  """comparison_shopping_pages.uuid"""
  uuid: String
}

type core_apimessages_CSPSpec @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  productSpecs: [core_apimessages_ProductSpec]
}

type core_apimessages_CSPVideo @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  videoLinks: [core_apimessages_VideoLink]
}

type core_apimessages_Candidate @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  adGroup: core_apimessages_AdGroup
  matches: [String]
  weight: Int
}

type core_apimessages_CanonicalProduct @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  countryOfOrigin: String
  finish: String
  id: String
  make: String @join__field(graph: COREQL)
  model: String
  name: String
  primaryImage(input: Input_core_apimessages_ImagesRequest!): core_apimessages_Image @join__field(graph: COREQL)
  year: String
}

type core_apimessages_CartItem @join__type(graph: COREQL, key: "_id") @join__type(graph: RQL, key: "_id") {
  _id: ID
  _source: String
  actions: core_apimessages_CartItem_Actions
  alerts: [core_apimessages_CartItem_Alert]
  listing: Listing
  listingId: String
  listingTotal: core_apimessages_CartItem_ListingTotal
  orderId: String
  paymentMethods: [core_apimessages_CartItem_PaymentMethod]
  protectionPlan: core_apimessages_ProtectionPlan
  protectionPlanEligible: Boolean
  quantity: Int
  shippingTotal: core_apimessages_CartItem_ShippingTotal
  shopId: String
  """Estimated subtotal based on listing price and quantity"""
  subtotal: core_apimessages_Money
  uuid: String
  protectionPlanOptions: [core_apimessages_ProtectionPlanOptions] @join__field(graph: RQL)
  order: Order @join__field(graph: RQL)
}

type core_apimessages_CartItem_Actions @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  canChangeQuantity: Boolean
  canMoveToWatchlist: Boolean
  canRemoveFromCart: Boolean
}

type core_apimessages_CartItem_Alert @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  severity: core_apimessages_CartItem_Alert_Severity
  text: String
  type: core_apimessages_CartItem_Alert_Type
}

type core_apimessages_CartItem_ListingTotal @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  discount: core_apimessages_CartItem_ListingTotal_Discount
  """True if order listing price is less than original listing price."""
  discounted: Boolean
  """Original unit amount before offer pricing or sales were applied."""
  originalUnitPrice: core_apimessages_Money
  """
  Unit amount owed by the buyer for a cart item. Includes tax and any discounts from an offer or sale.
  """
  unitPrice: core_apimessages_Money
}

type core_apimessages_CartItem_ListingTotal_Discount @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  label: String
  type: core_apimessages_CartItem_ListingTotal_Discount_Type
}

type core_apimessages_CartItem_PaymentMethod @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  links: core_apimessages_CartLinks
  type: core_apimessages_CheckoutPaymentMethod_Type
}

type core_apimessages_CartItem_ShippingTotal @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  """Shipping amount owed by buyer including discounts if eligible."""
  amountOwed: core_apimessages_Money
  discount: core_apimessages_CartItem_ShippingTotal_Discount
  """True if amount owed is less than original amount owed."""
  discounted: Boolean
  """Original shipping amount owed the cart item before any discounts."""
  originalAmountOwed: core_apimessages_Money
}

type core_apimessages_CartItem_ShippingTotal_Discount @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  label: String
  type: core_apimessages_CartItem_ShippingTotal_Discount_Type
}

type core_apimessages_CartLinks @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  restBundle: core_apimessages_Link
  restIndividual: core_apimessages_Link
  web: core_apimessages_Link
}

type core_apimessages_CheckoutGooglePayDetails @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  """Card networks supported by both Reverb and Google Pay"""
  cardNetworks: [core_apimessages_CheckoutGooglePayDetails_CardNetwork]
  """Reverb Adyen Merchant ID for the transaction"""
  gatewayMerchantId: String
  """Google Pay Merchant ID"""
  merchantId: String
  """Merchant name to display in the payment sheet"""
  merchantName: String
}

type core_apimessages_CheckoutPaypalDetails @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  clientId: String
  clientToken: String
  currency: String
  merchantId: String
}

type core_apimessages_Condition @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  conditionSlug: String
  conditionUuid: String
  description: String
  displayName: String
}

type core_apimessages_CountriesResponse @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  countries: [core_apimessages_Country]
}

type core_apimessages_Country @join__type(graph: COREQL, key: "_id") @join__type(graph: RQL, key: "_id") {
  _id: ID
  _source: String
  countryCode: String
  id: String
  name: String
  subregionRequired: Boolean
  subregions: [core_apimessages_Subregion]
  superRegion: core_apimessages_SuperRegion
}

type core_apimessages_EstimatedMonthlyPayment @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  availableTermMonths: [Int]
  estimatedMonthlyPayment: core_apimessages_Money
  financingProgramSlug: String
  """products.id"""
  id: String
  lowestAprAtMaxTerm: Int
  maxTermMonth: Int
  splitPay: Boolean
  zeroPercentFinancingPlan: Boolean
}

type core_apimessages_Feedback @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  authorUuid: String
  conditionSatisfactory: google_protobuf_BoolValue
  createdAt: google_protobuf_Timestamp
  listingLink: core_apimessages_Link
  message: String
  orderTitle: String
  rating: Int
  recipientUuid: String
  response: core_apimessages_Feedback_Response
  shippingSatisfactory: google_protobuf_BoolValue
  type: core_apimessages_Feedback_Type
  author: User @join__field(graph: RQL)
  recipient: User @join__field(graph: RQL)
}

type core_apimessages_FeedbackSummary @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  receivedCount: Int
  rollingRatingPercentage: Int
  """users.id"""
  userId: String
}

type core_apimessages_Feedback_Response @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  body: String
  createdAt: google_protobuf_Timestamp
}

type core_apimessages_FeedbacksResponse @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  buyerRating: Float
  feedbacks: [core_apimessages_Feedback]
  limit: Int
  offset: Int
  sellerRating: Float
  total: Int
}

type core_apimessages_Image @join__type(graph: COREQL) @join__type(graph: RQL, key: "_id") {
  _id: ID
  _source: String
  fallbackType: core_apimessages_Image_FallbackType
  height: Int
  """image postgres id"""
  id: String
  """parent postgres id (polymorphic with 'item_type')"""
  itemId: String
  itemType: String
  namedTransform: core_apimessages_NamedImageTransforms
  """attachinary_files.public_id (cloudinary string)"""
  publicId: String
  source: String
  transformation: core_apimessages_ImageEntry_Transformation
  version: String
  width: Int
}

type core_apimessages_ImageAdCreative @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  backgroundColor: String
  backgroundColors: [String]
  backgroundImage: String
  ctaButtonColor: String
  ctaHref: String
  ctaText: String
  ctaTextColor: String
  description: String
  hideAdCallout: Boolean
  mobileBackgroundImage: String
  overlayImage: String
  partnershipText: String
  subtitle: String
  subtitleColor: String
  title: String
  titleColor: String
  cspRowQuery: core_apimessages_CspRowQuery @join__field(graph: RQL)
}

type core_apimessages_ImageEntry_Transformation @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  angle: Int
  crop: String
  height: String
  width: String
  x: String
  y: String
}

type core_apimessages_InternationalTaxProfile @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  address: core_apimessages_Address
  dateOfBirth: String
  id: String
  name: String
  tinMask: String
  tinType: String
  updatedAt: Timestamp
}

type core_apimessages_Link @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  href: String
  """rel path for use in web routing"""
  path: String
}

type core_apimessages_ListingAffirmZeroPercentFinancingConfiguration @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  isEligible: Boolean
  isEnabled: Boolean
}

type core_apimessages_ListingCertifiedPreOwned @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  badgeIconUrl: String
  brandName: String
  darkModeBrandIconUrl: String
  description: String
  lightModeBrandIconUrl: String
  pageUrl: String
  title: String
  tooltipDescription: String
}

type core_apimessages_ListingCounts @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  downloadCount: Int
  downloadCountDisplay: String
  """products.id"""
  id: String
  inBuyerCarts: Int
  inBuyerCartsDisplay: String
  offers: Int
  offersDisplay: String
  views: Int
  viewsDisplay: String
  watchers: Int
  watchersDisplay: String
}

type core_apimessages_ListingDigitalDetails @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  installationInstructions: String
  releaseNotes: String
  rollingDownloadCount: Int
  supportedFormats: [core_apimessages_ListingSupportedFormat]
  systemRequirements: String
  variants: [core_apimessages_ListingDigitalVariant]
}

type core_apimessages_ListingDigitalVariant @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  downloadText: String
  fileSize: String
  fileTypes: [String]
  fileUrl: String
  id: String
  operatingSystems: [String]
}

type core_apimessages_ListingExpressPay @join__type(graph: COREQL, key: "_id") @join__type(graph: RQL, key: "_id") {
  _id: ID
  _source: String
  """Encoded value such as "RL-123" to use to start a checkout"""
  checkoutBundlingId: String
  """
  Initial value for display based on listing price and shipping. May be different than the final value.
  """
  estimatedTotal: core_apimessages_Money
  """Google Pay Config for a listing."""
  googlePay: core_apimessages_CheckoutGooglePayDetails
  """products.id"""
  id: String
  paypal: core_apimessages_CheckoutPaypalDetails
}

type core_apimessages_ListingPricing @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  buyerPrice: core_apimessages_Money
  """products.id"""
  id: String
  originalPrice: core_apimessages_Money
  originalPriceDescription: String
  ribbon: core_apimessages_Ribbon
  typicalNewPriceDisplay: core_apimessages_TypicalNewPriceDisplay
}

type core_apimessages_ListingSaleMembership @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  isListingEligible: Boolean
  isListingInSale: Boolean
  listingId: String
  sale: core_apimessages_Sale
  totalLiveListings: Int
}

type core_apimessages_ListingSalesMemberships @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  reverbSalesMemberships: [core_apimessages_ListingSaleMembership]
  sellerSalesMemberships: [core_apimessages_ListingSaleMembership]
}

type core_apimessages_ListingSpec @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  productSpecs: [core_apimessages_ProductSpec]
}

type core_apimessages_ListingSupportedFormat @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  fileTypes: [String]
  operatingSystem: String
}

type core_apimessages_LocalizedListingContent @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  defaultForShop: Boolean
  description: String
  finish: String
  locale: String
  make: String
  model: String
  prop65Warning: String
  title: String
}

type core_apimessages_Measurement @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  unit: String
  value: String
}

type core_apimessages_Money @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  amount: String
  amountCents: Int
  currency: String
  display: String
  symbol: String
}

type core_apimessages_MyBuyerCouponsResponse @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  shopCampaignCoupons: [core_apimessages_ShopCampaignCoupon]
}

type core_apimessages_NonUserExperiment @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  bucket: String
  name: String
}

type core_apimessages_Offer @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  status: core_apimessages_Offer_OfferStatus
  offerItems: [core_apimessages_OfferItem] @join__field(graph: RQL)
  message: String @join__field(graph: RQL)
  prices: core_apimessages_OfferPrices @join__field(graph: RQL)
  createdAt: google_protobuf_Timestamp @join__field(graph: RQL)
  initiatingParty: core_apimessages_NegotiationParty @join__field(graph: RQL)
  shippingMethod: core_apimessages_ShippingMethod @join__field(graph: RQL)
  layawayTerms: core_apimessages_LayawayTerms @join__field(graph: RQL)
  counterable: Boolean @join__field(graph: RQL)
  alerts: [core_apimessages_OfferAlert] @join__field(graph: RQL)
}

type core_apimessages_PreorderInfo @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  estimatedShipDate: google_protobuf_Timestamp
  """preorder_infos.id"""
  id: String
  leadTimeDays: Int
  onPreorder: Boolean
  shipDate: google_protobuf_Timestamp
}

type core_apimessages_ProductBreadcrumb @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  title: String
  url: String
}

type core_apimessages_ProductSpec @join__type(graph: COREQL, key: "_id") @join__type(graph: RQL, key: "_id") {
  _id: ID
  _source: String
  id: String
  name: String
  path: String
  slug: String
  type: core_apimessages_ProductSpec_Type
  value: String
}

type core_apimessages_ProtectionPlan @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  amount: core_apimessages_Money
  condensedTitle: String
  durationMonths: String
  planCoverageDetails: [String]
  planId: String
  termsUrl: String
  title: String
}

type core_apimessages_ProtectionPlanOptions @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  availablePlans: [core_apimessages_ProtectionPlan]
  coverageDetailsSubheader: String
  protectionHighlights: [String]
  protectionPlanCalloutTitle: String
}

type core_apimessages_RegionalShippingRate @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  areas: [String]
  rate: core_apimessages_Money
}

type core_apimessages_ReturnPolicy @join__type(graph: COREQL, key: "_id") @join__type(graph: RQL, key: "_id") {
  _id: ID
  _source: String
  id: String
  legacyReturnPolicyText: String
  newReturnWindowDays: Int
  restockingFeePercent: Int
  specialConditions: String
  usedReturnWindowDays: Int
}

type core_apimessages_Reviewer @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  links: core_apimessages_ReviewerLinks
  shortname: String
}

type core_apimessages_ReviewerLinks @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  avatar: core_apimessages_Link
}

type core_apimessages_Ribbon @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  display: String
  displayReason: String
  reason: core_apimessages_Ribbon_Reason
}

type core_apimessages_Sale @join__type(graph: COREQL, key: "_id") @join__type(graph: RQL, key: "_id") {
  _id: ID
  _source: String
  buyerIneligibilityReason: String
  code: String
  discountValue: String
  display: String
  endsAt: google_protobuf_Timestamp
  """sales.id"""
  id: String
  links: core_apimessages_SaleLinks
  name: String
  percent: Int
  saleType: String
  shopName: String
  shopSlug: String
  slug: String
  startsAt: google_protobuf_Timestamp
  state: core_apimessages_Sale_SaleState
  summary: String
  withSalePriceDisplay: String @join__field(graph: RQL) @deprecated
  showCode: Boolean @join__field(graph: RQL) @deprecated
}

type core_apimessages_SaleLinks @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  self: core_apimessages_Link
}

type core_apimessages_ScheduledPriceDrop @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  active: Boolean
  dropAt: Timestamp
  newPrice: core_apimessages_Money
}

type core_apimessages_ShippingPrice @join__type(graph: COREQL) @join__type(graph: RQL, key: "_id") {
  _id: ID
  _source: String
  carrierCalculated: Boolean
  destinationPostalCodeNeeded: Boolean
  """in shop currency, VAT conditionally included"""
  originalRate: core_apimessages_Money
  """in shop currency, no VAT"""
  originalRateVatExcluded: core_apimessages_Money
  postalCode: String
  """in user currency, VAT conditionally included"""
  rate: core_apimessages_Money
  regional: Boolean
  shippingMethod: core_apimessages_ShippingMethod
  shippingRateId: String
  shippingRegionCode: String
}

type core_apimessages_ShippingPrices @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  freeExpeditedShipping: Boolean
  localPickup: Boolean
  localPickupOnly: Boolean
  shippingAddress: core_apimessages_Address
  shippingPrices: [core_apimessages_ShippingPrice]
  """user shipping region code"""
  shippingRegionCode: String
}

type core_apimessages_ShippingProfile @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  """Only visible to the shop owner"""
  allShippingRates(input: Input_core_apimessages_NodeRequest_Lookup_Params_ShippingRates): [core_apimessages_ShippingRates]
  categoryUuids: [String]
  id: String
  localPickup: Boolean
  name: String
  shippingRates: core_apimessages_ShippingRates @deprecated
}

type core_apimessages_ShippingRates @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  expeditedRate: core_apimessages_Money
  freeShippingThreshold: core_apimessages_Money
  incrementalRate: core_apimessages_Money
  rate: core_apimessages_Money
  rateType: String
  regionCode: String
  regionName: String
  regionType: core_apimessages_ShippingRates_RegionType
  regionalExpeditedRates: [core_apimessages_RegionalShippingRate]
  regionalRates: [core_apimessages_RegionalShippingRate]
}

type core_apimessages_ShippingRegionSetting @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  allowedToShipCarrierCalculated: Boolean
  isDomestic: Boolean
  regionCode: String
  regionName: String
}

type core_apimessages_ShopCampaignCoupon @join__type(graph: COREQL, key: "_id") @join__type(graph: RQL, key: "_id") {
  _id: ID
  _source: String
  applyToBStockConditions: Boolean
  applyToNewConditions: Boolean
  applyToUsedConditions: Boolean
  code: String
  couponHeader: String
  descriptionSummary: String
  discountValue: String
  excludedBrands: [Brand]
  excludedCategories: [Category]
  expiresAt: Timestamp
  id: String
  restrictionsSummary: String
  status: core_apimessages_ShopCampaignCoupon_Status
  shop: Shop @join__field(graph: RQL)
}

type core_apimessages_ShopCertifiedPreOwned @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  badgeIconUrl: String
  brandName: String
  darkModeBrandIconUrl: String
  description: String
  lightModeBrandIconUrl: String
  pageUrl: String
  title: String
  tooltipDescription: String
}

type core_apimessages_ShopConfig_OfferPolicy @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  autoAcceptHighOffers: Boolean
  autoRejectLowOffers: Boolean
  lowballPercentage: Int
}

type core_apimessages_ShopTaxPolicy @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  displayLocation: String
  displayRate: String
  policyType: core_apimessages_ShopTaxPolicy_PolicyType
  vatPolicy: Boolean
}

type core_apimessages_Subregion @join__type(graph: COREQL, key: "_id") @join__type(graph: RQL, key: "_id") {
  _id: ID
  _source: String
  code: String
  id: String
  name: String
}

type core_apimessages_SuperRegion @join__type(graph: COREQL, key: "_id") @join__type(graph: RQL, key: "_id") {
  _id: ID
  _source: String
  code: String
  id: String
  name: String
}

type core_apimessages_TaxProfile @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  address: core_apimessages_Address
  createdAt: Timestamp
  firstName: String
  id: String
  lastName: String
  mask: String
  name: String
  state: String
  tinType: String
  updatedAt: Timestamp
  verificationStatus: core_apimessages_TaxProfile_TaxProfileVerificationStatus
  verifiedAt: Timestamp
}

type core_apimessages_Trait @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  """traits.uuid"""
  keyId: String
  value: String
  """traits.value_uuid"""
  valueId: String
}

type core_apimessages_TypicalNewPriceDisplay @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  amountDisplay: String
  descriptionDisplay: String
  savingsDisplay: String
}

type core_apimessages_UpdateWatchResponse @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  id: String
  listing: Listing
  listingId: String
  userId: String
}

type core_apimessages_Video @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  empty: Boolean
  """video_links.id"""
  id: String
  """
  video_links.videolinkable_id (polymorphic foreign key, with 'item_type')
  """
  itemId: String
  itemType: String
  link: String
  """video_links.youtube_video_id"""
  youtubeVideoId: String
}

type core_apimessages_VideoLink @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  youtubeLink: String
  youtubeVideoId: String
}

"""
  Wrapper message for `bool`.

The JSON representation for `BoolValue` is JSON `true` and `false`.
"""
type google_protobuf_BoolValue @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  """The bool value."""
  value: Boolean
}

"""
  Wrapper message for `int32`.

The JSON representation for `Int32Value` is JSON number.
"""
type google_protobuf_Int32Value @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  """The int32 value."""
  value: Int
}

"""
  Google "fixed" a bug where timestamps should serialize as
a JSON string. We don't rely on this in many places, but this
type should be compatible without running into issues with the

WKT/upb exception here:
https://github.com/protocolbuffers/upb/blob/9e1f89ef2c2cf4f9fe98bc4afe651ddfe7c575ab/upb/json/printer.c#L1252

Represents seconds of UTC time since Unix epoch
1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
9999-12-31T23:59:59Z inclusive.
"""
type google_protobuf_Timestamp @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  """Yes we'll have a 2038 problem"""
  seconds: Int
  """
    Non-negative fractions of a second at nanosecond resolution. Negative
  second values with fractions must still have non-negative nanos values
  that count forward in time. Must be from 0 to 999,999,999
  inclusive.
  """
  nanos: Int @join__field(graph: RQL)
}

"""Only for use with Price Recommendations. Prefer Types::Money."""
type reverb_pricing_Money @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  amount: String
  amountCents: Int
  currency: String
  display: String
  symbol: String
}

type reverb_pricing_PriceRecommendation @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  canonicalProductId: String
  comparisonShoppingPageId: String
  conditionUuid: String
  countryCode: String
  priceHigh: reverb_pricing_Money
  priceHighThirtyDaysAgo: reverb_pricing_Money
  priceLow: reverb_pricing_Money
  priceLowThirtyDaysAgo: reverb_pricing_Money
  priceMiddle: reverb_pricing_Money
  priceMiddleThirtyDaysAgo: reverb_pricing_Money
}

type reverb_search_Filter @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  aggregationName: String
  key: String
  name: String
  options: [reverb_search_FilterOption]
  widgetType: reverb_search_Filter_WidgetType
}

type reverb_search_FilterOption @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  all: Boolean
  autoselected: Boolean
  count: google_protobuf_Int32Value
  name: String
  optionValue: String
  paramName: String
  selected: Boolean
  setValues: [String]
  subFilter: reverb_search_Filter
  trackingValue: String
  unsetValues: [String]
  urlParamName: String
}

type reverb_search_ProductReviewStats @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  averageRating: Float
  ratingsDistribution: [reverb_search_ProductReviewStats_RatingDistribution]
  total: Int
}

type reverb_search_ProductReviewStats_RatingDistribution @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  rating: String
  reviewCount: Int
}

type reverb_search_SearchResponse @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  negotiations: [Negotiation]
  total: Int
  resultIds: [String] @join__field(graph: RQL)
  results: [reverb_search_Document] @join__field(graph: RQL)
  offset: Int @join__field(graph: RQL)
  limit: Int @join__field(graph: RQL)
  completions: [reverb_search_Completion] @join__field(graph: RQL)
  percentiles: [reverb_search_Percentile] @join__field(graph: RQL)
  bestListings: [reverb_search_BestListing] @join__field(graph: RQL)
  resultUuids: [String] @join__field(graph: RQL)
  filters: [reverb_search_Filter] @join__field(graph: RQL)
  bumpIds: [String] @join__field(graph: RQL)
  topCollections: reverb_search_TopCollectionsResult @join__field(graph: RQL)
  suggestedQueries: [String] @join__field(graph: RQL)
  fallbackResultIds: [String] @join__field(graph: RQL)
  orderMetrics: reverb_search_OrderMetrics @join__field(graph: RQL)
  dateBuckets: [reverb_search_DateBucket] @join__field(graph: RQL)
  priceStats: reverb_search_PriceStatsResults @join__field(graph: RQL)
  bumpRecommendations: reverb_search_BumpRecommendationsResults @join__field(graph: RQL)
  gearCollectionStats: reverb_search_GearCollectionStats @join__field(graph: RQL)
  totalHits: reverb_search_SearchResponse_TotalHits @join__field(graph: RQL)
  suggestions: [reverb_search_SearchResponse_Suggestion] @join__field(graph: RQL)
  autodirected: Boolean @join__field(graph: RQL)
  eligibleAutodirects: [reverb_search_Autodirects] @join__field(graph: RQL)
  averageMonthlyProductPrices: [reverb_search_AverageMonthlyProductPrice] @join__field(graph: RQL)
  querySpellCorrections: [reverb_search_QuerySpellCorrection] @join__field(graph: RQL)
  productReviewStats: reverb_search_ProductReviewStats @join__field(graph: RQL)
  esScores: [Float] @join__field(graph: RQL)
  listingRecommendationStats: reverb_search_ListingRecommendationStats @join__field(graph: RQL)
  productReviews: [ProductReview] @join__field(graph: RQL)
  metadata: rql_PageMetadata @join__field(graph: RQL) @deprecated
  csps: [CSP] @join__field(graph: RQL)
  priceGuides: [PriceGuide] @join__field(graph: RQL)
  listings: [Listing] @join__field(graph: RQL)
  fallbackListings: [Listing] @join__field(graph: RQL)
  bumpedListings: [Listing] @join__field(graph: RQL)
  orders: [Order] @join__field(graph: RQL)
  priceRecords: [PublicPriceRecord] @join__field(graph: RQL)
  gearCollectionItems: [GearCollectionItem] @join__field(graph: RQL)
  cmsPages: [CMSPage] @join__field(graph: RQL)
  ordersForShipment: [Order] @join__field(graph: RQL)
}

type reverb_signals_Signal @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  group: reverb_signals_Signal_Group
  icon: String
  iconDark: String
  link: reverb_signals_SignalLink
  name: reverb_signals_Signal_Name
  slot: reverb_signals_Signal_Slot
  subtitle: String
  title: String
  tooltipText: String
}

type reverb_signals_SignalLink @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  text: String
  url: String
}

type rql_CSPProductReviewSearchResponse @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  filters: [reverb_search_Filter]
  productReviews: [ProductReview]
  stats: reverb_search_ProductReviewStats
  total: Int
}

type rql_Me @join__type(graph: COREQL, key: "_id") @join__type(graph: RQL, key: "_id") {
  _id: ID
  _source: String
  admin: Boolean
  availableActions(input: Input_core_apimessages_MyAvailableActionsIndexRequest): [core_apimessages_AvailableAction]
  buyerCoupons(input: Input_core_apimessages_MyBuyerCouponsRequest!): core_apimessages_MyBuyerCouponsResponse
  cart: rql_MyCart
  """True when this user has a single orderBundle, otherwise false."""
  firstTimeBuyer: Boolean
  """users.id"""
  id: String
  myNegotiations(input: Input_rql_NegotiationQuery): reverb_search_SearchResponse
  """Only visible to shop administrators"""
  payoutBalances: [core_apimessages_Money]
  profileSlug: String
  requireOptIn: Boolean
  reverbCredits: [core_apimessages_Money]
  shop: MyShop
  shopId: String
  shopSlug: String
  shopUuid: String
  status: core_apimessages_UserStatus
  uuid: String
  token: String @join__field(graph: RQL)
  follows(input: Input_rql_FollowsQuery): reverb_feed_GetFollowsResponse @join__field(graph: RQL)
  feed(input: Input_rql_FeedQuery!): reverb_feed_FeedResponse @join__field(graph: RQL)
  name: String @join__field(graph: RQL)
  firstName: String @join__field(graph: RQL)
  shortname: String @join__field(graph: RQL)
  recentlyViewedListings(input: Input_core_apimessages_RecentlyViewedListingsRequest!): core_apimessages_RecentlyViewedListingsResponse @join__field(graph: RQL)
  recentSearches: core_apimessages_RecentSearchesResponse @join__field(graph: RQL)
  shipments(input: Input_rql_CollectionQuery!): [Shipment] @join__field(graph: RQL)
  counts: core_apimessages_CountsResponse @join__field(graph: RQL)
  profile(input: Input_rql_MeProfileRequest): mparticle_ProfileResponse @join__field(graph: RQL)
  orders(input: Input_rql_CollectionQuery!): [Order] @join__field(graph: RQL)
  avatar: core_apimessages_Image @join__field(graph: RQL)
  sellerCheckout(input: Input_rql_SellerCheckoutInput): SellerCheckout @join__field(graph: RQL)
  creditCards: [core_apimessages_CreditCard] @join__field(graph: RQL)
  shippingAddresses: [core_apimessages_Address] @join__field(graph: RQL)
  alerts: [core_apimessages_Alert] @join__field(graph: RQL)
  watches(input: Input_core_apimessages_WatchesRequest): WatchCollection @join__field(graph: RQL)
  favorites(input: Input_rql_FavoritesRequest): rql_FavoritesResponse @join__field(graph: RQL)
  watchedListings(input: Input_reverb_search_ListingsSearchRequest): reverb_search_SearchResponse @join__field(graph: RQL)
  brandManagerBrands(input: Input_core_apimessages_BrandManagerBrandsRequest): [Brand] @join__field(graph: RQL)
  brandManagerBrand(input: Input_core_apimessages_BrandManagerBrandRequest!): Brand @join__field(graph: RQL)
  emailSubscriptions: [rql_EmailSubscription] @join__field(graph: RQL)
  emailGlobalSubscribe: rql_SubscribeState @join__field(graph: RQL)
  gearCollectionItems: [GearCollectionItem] @join__field(graph: RQL)
  """Returns a user's gear collection settings"""
  gearCollectionSetting: core_apimessages_GearCollectionSettingResponse @join__field(graph: RQL) @deprecated
  """Returns a user's gear collection settings"""
  gearCollectionSettings: core_apimessages_GearCollectionSettingsResponse @join__field(graph: RQL)
  recentlyViewedCsps: [CSP] @join__field(graph: RQL)
  recommendedListings(input: Input_reverb_search_ListingsSearchRequest): reverb_search_SearchResponse @join__field(graph: RQL)
  updates(input: Input_rql_MyUpdatesQuery): rql_MyUpdatesResponse @join__field(graph: RQL)
  homepageNotifications(input: Input_core_apimessages_MyHomepageNotificationsRequest): core_apimessages_MyHomepageNotificationsResponse @join__field(graph: RQL)
  plaidLinkToken: String @join__field(graph: RQL)
  userServices: [core_apimessages_UserService] @join__field(graph: RQL)
  adaChatToken: core_apimessages_AdaChatTokenResponse @join__field(graph: RQL)
  prepublishStatus: core_apimessages_PrepublishStatusResponse @join__field(graph: RQL)
  myMessages(input: Input_core_apimessages_MyMessagesRequest): [core_apimessages_MyMessage] @join__field(graph: RQL)
  discover(input: Input_rql_DiscoverRequest): rql_DiscoverResponse @join__field(graph: RQL)
}

type rql_MyCart @join__type(graph: COREQL) @join__type(graph: RQL) {
  _source: String
  cartItems: [core_apimessages_CartItem]
  _: Boolean @join__field(graph: RQL)
  bundles: [core_apimessages_CartItemBundle] @join__field(graph: RQL)
}

type arbiter_APIError @join__type(graph: RQL) {
  message: String
  _source: String
}

type arbiter_APIErrorResponse @join__type(graph: RQL) {
  errors: [arbiter_APIError]
  _source: String
}

type arbiter_Arbiter @join__type(graph: RQL) {
  BumpedSortedListings(input: Input_arbiter_BumpedSortedListingsRequest): arbiter_BumpedSortedListingsResponse
  FeaturedListing(input: Input_arbiter_FeaturedListingRequest): arbiter_FeaturedListingResponse
  BulkFeaturedListing(input: Input_arbiter_BulkFeaturedListingRequest): arbiter_BulkFeaturedListingResponse
  BulkTrackImpressions(input: Input_arbiter_BulkTrackImpressionsRequest): arbiter_BulkTrackImpressionsResponse
  SellerInteractionTimeSeries(input: Input_arbiter_SellerInteractionTimeSeriesRequest): arbiter_SellerInteractionTimeSeriesResponse
  BulkBumpInteractionCounts(input: Input_arbiter_BulkBumpInteractionCountsRequest): arbiter_BulkBumpInteractionCountsResponse
  _source: String
}

type arbiter_BulkBumpInteractionCountsRequest @join__type(graph: RQL) {
  requests: [arbiter_BumpInteractionCountsRequest]
  _source: String
}

type arbiter_BulkBumpInteractionCountsResponse @join__type(graph: RQL) {
  responses: [arbiter_BumpInteractionCountsResponse]
  _source: String
}

type arbiter_BulkFeaturedListingRequest @join__type(graph: RQL) {
  requests: [arbiter_FeaturedListingRequest]
  _source: String
}

type arbiter_BulkFeaturedListingResponse @join__type(graph: RQL) {
  responses: [arbiter_FeaturedListingResponse]
  _source: String
}

type arbiter_BulkTrackImpressionsRequest @join__type(graph: RQL) {
  listingIds: [String]
  _source: String
}

type arbiter_BulkTrackImpressionsResponse @join__type(graph: RQL) {
  listingIds: [String]
  _source: String
}

type arbiter_BumpInteractionCountsRequest @join__type(graph: RQL) {
  sellerId: String
  listingId: String
  _source: String
}

type arbiter_BumpInteractionCountsResponse @join__type(graph: RQL) {
  listingId: String
  click: Int
  addToWatchlist: Int
  addToCart: Int
  makeAnOffer: Int
  total: Int
  messageSeller: Int
  _source: String
}

type arbiter_BumpedSortedListingResponseListing @join__type(graph: RQL) {
  productId: String
  bumped: Boolean
  rank: Float
  bid: Float
  qualityScore: Float
  discountPercent: Int
  _source: String
}

type arbiter_BumpedSortedListingsRequest @join__type(graph: RQL) {
  userShippingRegion: String
  listingIds: [String]
  condition: String
  total: Int
  bumpedMax: Int
  itemRegion: String
  auctionType: arbiter_AuctionType
  _source: String
}

type arbiter_BumpedSortedListingsResponse @join__type(graph: RQL) {
  products: [arbiter_BumpedSortedListingResponseListing]
  resultIds: [String]
  _source: String
}

type arbiter_CreateInteractionRequest @join__type(graph: RQL) {
  interaction: arbiter_Interaction
  _source: String
}

type arbiter_FeaturedListingRequest @join__type(graph: RQL) {
  cspSlug: String
  canonicalFinish: String
  userShippingRegion: String
  cspId: String
  traitValues: [String]
  categoryUuids: [String]
  deterministic: Boolean
  itemRegion: String
  conditionUuids: [String]
  auctionType: arbiter_AuctionType
  userCurrency: String
  listingIds: [String]
  includeListingsOutsideLowestPriceWindow: Boolean
  isUserInCspOptimizationExp: Boolean
  applyProximityBoost: Boolean
  _source: String
}

type arbiter_FeaturedListingResponse @join__type(graph: RQL) {
  productId: String
  bumped: Boolean
  rank: Float
  bid: Float
  qualityScore: Float
  runnerUp: arbiter_FeaturedListingResponse
  listing: Listing
  _source: String
}

type arbiter_FindInteractionRequest @join__type(graph: RQL) {
  productId: String
  userId: String
  cookieId: String
  orderedAt: Timestamp
  _source: String
}

type arbiter_FindInteractionResponse @join__type(graph: RQL) {
  interaction: arbiter_Interaction
  _source: String
}

type arbiter_Interaction @join__type(graph: RQL) {
  uuid: String
  userId: String
  sessionId: String
  cookieId: String
  productId: String
  bumpRate: String
  referrerUrl: String
  sellerId: String
  componentName: String
  position: Int
  issuedAt: Timestamp
  createdAt: Timestamp
  interactionType: arbiter_Interaction_InteractionType
  offsiteSource: String
  currentUrl: String
  userExperimentsJson: String
  userDeviceName: String
  _source: String
}

type arbiter_InteractionTimeSeriesMetric @join__type(graph: RQL) {
  date: String
  click: Int
  addToWatchlist: Int
  addToCart: Int
  makeAnOffer: Int
  total: Int
  messageSeller: Int
  _source: String
}

type arbiter_Listing @join__type(graph: RQL) {
  id: String
  _source: String
}

type arbiter_SellerInteractionTimeSeriesRequest @join__type(graph: RQL) {
  sellerId: String
  startDate: String
  endDate: String
  _source: String
}

type arbiter_SellerInteractionTimeSeriesResponse @join__type(graph: RQL) {
  data: [arbiter_InteractionTimeSeriesMetric]
  click: Int
  addToWatchlist: Int
  addToCart: Int
  makeAnOffer: Int
  total: Int
  messageSeller: Int
  _source: String
}

type braze_Braze @join__type(graph: RQL) {
  GetSubscriptionGroups(input: Input_braze_GetSubscriptionGroupsRequest): braze_GetSubscriptionGroupsResponse
  SetSubscriptionGroups(input: Input_braze_SetSubscriptionGroupsRequest): braze_SetSubscriptionGroupsResponse
  GetUserData(input: Input_braze_GetUserDataRequest): braze_GetUserDataResponse
  UserTrack(input: Input_braze_UserTrackRequest): braze_UserTrackResponse
  TriggerCampaignSend(input: Input_braze_TriggerCampaignSendRequest): braze_TriggerCampaignSendResponse
  _source: String
}

type braze_BrazeUser @join__type(graph: RQL) {
  externalId: String
  email: String
  pushSubscribe: String
  emailSubscribe: String
  _source: String
}

type braze_GetSubscriptionGroupsRequest @join__type(graph: RQL) {
  externalId: [String]
  email: [String]
  _source: String
}

type braze_GetSubscriptionGroupsResponse @join__type(graph: RQL) {
  users: [braze_SubscriptionUser]
  totalCount: Int
  message: String
  _source: String
}

type braze_GetUserDataRequest @join__type(graph: RQL) {
  externalIds: [String]
  fieldsToExport: [String]
  _source: String
}

type braze_GetUserDataResponse @join__type(graph: RQL) {
  message: String
  users: [braze_BrazeUser]
  invalidUserIds: [String]
  _source: String
}

type braze_OptInRecipient @join__type(graph: RQL) {
  externalUserId: String
  _source: String
}

type braze_SetSubscriptionGroupsRequest @join__type(graph: RQL) {
  subscriptionGroupId: String
  subscriptionState: String
  externalId: String
  email: String
  _source: String
}

type braze_SetSubscriptionGroupsResponse @join__type(graph: RQL) {
  message: String
  _source: String
}

type braze_SubscriptionGroupConfig @join__type(graph: RQL) {
  id: String
  name: String
  channel: String
  status: String
  _source: String
}

type braze_SubscriptionUser @join__type(graph: RQL) {
  email: String
  phone: String
  externalId: String
  subscriptionGroups: [braze_SubscriptionGroupConfig]
  _source: String
}

type braze_TriggerCampaignSendRequest @join__type(graph: RQL) {
  campaignId: String
  recipients: [braze_OptInRecipient]
  _source: String
}

type braze_TriggerCampaignSendResponse @join__type(graph: RQL) {
  dispatchId: String
  message: String
  _source: String
}

type braze_UserAttributes @join__type(graph: RQL) {
  externalId: String
  brazeId: String
  UpdateExistingOnly: Boolean
  emailSubscribe: String
  pushSubscribe: String
  _source: String
}

type braze_UserTrackRequest @join__type(graph: RQL) {
  attributes: [braze_UserAttributes]
  _source: String
}

type braze_UserTrackResponse @join__type(graph: RQL) {
  message: String
  _source: String
}

type cms_AdminClonePageRequest @join__type(graph: RQL) {
  slug: String
  _source: String
}

type cms_AdminClonePageResponse @join__type(graph: RQL) {
  clonedPageSlug: String
  _source: String
}

type cms_AdminComponentsResponse @join__type(graph: RQL) {
  components: [cms_Component]
  _source: String
}

type cms_AdminCreatePage @join__type(graph: RQL) {
  id: String
  goLiveAt: String
  imageAttributionUri: String
  authorId: String
  pageType: String
  imageKey: String
  slug: String
  channels: [String]
  componentIds: [String]
  localizedContents: [cms_PageLocalizedContent]
  layoutId: String
  metaImageKey: String
  headerStyle: String
  noIndex: Boolean
  secondaryImageKey: String
  pageTemplateId: String
  darkModeReady: Boolean
  _source: String
}

type cms_AdminCreatePageTemplate @join__type(graph: RQL) {
  id: String
  name: String
  layoutId: String
  customVariables: [String]
  _source: String
}

type cms_AdminCreatePageTemplateRequest @join__type(graph: RQL) {
  pageTemplate: cms_AdminCreatePageTemplate
  _source: String
}

type cms_AdminDeletePageRequest @join__type(graph: RQL) {
  id: String
  _source: String
}

type cms_AdminPageCreateRequest @join__type(graph: RQL) {
  page: cms_AdminCreatePage
  _source: String
}

type cms_AdminPageIndexRequest @join__type(graph: RQL) {
  page: String
  perPage: String
  q: String
  ids: [String]
  pageType: String
  channels: [String]
  _source: String
}

type cms_AdminPageTemplateIndexRequest @join__type(graph: RQL) {
  page: String
  perPage: String
  q: String
  ids: [String]
  _source: String
}

type cms_AdminPagesResponse @join__type(graph: RQL) {
  pages: [cms_Page]
  meta: cms_Pagination
  _source: String
}

type cms_AdminTakeSlugRequest @join__type(graph: RQL) {
  currentSlug: String
  desiredSlug: String
  _source: String
}

type cms_AdminTakeSlugResponse @join__type(graph: RQL) {
  updatedSlug: String
  legacySlug: String
  _source: String
}

type cms_Author @join__type(graph: RQL) {
  id: String
  slug: String
  name: String
  _source: String
}

type cms_AuthorIndexResponse @join__type(graph: RQL) {
  authors: [cms_Author]
  _source: String
}

type cms_AuthorRequest @join__type(graph: RQL) {
  author: cms_Author
  _source: String
}

type cms_AuthorResponse @join__type(graph: RQL) {
  author: cms_Author
  _source: String
}

type cms_BulkComponentRequest @join__type(graph: RQL) {
  components: [cms_Component]
  _source: String
}

type cms_BulkComponentResponse @join__type(graph: RQL) {
  components: [cms_Component]
  _source: String
}

type cms_BulkPagination @join__type(graph: RQL) {
  total: Int
  offset: Int
  limit: Int
  _source: String
}

type cms_Component @join__type(graph: RQL) {
  id: String
  pageId: String
  position: Int
  componentType: String
  localizedContents: [cms_ComponentLocalizedContent]
  layoutSection: String
  targetCountries: [String]
  blacklistCountries: [String]
  active: Boolean
  experimentKey: String
  """'default' or 'experiment'"""
  experimentBucket: String
  type: String
  pageTemplateId: String
  _source: String
}

type cms_ComponentDeleteRequest @join__type(graph: RQL) {
  id: String
  _source: String
}

type cms_ComponentLocalizedContent @join__type(graph: RQL) {
  locale: String
  data: String
  _source: String
}

type cms_ComponentRequest @join__type(graph: RQL) {
  component: cms_Component
  _source: String
}

type cms_ComponentResponse @join__type(graph: RQL) {
  component: cms_Component
  _source: String
}

type cms_ComponentTemplatesRequest @join__type(graph: RQL) {
  pageTemplateId: String
  layoutSection: String
  _source: String
}

type cms_ComponentsRequest @join__type(graph: RQL) {
  ids: [String]
  layoutSection: String
  pageId: String
  _source: String
}

type cms_Layout @join__type(graph: RQL) {
  id: String
  name: String
  sections: [String]
  _source: String
}

type cms_LayoutsIndexRequest @join__type(graph: RQL) {
  ids: [String]
  q: String
  _source: String
}

type cms_LayoutsResponse @join__type(graph: RQL) {
  layouts: [cms_Layout]
  _source: String
}

type cms_NodeRequest @join__type(graph: RQL) {
  lookups: [cms_NodeRequest_Lookup]
  _source: String
}

type cms_NodeRequest_Lookup @join__type(graph: RQL) {
  lid: String
  rel: String
  _source: String
}

type cms_NodeResponse @join__type(graph: RQL) {
  results: [cms_NodeResponse_Result]
  _source: String
}

type cms_NodeResponse_Result @join__type(graph: RQL) {
  lookup: cms_NodeRequest_Lookup
  meta: cms_NodeResponse_Result_Meta
  publicComponents: [cms_PublicComponent]
  _source: String
}

type cms_NodeResponse_Result_Meta @join__type(graph: RQL) {
  total: Int
  _source: String
}

type cms_Page @join__type(graph: RQL) {
  id: String
  slug: String
  goLiveAt: String
  componentIds: [String]
  imageAttributionUri: String
  imageKey: String
  authorId: String
  pageType: String
  channels: [String]
  localizedContents: [cms_PageLocalizedContent]
  layoutId: String
  metaImageKey: String
  headerStyle: String
  noIndex: Boolean
  secondaryImageKey: String
  pageTemplateId: String
  darkModeReady: Boolean
  _source: String
}

type cms_PageImage @join__type(graph: RQL) {
  imageUrl: String
  _source: String
}

type cms_PageLocalizedContent @join__type(graph: RQL) {
  locale: String
  title: String
  description: String
  metaTitle: String
  metaDescription: String
  actionText: String
  actionUrl: String
  searchPlaceholder: String
  customVariableData: String
  breadcrumbs: String
  _source: String
}

type cms_PageRequest @join__type(graph: RQL) {
  page: cms_PublicPage
  _source: String
}

type cms_PageResponse @join__type(graph: RQL) {
  page: cms_Page
  _source: String
}

type cms_PageTemplate @join__type(graph: RQL) {
  id: String
  name: String
  layoutId: String
  customVariables: [String]
  _source: String
}

type cms_PageTemplateIndexResponse @join__type(graph: RQL) {
  pageTemplates: [cms_PageTemplate]
  meta: cms_Pagination
  _source: String
}

type cms_PageTemplatePageInfo @join__type(graph: RQL) {
  pageTemplateId: String
  pageCount: Int
  pageTitles: [String]
  _source: String
}

type cms_PageTemplatePageInfoResponse @join__type(graph: RQL) {
  pageTemplatePageInfo: [cms_PageTemplatePageInfo]
  _source: String
}

type cms_PageTemplateResponse @join__type(graph: RQL) {
  pageTemplate: cms_PageTemplate
  _source: String
}

type cms_PagesRequest @join__type(graph: RQL) {
  ids: [String]
  slugs: [String]
  includeDrafts: String
  pageType: String
  limit: String
  offset: String
  channels: [String]
  excludeBlacklistedEmbeds: Boolean
  pageTypes: [String]
  query: String
  _source: String
}

type cms_PagesResponse @join__type(graph: RQL) {
  pages: [cms_PublicPage]
  meta: cms_BulkPagination
  _source: String
}

type cms_Pagination @join__type(graph: RQL) {
  total: Int
  currentPage: Int
  perPage: Int
  _source: String
}

type cms_PublicAPI @join__type(graph: RQL) {
  GetPages(input: Input_cms_PagesRequest): cms_PagesResponse
  NodesPublicComponents(input: Input_cms_NodeRequest): cms_NodeResponse
  _source: String
}

type cms_PublicComponent @join__type(graph: RQL) {
  id: String
  pageId: String
  position: Int
  componentType: String
  data: String
  layoutSection: String
  active: Boolean
  """cms_recently_viewed  cms_used_first"""
  experimentKey: String
  """'default' or 'experiment'"""
  experimentBucket: String
  title: String
  subtitle: String
  searchUrlParams: String
  searchSort: String
  searchType: cms_PublicComponent_SearchType
  _source: String
}

type cms_PublicPage @join__type(graph: RQL) {
  id: String
  slug: String
  goLiveAt: String
  title: String
  description: String
  metaTitle: String
  metaDescription: String
  componentIds: [String] @deprecated
  imageAttributionUri: String
  image: cms_PageImage
  authorId: String
  pageType: String
  authorName: String
  albumIds: [String] @deprecated
  channels: [String]
  locale: String
  layoutId: String
  layoutSlug: String
  metaImage: cms_PageImage
  headerStyle: String
  actionText: String
  actionUrl: String
  searchPlaceholder: String
  noIndex: Boolean
  secondaryImage: cms_PageImage
  live: Boolean
  """
  Flag used to thread to the frontend to indicate a cms slug was not found and we should render the not found page.
  """
  pageNotFound: Boolean
  targetLocales: [String]
  breadcrumbs: String
  darkModeReady: Boolean
  components: [cms_PublicComponent]
  _source: String
}

type core_apimessages_AcceptAddressSuggestionRequest @join__type(graph: RQL) {
  suggestionId: String
  _source: String
}

type core_apimessages_AcceptAddressSuggestionResponse @join__type(graph: RQL) {
  """address uuid"""
  id: String
  _source: String
}

type core_apimessages_AcceptedPaymentMethodsRequest @join__type(graph: RQL) {
  """either shops.uuid or products.id"""
  ids: [String]
  type: core_apimessages_AcceptedPaymentMethodsRequest_PaymentMethodsType
  _source: String
}

type core_apimessages_AcceptedPaymentMethodsResponse @join__type(graph: RQL) {
  paymentMethods: [core_apimessages_PaymentMethods]
  _source: String
}

type core_apimessages_AccertifyDeviceInfo @join__type(graph: RQL) {
  transactionId: String
  ubaId: String
  ubaEvents: String
  pageId: String
  ubaSessionId: String
  _source: String
}

type core_apimessages_AccountAlertsResponse @join__type(graph: RQL) {
  alerts: [core_apimessages_Alert]
  _source: String
}

type core_apimessages_ActionSourceAttributes @join__type(graph: RQL) {
  device: String
  _source: String
}

type core_apimessages_AdCampaign @join__type(graph: RQL) {
  uuid: String
  name: String
  description: String
  status: core_apimessages_AdCampaign_AdStatus
  startsAt: Timestamp
  endsAt: Timestamp
  advertiserUuid: String
  _source: String
}

type core_apimessages_AdCampaignsSearchRequest @join__type(graph: RQL) {
  offset: Int
  limit: Int
  status: core_apimessages_AdCampaignsSearchRequest_Status
  withinDate: String
  advertiserUuids: [String]
  adZoneSlugs: [String]
  _source: String
}

type core_apimessages_AdCampaignsSearchResponse @join__type(graph: RQL) {
  resultUuids: [String]
  offset: Int
  limit: Int
  total: Int
  adCampaigns: [AdCampaign]
  _source: String
}

type core_apimessages_AdGroupKeyword @join__type(graph: RQL) {
  id: String
  keyword: String
  _source: String
}

type core_apimessages_AdGroupsSearchRequest @join__type(graph: RQL) {
  offset: Int
  limit: Int
  adCampaignUuids: [String]
  _source: String
}

type core_apimessages_AdGroupsSearchResponse @join__type(graph: RQL) {
  resultUuids: [String]
  offset: Int
  limit: Int
  total: Int
  adGroups: [AdGroup]
  _source: String
}

type core_apimessages_AdPlacement @join__type(graph: RQL) {
  format: core_apimessages_AdFormat
  _source: String
}

type core_apimessages_AdPlacementRequest @join__type(graph: RQL) {
  adZones: [core_apimessages_AdZone]
  adTypes: [core_apimessages_AdType]
  _source: String
}

type core_apimessages_AdServeRequest @join__type(graph: RQL) {
  userContext: core_apimessages_AdUserContext
  targeting: core_apimessages_TargetingContext
  placements: [core_apimessages_AdPlacementRequest]
  includeDrafts: Boolean
  _source: String
}

type core_apimessages_AdType @join__type(graph: RQL) {
  format: core_apimessages_AdFormat
  _source: String
}

type core_apimessages_AdUserContext @join__type(graph: RQL) {
  mparticleProfileResponse: core_apimessages_MparticleProfileResponse
  _source: String
}

type core_apimessages_AdZonesSearchRequest @join__type(graph: RQL) {
  offset: Int
  limit: Int
  _source: String
}

type core_apimessages_AdZonesSearchResponse @join__type(graph: RQL) {
  resultUuids: [String]
  adZones: [AdZone]
  _source: String
}

type core_apimessages_AdaChatTokenResponse @join__type(graph: RQL) {
  token: String
  _source: String
}

type core_apimessages_AddressDeleteRequest @join__type(graph: RQL) {
  """deprecated, use uuid"""
  id: String
  uuid: String
  addressType: core_apimessages_MyAddressType
  _source: String
}

"""For POST/PUT API requests"""
type core_apimessages_AddressEntry @join__type(graph: RQL) {
  name: String
  streetAddress: String
  extendedAddress: String
  postalCode: String
  phone: String
  region: String
  locality: String
  countryCode: String
  email: String
  _source: String
}

type core_apimessages_AddressVerifyRequest @join__type(graph: RQL) {
  """address uuid"""
  id: String
  _source: String
}

type core_apimessages_AddressVerifyResponse @join__type(graph: RQL) {
  """The verified address, null if no suggestion is found."""
  suggestion: core_apimessages_Address
  address: core_apimessages_Address
  _source: String
}

type core_apimessages_AdminBlockProductReviewRequest @join__type(graph: RQL) {
  productReviewId: String
  _source: String
}

type core_apimessages_AdminBlockProductReviewResponse @join__type(graph: RQL) {
  """Blocked Product Review ID"""
  id: String
  _source: String
}

type core_apimessages_AdminCuratedSetsCurateRequest @join__type(graph: RQL) {
  curatedSetSlug: String
  listingId: String
  featuredInSet: Boolean
  _source: String
}

type core_apimessages_AdminCuratedSetsCurateResponse @join__type(graph: RQL) {
  curatedSetSlug: String
  listingId: String
  featuredInSet: Boolean
  _source: String
}

type core_apimessages_AdminNote @join__type(graph: RQL) {
  id: String
  body: String
  linkHtml: String
  createdByName: String
  createdAt: Timestamp
  isPinned: Boolean
  userCanEdit: Boolean
  updatedAt: Timestamp
  lastEditedByName: String
  versions: [core_apimessages_AdminNoteVersion]
  _source: String
}

type core_apimessages_AdminNoteCreateRequest @join__type(graph: RQL) {
  notableType: String
  notableId: String
  body: String
  pinned: Boolean
  _source: String
}

type core_apimessages_AdminNoteUpdateRequest @join__type(graph: RQL) {
  id: String
  body: String
  pinned: Boolean
  _source: String
}

type core_apimessages_AdminNoteVersion @join__type(graph: RQL) {
  id: String
  editedAt: Timestamp
  editedByName: String
  body: String
  _source: String
}

type core_apimessages_AdminNotesSearchRequest @join__type(graph: RQL) {
  bodyText: String
  notableId: String
  notableType: String
  offset: String
  limit: String
  sortOrder: String
  linkableId: String
  linkableType: String
  ignorePinned: Boolean
  _source: String
}

type core_apimessages_AdminNotesSearchResponse @join__type(graph: RQL) {
  totalResults: String
  offset: String
  limit: String
  adminNotes: [core_apimessages_AdminNote]
  _source: String
}

type core_apimessages_AdminTax1099kReportingThresholdCreateRequest @join__type(graph: RQL) {
  year: String
  region: String
  salesAmountCents: String
  transactionCount: String
  _source: String
}

type core_apimessages_AdminTax1099kReportingThresholdCreateResponse @join__type(graph: RQL) {
  id: String
  year: String
  region: String
  salesAmountCents: String
  transactionCount: String
  _source: String
}

type core_apimessages_AdminTax1099kReportingThresholdDeleteRequest @join__type(graph: RQL) {
  id: String
  _source: String
}

type core_apimessages_AdminTax1099kReportingThresholdDeleteResponse @join__type(graph: RQL) {
  id: String
  _source: String
}

type core_apimessages_AdminTax1099kReportingThresholdSearchRequest @join__type(graph: RQL) {
  year: String
  region: String
  offset: String
  limit: String
  _source: String
}

type core_apimessages_AdminTax1099kReportingThresholdSearchResponse @join__type(graph: RQL) {
  totalResults: String
  offset: String
  limit: String
  taxReportingThresholds: [core_apimessages_Tax1099kReportingThresholdSearchResult]
  _source: String
}

type core_apimessages_AdminTax1099kReportingThresholdUpdateRequest @join__type(graph: RQL) {
  id: String
  year: String
  region: String
  salesAmountCents: String
  transactionCount: String
  _source: String
}

type core_apimessages_AdminTax1099kReportingThresholdUpdateResponse @join__type(graph: RQL) {
  id: String
  year: String
  region: String
  salesAmountCents: String
  transactionCount: String
  _source: String
}

type core_apimessages_AdminUserDatadogErrorsSearchRequest @join__type(graph: RQL) {
  userId: String
  _source: String
}

type core_apimessages_AdminUserDatadogErrorsSearchResponse @join__type(graph: RQL) {
  datadogErrors: [core_apimessages_DatadogError]
  _source: String
}

type core_apimessages_AdminUserSearchRequest @join__type(graph: RQL) {
  search: String
  activated: core_apimessages_AdminUserSearchRequest_ActivatedFilter
  userFilter: String
  page: String
  perPage: String
  _source: String
}

type core_apimessages_AdminUserSearchResponse @join__type(graph: RQL) {
  totalResults: String
  page: String
  perPage: String
  users: [core_apimessages_UserSearchResult]
  _source: String
}

type core_apimessages_AdsSearchRequest @join__type(graph: RQL) {
  offset: Int
  limit: Int
  adGroupUuids: [String]
  _source: String
}

type core_apimessages_AdsSearchResponse @join__type(graph: RQL) {
  resultUuids: [String]
  offset: Int
  limit: Int
  total: Int
  ads: [Ad]
  _source: String
}

type core_apimessages_Advertiser @join__type(graph: RQL) {
  uuid: String
  name: String
  brandSlugs: [String]
  shopSlugs: [String]
  _source: String
}

type core_apimessages_AdvertisersSearchRequest @join__type(graph: RQL) {
  offset: Int
  limit: Int
  _source: String
}

type core_apimessages_AdvertisersSearchResponse @join__type(graph: RQL) {
  resultUuids: [String]
  offset: Int
  limit: Int
  total: Int
  advertisers: [Advertiser]
  _source: String
}

type core_apimessages_AdyenBalanceOnboardingResponse @join__type(graph: RQL) {
  accountHolderId: String
  legalEntityId: String
  balanceAccountId: String
  transferInstrumentId: String
  _source: String
}

type core_apimessages_AdyenBalancePlatformNotification @join__type(graph: RQL) {
  id: String
  createdAt: Timestamp
  rawBody: String
  _source: String
}

type core_apimessages_AdyenChallengeShopperResults @join__type(graph: RQL) {
  threeds2ChallengeResult: String
  paymentData: String
  _source: String
}

type core_apimessages_AdyenCheckoutPaymentMethods @join__type(graph: RQL) {
  """JSON-encoded Adyen response to parse client-side"""
  adyenCheckoutPaymentMethodsConfig: String
  _source: String
}

type core_apimessages_AdyenCreditCardEntry @join__type(graph: RQL) {
  """
    JSON-encoded string for creating a new credit card, generated by secured fields (Adyen's new SDK).
  Each key is the name of an individual credit card field (ex: "encryptedExpiryYear"),
  and each value is an encrypted string. Core parses the JSON string, then passes the fully parsed
  object to Adyen without modifying any individual keys or values. Adyen decrypts each field when it reaches their server.
  """
  tokenizedFields: String
  """
    When creating a new credit card with adyen_tokenized_fields, for some
  reason Adyen does not have an "encryptedCardholderName" field so this
  needs to be passed separately as an unencrypted field.
  """
  cardholderName: String
  _source: String
}

type core_apimessages_AdyenIdentifyShopperResults @join__type(graph: RQL) {
  threeds2FingerprintResult: String
  paymentData: String
  _source: String
}

type core_apimessages_AdyenOnboardingLinkRequest @join__type(graph: RQL) {
  redirectUrl: String
  _source: String
}

type core_apimessages_AdyenOnboardingLinkResponse @join__type(graph: RQL) {
  url: String
  _source: String
}

type core_apimessages_AdyenPaymentResult @join__type(graph: RQL) {
  paymentStatus: core_apimessages_AdyenPaymentResult_PaymentStatus
  paymentData: String
  fingerprintToken: String
  challengeToken: String
  action: String
  threeDsOneRedirectUrl: String
  threeDsOneData: core_apimessages_ThreeDSOneData
  _source: String
}

type core_apimessages_AdyenThreeDSBillingMethodEntry @join__type(graph: RQL) {
  billingCardEntry: core_apimessages_BillingCreditCardEntry
  paymentData: String
  _source: String
}

type core_apimessages_AdyenVerifyShopperResults @join__type(graph: RQL) {
  threeds2Result: String
  _source: String
}

type core_apimessages_AffirmFinancingPromotionsRequest @join__type(graph: RQL) {
  """products.id"""
  ids: [String]
  _source: String
}

type core_apimessages_AffirmFinancingPromotionsResponse @join__type(graph: RQL) {
  affirmFinancingPromotions: [core_apimessages_AffirmFinancingPromotion]
  _source: String
}

type core_apimessages_Alert @join__type(graph: RQL) {
  title: String
  description: String
  url: String
  _source: String
}

type core_apimessages_ApplyCheckoutDiscountCodeRequest @join__type(graph: RQL) {
  """checkout UUID"""
  id: String
  discountCode: String
  _source: String
}

type core_apimessages_ApplyCheckoutDiscountCodeResponse @join__type(graph: RQL) {
  """checkout UUID"""
  id: String
  checkout: Checkout
  _source: String
}

type core_apimessages_Article @join__type(graph: RQL) {
  """articles.id"""
  id: String
  title: String
  webLink: core_apimessages_Link
  articleCategories: [core_apimessages_ArticleCategory]
  slug: String
  _source: String
}

type core_apimessages_ArticleCategories @join__type(graph: RQL) {
  categories: [core_apimessages_ArticleCategory]
  _source: String
}

type core_apimessages_ArticleCategoriesResponse @join__type(graph: RQL) {
  articleCategories: core_apimessages_ArticleCategories
  _source: String
}

type core_apimessages_ArticleCategory @join__type(graph: RQL) {
  """categories.id"""
  id: String
  name: String
  slug: String
  _source: String
}

type core_apimessages_ArticlesRequest @join__type(graph: RQL) {
  """articles.id"""
  ids: [String]
  slugs: [String]
  _source: String
}

type core_apimessages_ArticlesResponse @join__type(graph: RQL) {
  articles: [core_apimessages_Article]
  _source: String
}

type core_apimessages_AutoOffersRequest @join__type(graph: RQL) {
  listingIds: [String]
  _source: String
}

type core_apimessages_AutoOffersResponse @join__type(graph: RQL) {
  autoOffers: [core_apimessages_AutoOffer]
  _source: String
}

type core_apimessages_AutomatchingCanonicalProduct @join__type(graph: RQL) {
  id: String
  model: String
  year: String
  finish: String
  upc: String
  brand: core_apimessages_Brand
  primaryImage: core_apimessages_Image
  _source: String
}

type core_apimessages_AvailableForPickupSignal @join__type(graph: RQL) {
  translations: core_apimessages_SignalTranslation
  isValid: Boolean
  _source: String
}

type core_apimessages_AvailableNearbyForPickupSignal @join__type(graph: RQL) {
  translations: core_apimessages_SignalTranslation
  isValid: Boolean
  _source: String
}

type core_apimessages_BearerV2TokenRequest @join__type(graph: RQL) {
  client: core_apimessages_BearerV2TokenRequest_Client
  _source: String
}

type core_apimessages_BearerV2TokenResponse @join__type(graph: RQL) {
  token: String
  _source: String
}

type core_apimessages_BillingCreditCardEntry @join__type(graph: RQL) {
  """credit_cards.id for selecting an already created credit card"""
  creditCardId: String
  """
    string token for creating a new credit card, generated by Adyen's Client-Side Encryption.
  Adyen decrypts ths into an object containing key/value pairs of raw credit card fields.
  """
  adyenToken: String
  adyenCreditCard: core_apimessages_AdyenCreditCardEntry
  address: core_apimessages_AddressEntry
  _source: String
}

type core_apimessages_BillingMethodChallengeShopperRequest @join__type(graph: RQL) {
  results: core_apimessages_AdyenChallengeShopperResults
  billingMethodUuid: String
  _source: String
}

type core_apimessages_BillingMethodChallengeShopperResponse @join__type(graph: RQL) {
  errors: [core_apimessages_Error]
  creditCard: core_apimessages_CreditCard
  adyenPaymentResult: core_apimessages_AdyenPaymentResult
  billingMethodUuid: String
  me: rql_Me
  _source: String
}

type core_apimessages_BillingMethodIdentifyShopperRequest @join__type(graph: RQL) {
  results: core_apimessages_AdyenIdentifyShopperResults
  billingMethodUuid: String
  _source: String
}

type core_apimessages_BillingMethodIdentifyShopperResponse @join__type(graph: RQL) {
  errors: [core_apimessages_Error]
  creditCard: core_apimessages_CreditCard
  adyenPaymentResult: core_apimessages_AdyenPaymentResult
  billingMethodUuid: String
  me: rql_Me
  _source: String
}

type core_apimessages_BillingMethodVerifyShopperRequest @join__type(graph: RQL) {
  results: core_apimessages_AdyenVerifyShopperResults
  billingMethodUuid: String
  """
  optional, to indicate that a new card is being added specifically for a partial payment
  """
  partialPayment: Boolean
  _source: String
}

type core_apimessages_BillingMethodVerifyShopperResponse @join__type(graph: RQL) {
  errors: [core_apimessages_Error]
  creditCard: core_apimessages_CreditCard
  adyenPaymentResult: core_apimessages_AdyenPaymentResult
  billingMethodUuid: String
  me: rql_Me
  _source: String
}

type core_apimessages_Brand @join__type(graph: RQL, key: "_id") {
  _id: ID
  """brands.uuid"""
  id: String
  name: String
  webLink: core_apimessages_Link
  slug: String
  uuid: String
  _source: String
}

type core_apimessages_BrandManagerBrandRequest @join__type(graph: RQL) {
  slug: String
  _source: String
}

type core_apimessages_BrandManagerBrandResponse @join__type(graph: RQL) {
  brand: core_apimessages_Brand
  _source: String
}

type core_apimessages_BrandManagerBrandsRequest @join__type(graph: RQL) {
  slugs: [String]
  offset: Int
  limit: Int
  uuids: [String]
  _source: String
}

type core_apimessages_BrandManagerBrandsResponse @join__type(graph: RQL) {
  brandManagerBrands: [core_apimessages_Brand]
  offset: Int
  limit: Int
  _source: String
}

type core_apimessages_BrandsRequest @join__type(graph: RQL) {
  uuids: [String]
  slugs: [String]
  _source: String
}

type core_apimessages_BrandsResponse @join__type(graph: RQL) {
  brands: [core_apimessages_Brand]
  _source: String
}

type core_apimessages_BrowsePage @join__type(graph: RQL) {
  id: String
  title: String
  url: String
  breadcrumbs: [core_apimessages_BrowsePageBreadcrumb]
  combinedFilters: String
  ownFilters: String
  _source: String
}

type core_apimessages_BrowsePageBreadcrumb @join__type(graph: RQL) {
  title: String
  url: String
  _source: String
}

type core_apimessages_BrowsePageLink @join__type(graph: RQL) {
  url: String
  matchType: core_apimessages_BrowsePageLink_MatchType
  matchParams: [core_apimessages_BrowsePageLink_MatchParams]
  combinedFilters: String
  _source: String
}

type core_apimessages_BrowsePageLink_MatchParams @join__type(graph: RQL) {
  paramName: String
  value: String
  _source: String
}

type core_apimessages_BrowsePageLinksRequest @join__type(graph: RQL) {
  id: String
  _source: String
}

type core_apimessages_BrowsePageLinksResponse @join__type(graph: RQL) {
  browsePageLinks: [core_apimessages_BrowsePageLink]
  _source: String
}

type core_apimessages_BulkAddressesRequest @join__type(graph: RQL) {
  queries: [core_apimessages_BulkAddressesRequest_Query]
  _source: String
}

type core_apimessages_BulkAddressesRequest_Query @join__type(graph: RQL) {
  relation: core_apimessages_BulkAddressesRequest_Relation
  primaryKey: core_apimessages_PrimaryKey
  _source: String
}

type core_apimessages_BulkAddressesResponse @join__type(graph: RQL) {
  results: [core_apimessages_BulkAddressesResponse_QueryResult]
  _source: String
}

type core_apimessages_BulkAddressesResponse_QueryResult @join__type(graph: RQL) {
  addresses: [core_apimessages_Address]
  _source: String
}

type core_apimessages_BulkCategoriesRequest @join__type(graph: RQL) {
  requests: [core_apimessages_CategoryRequest]
  _source: String
}

type core_apimessages_BulkCategoriesResponse @join__type(graph: RQL) {
  responses: [core_apimessages_CategoriesResponse]
  _source: String
}

type core_apimessages_BulkCreateAutoOffersAsyncRequest @join__type(graph: RQL) {
  percentage: Int
  """Serialized JSON of dashboard listing search params"""
  serializedDashboardSearchParams: String
  expectedTotal: Int
  _source: String
}

type core_apimessages_BulkCreateAutoOffersRequest @join__type(graph: RQL) {
  listingIds: [String]
  percentage: Int
  _source: String
}

type core_apimessages_BulkCreateBumpedAsyncRequest @join__type(graph: RQL) {
  rate: Float
  """Serialized JSON of dashboard listing search params"""
  serializedDashboardSearchParams: String
  expectedTotal: Int
  _source: String
}

type core_apimessages_BulkCreateBumpedRequest @join__type(graph: RQL) {
  listingIds: [String]
  rate: Float
  _source: String
}

type core_apimessages_BulkCreateZeroPercentAffirmAsyncRequest @join__type(graph: RQL) {
  """Serialized JSON of dashboard listing search params"""
  serializedDashboardSearchParams: String
  expectedTotal: Int
  _source: String
}

type core_apimessages_BulkCreateZeroPercentAffirmRequest @join__type(graph: RQL) {
  listingIds: [String]
  _source: String
}

type core_apimessages_BulkCuratedSetsRequest @join__type(graph: RQL) {
  queries: [core_apimessages_BulkCuratedSetsRequest_Query]
  _source: String
}

type core_apimessages_BulkCuratedSetsRequest_Query @join__type(graph: RQL) {
  relation: core_apimessages_BulkCuratedSetsRequest_Relation
  primaryKey: core_apimessages_PrimaryKey
  setTypes: [core_apimessages_CuratedSet_SetType]
  _source: String
}

type core_apimessages_BulkCuratedSetsResponse @join__type(graph: RQL) {
  results: [core_apimessages_BulkCuratedSetsResponse_QueryResult]
  _source: String
}

type core_apimessages_BulkCuratedSetsResponse_QueryResult @join__type(graph: RQL) {
  curatedSets: [core_apimessages_CuratedSet]
  _source: String
}

type core_apimessages_BulkDeleteAutoOffersAsyncRequest @join__type(graph: RQL) {
  """Serialized JSON of dashboard listing search params"""
  serializedDashboardSearchParams: String
  expectedTotal: Int
  _source: String
}

type core_apimessages_BulkDeleteAutoOffersRequest @join__type(graph: RQL) {
  listingIds: [String]
  _source: String
}

type core_apimessages_BulkDeleteBumpedAsyncRequest @join__type(graph: RQL) {
  """Serialized JSON of dashboard listing search params"""
  serializedDashboardSearchParams: String
  expectedTotal: Int
  _source: String
}

type core_apimessages_BulkDeleteBumpedRequest @join__type(graph: RQL) {
  listingIds: [String]
  _source: String
}

type core_apimessages_BulkDeleteListingsAsyncRequest @join__type(graph: RQL) {
  """Serialized JSON of dashboard listing search params"""
  serializedDashboardSearchParams: String
  expectedTotal: Int
  _source: String
}

type core_apimessages_BulkDeleteListingsRequest @join__type(graph: RQL) {
  listingIds: [String]
  _source: String
}

type core_apimessages_BulkDeleteListingsResponse @join__type(graph: RQL) {
  listings: [core_apimessages_BulkDeleteListingsResponse_ListingDeleted]
  _source: String
}

type core_apimessages_BulkDeleteListingsResponse_ListingDeleted @join__type(graph: RQL) {
  listingId: String
  success: Boolean
  deleteErrors: [core_apimessages_Error]
  _source: String
}

type core_apimessages_BulkDeleteZeroPercentAffirmAsyncRequest @join__type(graph: RQL) {
  """Serialized JSON of dashboard listing search params"""
  serializedDashboardSearchParams: String
  expectedTotal: Int
  _source: String
}

type core_apimessages_BulkDeleteZeroPercentAffirmRequest @join__type(graph: RQL) {
  listingIds: [String]
  _source: String
}

type core_apimessages_BulkExportListingsRequest @join__type(graph: RQL) {
  listingIds: [String]
  state: core_apimessages_BulkExportListingsRequest_ListingState
  serializedDashboardSearchParams: String
  recipientId: String
  _source: String
}

type core_apimessages_BulkExportListingsResponse @join__type(graph: RQL) {
  enqueued: Boolean
  message: String
  _source: String
}

type core_apimessages_BulkImageRequest @join__type(graph: RQL) {
  requests: [core_apimessages_ImageRequest]
  _source: String
}

type core_apimessages_BulkOrdersRequest @join__type(graph: RQL) {
  queries: [core_apimessages_BulkOrdersRequest_Query]
  _source: String
}

type core_apimessages_BulkOrdersRequest_Query @join__type(graph: RQL) {
  relation: core_apimessages_BulkOrdersRequest_Relation
  primaryKey: core_apimessages_PrimaryKey
  as: core_apimessages_BulkOrdersRequest_Party
  _source: String
}

type core_apimessages_BulkOrdersResponse @join__type(graph: RQL) {
  results: [core_apimessages_BulkOrdersResponse_QueryResult]
  _source: String
}

type core_apimessages_BulkOrdersResponse_QueryResult @join__type(graph: RQL) {
  orders: [core_apimessages_Order]
  _source: String
}

type core_apimessages_BulkPublishListingsAsyncRequest @join__type(graph: RQL) {
  """Serialized JSON of dashboard listing search params"""
  serializedDashboardSearchParams: String
  expectedTotal: Int
  _source: String
}

type core_apimessages_BulkPublishListingsRequest @join__type(graph: RQL) {
  listingIds: [String]
  _source: String
}

type core_apimessages_BulkPublishListingsResponse @join__type(graph: RQL) {
  listings: [core_apimessages_BulkPublishListingsResponse_ListingPublished]
  prepublishStepRequired: core_apimessages_BulkPublishListingsResponse_PrepublishStepRequired
  _source: String
}

type core_apimessages_BulkPublishListingsResponse_ListingPublished @join__type(graph: RQL) {
  listingId: String
  success: Boolean
  publishErrors: [core_apimessages_Error]
  _source: String
}

type core_apimessages_BulkPublishListingsResponse_PrepublishStepRequired @join__type(graph: RQL) {
  step: String
  _source: String
}

type core_apimessages_BulkSaleMembershipsRequest @join__type(graph: RQL) {
  listingIds: [String]
  saleId: String
  _source: String
}

type core_apimessages_BulkTaxPoliciesRequest @join__type(graph: RQL) {
  requests: [core_apimessages_TaxPoliciesRequest]
  _source: String
}

type core_apimessages_BulkTaxPoliciesResponse @join__type(graph: RQL) {
  shops: [core_apimessages_ShopTaxPolicies]
  _source: String
}

"""this is the shape of the bumpKey before it gets encoded"""
type core_apimessages_BumpKeyContents @join__type(graph: RQL) {
  """JWT UUID"""
  jti: String
  """JWT Issued At Token, integer timestamp"""
  iat: Int
  userId: String
  sessionId: String
  cookieId: String
  productId: String
  source: core_apimessages_BumpKeyContents_OffsiteSource
  _source: String
}

type core_apimessages_BumpKeysRequest @join__type(graph: RQL) {
  listingIds: [String]
  _source: String
}

type core_apimessages_BumpKeysResponse @join__type(graph: RQL) {
  bumpKeys: [core_apimessages_BumpKey]
  _source: String
}

type core_apimessages_BusinessRegistrationNumber @join__type(graph: RQL) {
  registrationNumber: String
  countryCode: String
  id: String
  _source: String
}

type core_apimessages_BuyWithConfidenceSignal @join__type(graph: RQL) {
  isValid: Boolean
  translations: core_apimessages_SignalTranslation
  link: core_apimessages_SignalLink
  _source: String
}

type core_apimessages_BuyerActions @join__type(graph: RQL) {
  canBeResold: Boolean
  canMarkReceived: Boolean
  _source: String
}

type core_apimessages_BuyerOrder @join__type(graph: RQL) {
  uuid: String
  amountOwed: core_apimessages_Money
  amountCreditBucks: core_apimessages_Money
  amountBonusBucks: core_apimessages_Money
  buyerActions: core_apimessages_BuyerActions
  amountProduct: core_apimessages_Money
  amountProductSubtotal: core_apimessages_Money
  amountTotal: core_apimessages_Money
  amountTax: core_apimessages_Money
  amountShipping: core_apimessages_Money
  protectionPlanDetails: core_apimessages_OrderProtectionPlanDetails
  thirdPartyAdsAttributes: core_apimessages_ThirdPartyAdsAttributes
  _source: String
}

type core_apimessages_BuyerOrdersResponse @join__type(graph: RQL) {
  orders: [core_apimessages_BuyerOrder]
  _source: String
}

type core_apimessages_BuyerRefund @join__type(graph: RQL) {
  id: String
  nonBucksRefundAmount: core_apimessages_ConvertedMoney
  reverbBucksAmountRefunded: core_apimessages_Money
  _source: String
}

type core_apimessages_BuyerRefundsRequest @join__type(graph: RQL) {
  ids: [String]
  _source: String
}

type core_apimessages_BuyerRefundsResponse @join__type(graph: RQL) {
  buyerRefunds: [core_apimessages_BuyerRefund]
  _source: String
}

type core_apimessages_CPSuggestion @join__type(graph: RQL) {
  canonicalProductId: String
  service: String
  confidence: Float
  canonicalProduct: core_apimessages_AutomatchingCanonicalProduct
  _source: String
}

type core_apimessages_CPSuggestions @join__type(graph: RQL) {
  suggestions: [core_apimessages_CPSuggestion]
  _source: String
}

type core_apimessages_CPSuggestionsRequest @join__type(graph: RQL) {
  listingIds: [String]
  _source: String
}

type core_apimessages_CPSuggestionsResponse @join__type(graph: RQL) {
  cpSuggestions: [core_apimessages_CPSuggestions]
  _source: String
}

type core_apimessages_CSP @join__type(graph: RQL) {
  """comparison_shopping_pages.id"""
  id: String
  title: String
  summary: String
  webLink: core_apimessages_Link
  newListingsLink: core_apimessages_Link @deprecated
  usedListingsLink: core_apimessages_Link @deprecated
  uuid: String
  brandUuid: String
  categoryUuids: [String]
  slug: String
  metaDescription: String
  body: String
  model: String
  canonicalProductIds: [String]
  upcs: [String]
  finishes: [String]
  generic: Boolean
  categoryRootUuid: String
  canonicalProductImageApprovedIds: [String]
  _source: String
}

type core_apimessages_CSPExpressSaleItemBid @join__type(graph: RQL) {
  cspUuid: String
  estimatedPayout: core_apimessages_Money
  carrier: String
  bidId: String
  shopName: String
  _source: String
}

type core_apimessages_CSPPricing @join__type(graph: RQL) {
  low: core_apimessages_Money
  mid: core_apimessages_Money
  high: core_apimessages_Money
  hasData: Boolean
  _source: String
}

type core_apimessages_CSPReview @join__type(graph: RQL) {
  id: String
  body: String
  createdAt: String
  title: String
  rating: Int
  voteCount: Int
  reviewer: core_apimessages_Reviewer
  verified: Boolean
  blocked: Boolean
  isMyReview: Boolean
  didIVote: Boolean
  _source: String
}

type core_apimessages_CSPReviews @join__type(graph: RQL) {
  reviews: [core_apimessages_CSPReview]
  offset: Int
  limit: Int
  total: Int
  avgRating: Float
  myReview: core_apimessages_CSPReview
  _source: String
}

type core_apimessages_CSPReviewsRequest @join__type(graph: RQL) {
  ids: [String]
  slugs: [String]
  uuids: [String]
  offset: Int
  limit: Int
  _source: String
}

type core_apimessages_CSPReviewsResponse @join__type(graph: RQL) {
  reviews: [core_apimessages_CSPReviews]
  _source: String
}

type core_apimessages_CSPsFeaturedListingRequest @join__type(graph: RQL) {
  """comparison_shopping_pages.id"""
  ids: [String]
  uuids: [String]
  slugs: [String]
  _source: String
}

type core_apimessages_CSPsFeaturedListingResponse @join__type(graph: RQL) {
  featuredListingIds: [String]
  _source: String
}

type core_apimessages_CSPsInventoryRequest @join__type(graph: RQL) {
  """comparison_shopping_pages.id"""
  ids: [String]
  uuids: [String]
  slugs: [String]
  _source: String
}

type core_apimessages_CSPsInventoryResponse @join__type(graph: RQL) {
  inventories: [core_apimessages_CSPInventory]
  _source: String
}

type core_apimessages_CSPsRequest @join__type(graph: RQL) {
  ids: [String]
  slugs: [String]
  uuids: [String]
  _source: String
}

type core_apimessages_CSPsResponse @join__type(graph: RQL) {
  csps: [core_apimessages_CSP]
  _source: String
}

type core_apimessages_CSPsSpecsRequest @join__type(graph: RQL) {
  """comparison_shopping_pages.id"""
  ids: [String]
  slugs: [String]
  uuids: [String]
  _source: String
}

type core_apimessages_CSPsSpecsResponse @join__type(graph: RQL) {
  specs: [core_apimessages_CSPSpec]
  _source: String
}

type core_apimessages_CSPsVideoRequest @join__type(graph: RQL) {
  """comparison_shopping_pages.id"""
  ids: [String]
  slugs: [String]
  uuids: [String]
  _source: String
}

type core_apimessages_CSPsVideoResponse @join__type(graph: RQL) {
  videos: [core_apimessages_CSPVideo]
  _source: String
}

type core_apimessages_CancelOrderRequest @join__type(graph: RQL) {
  uuid: String
  id: String
  cancellationReason: core_apimessages_CancelOrderRequest_CancellationReason
  relist: Boolean
  _source: String
}

type core_apimessages_CancelOrderResponse @join__type(graph: RQL) {
  order: core_apimessages_Order
  relisted: Boolean
  _source: String
}

type core_apimessages_CancelPlaidAccountRequest @join__type(graph: RQL) {
  _: Boolean
  _source: String
}

type core_apimessages_CancelPlaidAccountResponse @join__type(graph: RQL) {
  shopId: String
  _source: String
}

type core_apimessages_CarrierRate @join__type(graph: RQL) {
  displayPosition: Int
  uuid: String
  carrier: String
  service: String
  description: String
  paymentMethod: core_apimessages_FeePaymentMethod
  rackRateAmount: core_apimessages_Money
  shippingProtectionAmount: core_apimessages_Money
  reverbDiscountAmount: core_apimessages_Money
  totalAmount: core_apimessages_Money
  signatureRequiredAmount: core_apimessages_Money
  expeditedOrFaster: Boolean
  _source: String
}

type core_apimessages_CarrierRateGroup @join__type(graph: RQL) {
  displayPosition: Int
  carrier: String
  rates: [core_apimessages_CarrierRate]
  _source: String
}

type core_apimessages_CartItemAttributes @join__type(graph: RQL) {
  actionSourceAttributes: core_apimessages_ActionSourceAttributes
  cartSource: String
  listingId: Int
  quantity: Int
  upsell: Boolean
  uuid: String
  saleId: Int
  _source: String
}

type core_apimessages_CartItemBundle @join__type(graph: RQL) {
  checkoutBundlingId: String
  cartItems: [core_apimessages_CartItem]
  availablePaymentMethods: [core_apimessages_CartItemBundle_PaymentMethod]
  lineItems: [core_apimessages_CartItemBundle_LineItem]
  freeShippingStatuses: [core_apimessages_CartItemBundle_FreeShippingStatus]
  combineAndSaveEligibleListingId: String
  paymentMethodIcons: [core_apimessages_PaymentCardIcon]
  total: core_apimessages_CartItemBundle_Total
  title: String
  combineAndSaveEligibleListing: Listing
  _source: String
}

type core_apimessages_CartItemBundle_FreeShippingStatus @join__type(graph: RQL) {
  shopId: String
  """Natural number up to 100"""
  percentProgress: Int
  isThresholdMet: Boolean
  amountRemaining: core_apimessages_Money
  shop: Shop
  _source: String
}

type core_apimessages_CartItemBundle_LineItem @join__type(graph: RQL) {
  type: core_apimessages_CartItemBundle_LineItem_Type
  label: String
  amount: core_apimessages_Money
  _source: String
}

type core_apimessages_CartItemBundle_PaymentMethod @join__type(graph: RQL) {
  type: core_apimessages_CheckoutPaymentMethod_Type
  name: String
  applePay: core_apimessages_CheckoutApplePayDetails
  googlePay: core_apimessages_CheckoutGooglePayDetails
  affirm: core_apimessages_CheckoutAffirmDetails
  paypal: core_apimessages_CheckoutPaypalDetails
  _source: String
}

type core_apimessages_CartItemBundle_Total @join__type(graph: RQL) {
  amount: core_apimessages_Money
  label: String
  _source: String
}

type core_apimessages_CartMoveToWatchListRequest @join__type(graph: RQL) {
  cartItemUuid: String
  _source: String
}

type core_apimessages_CartMoveToWatchListResponse @join__type(graph: RQL) {
  """Listing ID for the watched product"""
  listingId: String
  _source: String
}

type core_apimessages_CategoriesRequest @join__type(graph: RQL) {
  """Deprecated- maps to categories.uuid"""
  ids: [String]
  withChildren: Boolean
  withParent: Boolean
  uuids: [String]
  slugs: [String]
  _source: String
}

type core_apimessages_CategoriesResponse @join__type(graph: RQL) {
  categories: [core_apimessages_Category]
  _source: String
}

type core_apimessages_Category @join__type(graph: RQL, key: "_id") {
  _id: ID
  """categories.uuid"""
  id: String
  name: String
  webLink: core_apimessages_Link
  children: [core_apimessages_Category]
  cmsLink: core_apimessages_Link
  parent: core_apimessages_Category
  slug: String
  rootSlug: String
  cmsUrl: core_apimessages_Link
  root: Boolean
  leaf: Boolean
  _source: String
}

type core_apimessages_CategoryRequest @join__type(graph: RQL) {
  """This should only be for Article id, Category should use uuid"""
  id: String
  withChildren: Boolean
  withParent: Boolean
  uuid: String
  slug: String
  type: core_apimessages_CategoryRequest_CategoryType
  _source: String
}

"""Partially copied into abandoned_cart.proto for abandoned cart emails."""
type core_apimessages_ChannelBranding @join__type(graph: RQL) {
  name: String
  logoImageUrl: String
  completeUrl: String
  channel: core_apimessages_Channel
  """for seller sites to identify which shop this came from"""
  shopIdentifier: String
  abandonUrl: String
  _source: String
}

type core_apimessages_Checkout @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
  """
  Semi-opaque identifier to bundle a checkout, for example RCP-USD-direct_checkout.
  """
  checkoutBundlingId: String
  paymentMethod: core_apimessages_CheckoutPaymentMethod
  shippingAddress: core_apimessages_Address
  billingAddress: core_apimessages_Address
  orders: [core_apimessages_CheckoutOrder]
  lineItems: [core_apimessages_CheckoutLineItem]
  status: core_apimessages_Checkout_Status
  paymentErrorMessage: String
  type: core_apimessages_Checkout_Type
  creditCard: core_apimessages_CreditCard
  guest: core_apimessages_CheckoutGuest
  """A JSON serialized hash"""
  adyenPaymentAction: String
  availablePaymentMethods: [core_apimessages_CheckoutPaymentMethod]
  isAllPaidWithBucks: Boolean
  source: core_apimessages_Checkout_Source
  """
  Amount owed. Use this field to send the displayed amount owed value to a finalize checkout
  """
  total: core_apimessages_Checkout_Total
  _source: String
}

type core_apimessages_CheckoutAction @join__type(graph: RQL) {
  type: core_apimessages_CheckoutAction_Type
  redirectUrl: String
  _source: String
}

type core_apimessages_CheckoutActionRequest @join__type(graph: RQL) {
  checkoutId: String
  """
  Native app URL param. Corresponds to _reverb_app query param needed for internal navigation.
  """
  reverbApp: String
  _source: String
}

type core_apimessages_CheckoutActionResponse @join__type(graph: RQL) {
  action: core_apimessages_CheckoutAction
  _source: String
}

type core_apimessages_CheckoutAffirmDetails @join__type(graph: RQL) {
  financingProgramSlug: String
  _source: String
}

type core_apimessages_CheckoutApplePayDetails @join__type(graph: RQL) {
  """Merchant name to display in the payment sheet"""
  merchantName: String
  """Apple Pay Merchant ID for payment sheet configuration"""
  merchantId: String
  """Brand types provided by Adyen such as visa, mc, jcb"""
  brands: [String]
  _source: String
}

type core_apimessages_CheckoutApplePayDetailsRequest @join__type(graph: RQL) {
  currency: String
  _source: String
}

type core_apimessages_CheckoutApplePayDetailsResponse @join__type(graph: RQL) {
  details: core_apimessages_CheckoutApplePayDetails
  _source: String
}

type core_apimessages_CheckoutCartEditRequest @join__type(graph: RQL) {
  listingId: String
  """
  Adds a listing by the given quantity if 1 or greater. Removes the listing from the user's cart if zero.
  """
  quantity: Int
  _source: String
}

type core_apimessages_CheckoutCartEditResponse @join__type(graph: RQL) {
  listingId: String
  """If an item was not removed, returns the added item"""
  cartItem: core_apimessages_CartItem
  _source: String
}

type core_apimessages_CheckoutChallengeShopperRequest @join__type(graph: RQL) {
  checkoutUuid: String
  checkoutId: String
  totalPrice: core_apimessages_Money
  results: core_apimessages_AdyenChallengeShopperResults
  channelBrandingToken: String
  _source: String
}

type core_apimessages_CheckoutChallengeShopperResponse @join__type(graph: RQL) {
  checkoutUuid: String
  adyenPaymentResult: core_apimessages_AdyenPaymentResult
  orderBundleId: String
  checkoutId: String
  paymentResultUrl: String
  _source: String
}

type core_apimessages_CheckoutCreatePaymentRedirectUrlRequest @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
  reverbApp: String
  accertifyDeviceInfo: core_apimessages_AccertifyDeviceInfo
  _source: String
}

type core_apimessages_CheckoutCreatePaymentRedirectUrlResponse @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
  """Redirect url for payment method"""
  redirectUrl: String
  checkout: Checkout
  _source: String
}

type core_apimessages_CheckoutFinalizeDigitalWalletPaymentRequest @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
  paymentToken: String
  totalPrice: core_apimessages_MoneyMinorUnitsEntry
  shippingAddress: core_apimessages_AddressEntry
  guestUser: core_apimessages_GuestCheckoutUserEntry
  resultConfirmation: core_apimessages_CheckoutFinalizeDigitalWalletPaymentRequest_ResultConfirmation
  accertifyDeviceInfo: core_apimessages_AccertifyDeviceInfo
  _source: String
}

type core_apimessages_CheckoutFinalizeDigitalWalletPaymentResponse @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
  checkout: Checkout
  _source: String
}

type core_apimessages_CheckoutFinalizeRedirectPaymentCheckoutRequest @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
  redirectResult: String
  merchantReference: String
  displayedAmountOwedCents: String
  _source: String
}

type core_apimessages_CheckoutFinalizeRedirectPaymentCheckoutResponse @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
  checkout: Checkout
  _source: String
}

type core_apimessages_CheckoutGuest @join__type(graph: RQL) {
  firstName: String
  lastName: String
  email: String
  isComplete: Boolean
  _source: String
}

type core_apimessages_CheckoutIdentifyShopperRequest @join__type(graph: RQL) {
  checkoutUuid: String
  checkoutId: String
  totalPrice: core_apimessages_Money
  results: core_apimessages_AdyenIdentifyShopperResults
  channelBrandingToken: String
  _source: String
}

type core_apimessages_CheckoutIdentifyShopperResponse @join__type(graph: RQL) {
  checkoutUuid: String
  adyenPaymentResult: core_apimessages_AdyenPaymentResult
  orderBundleId: String
  checkoutId: String
  paymentResultUrl: String
  _source: String
}

type core_apimessages_CheckoutLineItem @join__type(graph: RQL) {
  type: core_apimessages_CheckoutLineItem_Type
  label: String
  amount: core_apimessages_Money
  _source: String
}

type core_apimessages_CheckoutOrder @join__type(graph: RQL) {
  """Order ID. Present if order is unpaid"""
  id: String
  """Listing ID"""
  listingId: String
  subtotal: core_apimessages_CheckoutOrder_Subtotal
  shippingTotal: core_apimessages_CheckoutOrder_ShippingTotal
  taxIncluded: Boolean
  taxLabel: String
  shippingMethod: core_apimessages_CheckoutShippingMethod
  quantity: Int
  buyerCanChangeQuantity: Boolean
  cannotBeShippedToAddress: Boolean
  availableShippingMethods: [core_apimessages_CheckoutShippingMethod]
  notes: [core_apimessages_CheckoutOrder_Note]
  protectionPlan: core_apimessages_ProtectionPlan
  listing: Listing
  _source: String
}

type core_apimessages_CheckoutOrder_Note @join__type(graph: RQL) {
  text: String
  severity: core_apimessages_CheckoutOrder_Note_Severity
  _source: String
}

type core_apimessages_CheckoutOrder_ShippingTotal @join__type(graph: RQL) {
  """Original shipping amount owed for order before any discounts."""
  originalAmountOwed: core_apimessages_Money
  """Shipping amount owed by buyer for order including discounts if any."""
  amountOwed: core_apimessages_Money
  """True if amount owed is less than original amount owed."""
  discounted: Boolean
  discount: core_apimessages_CheckoutOrder_ShippingTotalDiscount
  _source: String
}

type core_apimessages_CheckoutOrder_ShippingTotalDiscount @join__type(graph: RQL) {
  type: core_apimessages_CheckoutOrder_ShippingTotalDiscount_Type
  label: String
  _source: String
}

type core_apimessages_CheckoutOrder_Subtotal @join__type(graph: RQL) {
  """
  Unit amount owed by the buyer for an order listing. Includes tax and conditional discounts like offer price.
  """
  listingPrice: core_apimessages_Money
  """True if order listing price is less than original listing price."""
  discounted: Boolean
  discount: core_apimessages_CheckoutOrder_SubtotalDiscount
  _source: String
}

type core_apimessages_CheckoutOrder_SubtotalDiscount @join__type(graph: RQL) {
  type: core_apimessages_CheckoutOrder_SubtotalDiscount_Type
  label: String
  _source: String
}

type core_apimessages_CheckoutPaymentMethod @join__type(graph: RQL) {
  type: core_apimessages_CheckoutPaymentMethod_Type
  name: String
  isComplete: Boolean
  """True if discount codes are supported"""
  supportsDiscountCodes: Boolean
  applePay: core_apimessages_CheckoutApplePayDetails
  affirm: core_apimessages_CheckoutAffirmDetails
  googlePay: core_apimessages_CheckoutGooglePayDetails
  paypal: core_apimessages_CheckoutPaypalDetails
  _source: String
}

type core_apimessages_CheckoutPaymentResponse @join__type(graph: RQL) {
  checkoutUuid: String
  adyenPaymentResult: core_apimessages_AdyenPaymentResult
  orderBundleId: String
  checkoutId: String
  paymentResultUrl: String
  _source: String
}

type core_apimessages_CheckoutSelectOrderShippingMethodRequest @join__type(graph: RQL) {
  id: String
  order: core_apimessages_CheckoutSelectOrderShippingMethodRequest_OrderEntry
  _source: String
}

type core_apimessages_CheckoutSelectOrderShippingMethodRequest_OrderEntry @join__type(graph: RQL) {
  listingId: String
  shippingMethodType: core_apimessages_ShippingMethod
  _source: String
}

type core_apimessages_CheckoutSelectOrderShippingMethodResponse @join__type(graph: RQL) {
  id: String
  checkout: Checkout
  _source: String
}

type core_apimessages_CheckoutSelectShippingAddressRequest @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
  """addresses.uuid"""
  shippingAddressId: String
  _source: String
}

type core_apimessages_CheckoutSelectShippingAddressResponse @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
  checkout: Checkout
  _source: String
}

type core_apimessages_CheckoutShippingMethod @join__type(graph: RQL) {
  type: core_apimessages_ShippingMethod
  name: String
  description: String
  amount: core_apimessages_Money
  _source: String
}

type core_apimessages_CheckoutShowRequest @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
  _source: String
}

type core_apimessages_CheckoutShowResponse @join__type(graph: RQL) {
  checkout: core_apimessages_Checkout
  _source: String
}

type core_apimessages_CheckoutUpdateOrderQuantityRequest @join__type(graph: RQL) {
  id: String
  order: core_apimessages_CheckoutUpdateOrderQuantityRequest_OrderEntry
  _source: String
}

type core_apimessages_CheckoutUpdateOrderQuantityRequest_OrderEntry @join__type(graph: RQL) {
  listingId: String
  quantity: Int
  _source: String
}

type core_apimessages_CheckoutUpdateOrderQuantityResponse @join__type(graph: RQL) {
  id: String
  _source: String
}

type core_apimessages_CheckoutUpdateShippingAddressRequest @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
  shippingAddress: core_apimessages_AddressEntry
  """Information required only for guest checkout."""
  guest: core_apimessages_GuestCheckoutUserEntry
  _source: String
}

type core_apimessages_CheckoutUpdateShippingAddressResponse @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
  checkout: Checkout
  _source: String
}

type core_apimessages_CheckoutUpdateShippingEstimateRequest @join__type(graph: RQL) {
  id: String
  shippingAddress: core_apimessages_AddressEntry
  _source: String
}

type core_apimessages_CheckoutUpdateShippingEstimateResponse @join__type(graph: RQL) {
  id: String
  checkout: Checkout
  _source: String
}

type core_apimessages_CheckoutVerifyShopperRequest @join__type(graph: RQL) {
  checkoutUuid: String
  checkoutId: String
  totalPrice: core_apimessages_Money
  results: core_apimessages_AdyenVerifyShopperResults
  _source: String
}

type core_apimessages_CheckoutVerifyShopperResponse @join__type(graph: RQL) {
  checkoutUuid: String
  adyenPaymentResult: core_apimessages_AdyenPaymentResult
  orderBundleId: String
  checkoutId: String
  paymentResultUrl: String
  _source: String
}

type core_apimessages_Checkout_Total @join__type(graph: RQL) {
  amount: core_apimessages_Money
  label: String
  _source: String
}

type core_apimessages_CollectionHeader @join__type(graph: RQL) {
  id: String
  title: String
  description: String
  metaTitle: String
  metaDescription: String
  collectionType: core_apimessages_CollectionHeader_CollectionType
  collectionId: String
  _source: String
}

type core_apimessages_CollectionHeaderRequest @join__type(graph: RQL) {
  collectionType: core_apimessages_CollectionHeader_CollectionType
  """for category, `productType:category` compound key"""
  collectionSlug: String
  _source: String
}

type core_apimessages_CollectionHeaderResponse @join__type(graph: RQL) {
  collectionHeader: core_apimessages_CollectionHeader
  _source: String
}

type core_apimessages_CompleteExpressSaleCheckoutRequest @join__type(graph: RQL) {
  checkoutId: String
  _source: String
}

type core_apimessages_CompleteExpressSaleCheckoutResponse @join__type(graph: RQL) {
  orderId: String
  _source: String
}

type core_apimessages_ContentSponsorship @join__type(graph: RQL) {
  sponsorshipType: core_apimessages_ContentSponsorship_SponsorshipType
  partnershipName: String
  _source: String
}

type core_apimessages_ConversationFlagMessageRequest @join__type(graph: RQL) {
  messageId: String
  reasonType: core_apimessages_ConversationMessageFlag_Reason_Type
  _source: String
}

type core_apimessages_ConversationFlagMessageResponse @join__type(graph: RQL) {
  """Created Message Flag ID"""
  id: String
  _source: String
}

type core_apimessages_ConversationMessage @join__type(graph: RQL) {
  id: String
  conversationId: String
  _source: String
}

type core_apimessages_ConversationMessageFlag @join__type(graph: RQL) {
  id: String
  _source: String
}

type core_apimessages_ConversationMessageFlag_Reason @join__type(graph: RQL) {
  _: Boolean
  _source: String
}

type core_apimessages_ConvertedMoney @join__type(graph: RQL) {
  original: core_apimessages_Money
  display: core_apimessages_Money
  _source: String
}

type core_apimessages_CopyAdGroupRequest @join__type(graph: RQL) {
  adGroupUuid: String
  _source: String
}

type core_apimessages_CopyAdGroupResponse @join__type(graph: RQL) {
  adGroup: core_apimessages_AdGroup
  _source: String
}

type core_apimessages_Core @join__type(graph: RQL) {
  Listings(input: Input_core_apimessages_ListingsRequest): core_apimessages_ListingsResponse
  OrdersCustomsInfo(input: Input_core_apimessages_OrdersCustomsInfoRequest): core_apimessages_OrdersCustomsInfoResponse
  Me(input: Input_google_protobuf_Empty): core_apimessages_MeResponse
  BrandManagerBrands(input: Input_core_apimessages_BrandManagerBrandsRequest): core_apimessages_BrandManagerBrandsResponse
  BrandManagerBrand(input: Input_core_apimessages_BrandManagerBrandRequest): core_apimessages_BrandManagerBrandResponse
  CSPs(input: Input_core_apimessages_CSPsRequest): core_apimessages_CSPsResponse
  CSPsInventory(input: Input_core_apimessages_CSPsInventoryRequest): core_apimessages_CSPsInventoryResponse
  CSPsFeaturedListing(input: Input_core_apimessages_CSPsFeaturedListingRequest): core_apimessages_CSPsFeaturedListingResponse
  CSPsVideo(input: Input_core_apimessages_CSPsVideoRequest): core_apimessages_CSPsVideoResponse
  CSPsSpecs(input: Input_core_apimessages_CSPsSpecsRequest): core_apimessages_CSPsSpecsResponse
  Countries(input: Input_google_protobuf_Empty): core_apimessages_CountriesResponse
  CuratedSets(input: Input_core_apimessages_CuratedSetsRequest): core_apimessages_CuratedSetsResponse
  ShippingPrices(input: Input_core_apimessages_ShippingPricesRequest): core_apimessages_ShippingPricesResponse
  Users(input: Input_core_apimessages_UsersRequest): core_apimessages_UsersResponse
  ShopShippingProfiles(input: Input_core_apimessages_ShopShippingProfilesRequest): core_apimessages_ShopShippingProfilesResponse
  CreateMyCuratedSetsMembership(input: Input_core_apimessages_MyCuratedSetMembershipRequest): core_apimessages_MyCuratedSetMembershipResponse
  DeleteMyCuratedSetsMembership(input: Input_core_apimessages_MyCuratedSetMembershipRequest): core_apimessages_MyCuratedSetMembershipResponse
  MyDirectCheckoutProfile(input: Input_core_apimessages_MyDirectCheckoutProfileRequest): core_apimessages_MyDirectCheckoutProfileResponse
  MyShopOrderRefundStats(input: Input_core_apimessages_MyShopOrderRefundStatsRequest): core_apimessages_MyShopOrderRefundStatsResponse
  MyShopShippingProfiles(input: Input_core_apimessages_MyShopShippingProfilesRequest): core_apimessages_MyShopShippingProfilesResponse
  MyShopShippingRates(input: Input_core_apimessages_MyShopShippingRatesRequest): core_apimessages_MyShopShippingRatesResponse
  UpdateMyShopShippingProfiles(input: Input_core_apimessages_UpdateMyShopShippingProfilesRequest): core_apimessages_UpdateMyShopShippingProfilesResponse
  Articles(input: Input_core_apimessages_ArticlesRequest): core_apimessages_ArticlesResponse
  Shops(input: Input_core_apimessages_ShopsRequest): core_apimessages_ShopsResponse
  SearchFilterPresets(input: Input_core_apimessages_SearchFilterPresetsRequest): core_apimessages_SearchFilterPresetsResponse
  Categories(input: Input_core_apimessages_CategoriesRequest): core_apimessages_CategoriesResponse
  BulkCategories(input: Input_core_apimessages_BulkCategoriesRequest): core_apimessages_BulkCategoriesResponse
  CollectionHeader(input: Input_core_apimessages_CollectionHeaderRequest): core_apimessages_CollectionHeaderResponse
  SearchMetadata(input: Input_core_apimessages_SearchMetadataRequest): core_apimessages_SearchMetadataResponse
  MyAddresses(input: Input_core_apimessages_MyAddressesRequest): core_apimessages_MyAddressesResponse
  DeleteMyAddress(input: Input_core_apimessages_AddressDeleteRequest): core_apimessages_DeleteResponse
  AutoOfferCreate(input: Input_core_apimessages_CreateAutoOfferRequest): core_apimessages_CreateAutoOfferResponse
  AutoOffers(input: Input_core_apimessages_AutoOffersRequest): core_apimessages_AutoOffersResponse
  AutoOffersDelete(input: Input_core_apimessages_DeleteAutoOfferRequest): core_apimessages_DeleteAutoOfferResponse
  NegotiationsCreate(input: Input_core_apimessages_CreateNegotiationRequest): core_apimessages_NegotiationsResponse
  NegotiationsAccept(input: Input_core_apimessages_UpdateNegotiationRequest): core_apimessages_UpdateNegotiationResponse
  NegotiationsReject(input: Input_core_apimessages_UpdateNegotiationRequest): core_apimessages_UpdateNegotiationResponse
  NegotiationsCounter(input: Input_core_apimessages_UpdateNegotiationRequest): core_apimessages_UpdateNegotiationResponse
  NegotiationsShippingLocations(input: Input_core_apimessages_NegotiationsShippingLocationRequest): core_apimessages_NegotiationsShippingLocationResponse
  PromotionalCodesRedeem(input: Input_core_apimessages_RedeemPromotionalCodeRequest): core_apimessages_RedeemPromotionalCodeResponse
  PromotionalCodesVerify(input: Input_core_apimessages_VerifyPromotionalCodeRequest): core_apimessages_VerifyPromotionalCodeResponse
  RecentlyViewedListings(input: Input_core_apimessages_RecentlyViewedListingsRequest): core_apimessages_RecentlyViewedListingsResponse
  RecentSearches(input: Input_google_protobuf_Empty): core_apimessages_RecentSearchesResponse
  CreateRecentSearch(input: Input_core_apimessages_CreateRecentSearchRequest): core_apimessages_CreateRecentSearchResponse
  ClearBrowsingHistory(input: Input_google_protobuf_Empty): core_apimessages_DeleteResponse
  ListingsPricing(input: Input_core_apimessages_ListingsPricingRequest): core_apimessages_ListingsPricingResponse
  ListingsSpecs(input: Input_core_apimessages_ListingsSpecsRequest): core_apimessages_ListingsSpecsResponse
  SellerListings(input: Input_core_apimessages_ListingsRequest): core_apimessages_SellerListingsResponse
  ListingCounts(input: Input_core_apimessages_ListingCountsRequest): core_apimessages_ListingCountsResponse
  MyCounts(input: Input_google_protobuf_Empty): core_apimessages_CountsResponse
  Images(input: Input_core_apimessages_ImagesRequest): core_apimessages_ImagesResponse
  BulkImages(input: Input_core_apimessages_BulkImageRequest): core_apimessages_ImagesResponse
  Orders(input: Input_core_apimessages_OrdersRequest): core_apimessages_OrdersResponse
  OrdersFeedbacks(input: Input_core_apimessages_OrderFeedbacksRequest): core_apimessages_OrderFeedbacksResponse
  DeclineFeedback(input: Input_core_apimessages_DeclineFeedbackRequest): core_apimessages_DeclineFeedbackResponse
  UpdateFeedback(input: Input_core_apimessages_UpdateFeedbackRequest): core_apimessages_UpdateFeedbackResponse
  VerifiedShippingAddress(input: Input_core_apimessages_OrderVerifyShippingAddressRequest): core_apimessages_OrderVerifyShippingAddressResponse
  OrderFlatRateShippingOptions(input: Input_core_apimessages_OrderFlatRateShippingOptionsRequest): core_apimessages_OrderFlatRateShippingOptionsResponse
  MarkOrderAsReceived(input: Input_core_apimessages_MarkOrderAsReceivedRequest): core_apimessages_MarkOrderAsReceivedResponse
  Negotiations(input: Input_core_apimessages_NegotiationsRequest): core_apimessages_NegotiationsResponse
  Offers(input: Input_core_apimessages_OffersRequest): core_apimessages_OffersResponse
  SellingFees(input: Input_core_apimessages_SellingFeesRequest): core_apimessages_SellingFeesResponse
  MyShop(input: Input_google_protobuf_Empty): core_apimessages_MyShopResponse
  UpdateMyShop(input: Input_core_apimessages_UpdateMyShopRequest): core_apimessages_UpdateMyShopResponse
  UpdateMyShopBillingMethod(input: Input_core_apimessages_UpdateBillingMethodRequest): core_apimessages_UpdateBillingMethodResponse
  MyShopAdyenBalanceOnboarding(input: Input_google_protobuf_Empty): core_apimessages_AdyenBalanceOnboardingResponse
  BillingMethodIdentifyShopper(input: Input_core_apimessages_BillingMethodIdentifyShopperRequest): core_apimessages_BillingMethodIdentifyShopperResponse
  BillingMethodChallengeShopper(input: Input_core_apimessages_BillingMethodChallengeShopperRequest): core_apimessages_BillingMethodChallengeShopperResponse
  BillingMethodVerifyShopper(input: Input_core_apimessages_BillingMethodVerifyShopperRequest): core_apimessages_BillingMethodVerifyShopperResponse
  SetupShopPaymentMethods(input: Input_core_apimessages_SetupPaymentMethodsRequest): core_apimessages_SetupPaymentMethodsResponse
  ShippingProtection(input: Input_core_apimessages_ShippingProtectionRequest): core_apimessages_ShippingProtectionResponse
  CreateShipment(input: Input_core_apimessages_CreateShipmentRequest): core_apimessages_CreateShipmentResponse
  Shipments(input: Input_core_apimessages_ShipmentsRequest): core_apimessages_ShipmentsResponse
  PurchaseShippingRate(input: Input_core_apimessages_PurchaseShippingRateRequest): core_apimessages_PurchaseShippingRateResponse
  Traits(input: Input_core_apimessages_TraitsRequest): core_apimessages_TraitsResponse
  MyShopOnboarding(input: Input_google_protobuf_Empty): core_apimessages_MyShopOnboardingResponse
  CreateAdyenOnboardingLink(input: Input_core_apimessages_AdyenOnboardingLinkRequest): core_apimessages_AdyenOnboardingLinkResponse
  MyCreditCards(input: Input_google_protobuf_Empty): core_apimessages_MyCreditCardsResponse
  CreateMyCreditCard(input: Input_core_apimessages_CreateMyCreditCardRequest): core_apimessages_CreateMyCreditCardResponse
  UpdateMyCreditCard(input: Input_core_apimessages_UpdateMyCreditCardRequest): core_apimessages_UpdateMyCreditCardResponse
  DeleteMyCreditCard(input: Input_core_apimessages_DeleteMyCreditCardRequest): core_apimessages_DeleteMyCreditCardResponse
  MyPayoutBalances(input: Input_google_protobuf_Empty): core_apimessages_MyPayoutBalancesResponse
  MyUserServices(input: Input_google_protobuf_Empty): core_apimessages_MyUserServicesResponse
  MyReverbCredits(input: Input_google_protobuf_Empty): core_apimessages_MyReverbCreditsResponse
  MyCartItemsIndex(input: Input_google_protobuf_Empty): core_apimessages_MyCartItemsIndexResponse
  MyCartItemBundlesIndex(input: Input_google_protobuf_Empty): core_apimessages_MyCartItemBundlesIndexResponse
  MyAvailableActionsIndex(input: Input_core_apimessages_MyAvailableActionsIndexRequest): core_apimessages_MyAvailableActionsIndexResponse
  SeedListing(input: Input_core_apimessages_SeedListingRequest): core_apimessages_SeedListingResponse
  UpdateReturnPolicy(input: Input_core_apimessages_UpdateReturnPolicyRequest): core_apimessages_UpdateReturnPolicyResponse
  UpdateInternationalTaxProfile(input: Input_core_apimessages_UpdateInternationalTaxProfileRequest): core_apimessages_UpdateInternationalTaxProfileResponse
  ShopReturnPolicies(input: Input_core_apimessages_ShopReturnPoliciesRequest): core_apimessages_ShopReturnPoliciesResponse
  BulkTaxPolicies(input: Input_core_apimessages_BulkTaxPoliciesRequest): core_apimessages_BulkTaxPoliciesResponse
  MyShopPaypalProfile(input: Input_google_protobuf_Empty): core_apimessages_MyShopPaypalProfileResponse
  AccoutAlerts(input: Input_google_protobuf_Empty): core_apimessages_AccountAlertsResponse
  Brands(input: Input_core_apimessages_BrandsRequest): core_apimessages_BrandsResponse
  Feedback(input: Input_core_apimessages_FeedbacksRequest): core_apimessages_FeedbacksResponse
  FeedbackSummaries(input: Input_core_apimessages_FeedbackSummariesRequest): core_apimessages_FeedbackSummariesResponse
  PreorderInfo(input: Input_core_apimessages_PreorderInfoRequest): core_apimessages_PreorderInfoResponse
  Videos(input: Input_core_apimessages_VideosRequest): core_apimessages_VideosResponse
  EstimatedMonthlyPayments(input: Input_core_apimessages_EstimatedMonthlyPaymentsRequest): core_apimessages_EstimatedMonthlyPaymentsResponse
  OtherBuyersWithListingInCartCounts(input: Input_core_apimessages_OtherBuyersWithListingInCartCountsRequest): core_apimessages_OtherBuyersWithListingInCartCountsResponse
  ListingsInUserCart(input: Input_core_apimessages_ListingsInUserCartRequest): core_apimessages_ListingsInUserCartResponse
  AcceptedPaymentMethods(input: Input_core_apimessages_AcceptedPaymentMethodsRequest): core_apimessages_AcceptedPaymentMethodsResponse
  UpdateMyAddress(input: Input_core_apimessages_UpdateAddressRequest): core_apimessages_UpdateAddressResponse
  AffirmFinancingPromotions(input: Input_core_apimessages_AffirmFinancingPromotionsRequest): core_apimessages_AffirmFinancingPromotionsResponse
  MyWatches(input: Input_core_apimessages_WatchesRequest): core_apimessages_WatchesResponse
  UserWatches(input: Input_core_apimessages_UserWatchesRequest): core_apimessages_WatchesResponse
  MyFavoriteSearches(input: Input_core_apimessages_GetMyFavoriteSavedSearchesRequest): core_apimessages_GetMyFavoriteSavedSearchesResponse
  OrderShippingAddresses(input: Input_core_apimessages_OrderShippingAddressesRequest): core_apimessages_OrderShippingAddressesResponse
  BuyerOrders(input: Input_core_apimessages_OrdersRequest): core_apimessages_BuyerOrdersResponse
  OrderPayments(input: Input_core_apimessages_OrderPaymentsRequest): core_apimessages_OrderPaymentsResponse
  OrderNotes(input: Input_core_apimessages_OrderNotesIndexRequest): core_apimessages_OrderNotesIndexResponse
  SellerOrders(input: Input_core_apimessages_OrdersRequest): core_apimessages_SellerOrdersResponse
  CancelOrder(input: Input_core_apimessages_CancelOrderRequest): core_apimessages_CancelOrderResponse
  OrderRefunds(input: Input_core_apimessages_OrderRefundsRequest): core_apimessages_OrderRefundsResponse
  BuyerRefunds(input: Input_core_apimessages_BuyerRefundsRequest): core_apimessages_BuyerRefundsResponse
  CreateMyWatches(input: Input_core_apimessages_WatchesCreateRequest): core_apimessages_UpdateWatchResponse
  DeleteMyWatches(input: Input_core_apimessages_WatchesDeleteRequest): core_apimessages_UpdateWatchResponse
  Storefronts(input: Input_core_apimessages_StorefrontsRequest): core_apimessages_StorefrontsResponse
  BulkCuratedSets(input: Input_core_apimessages_BulkCuratedSetsRequest): core_apimessages_BulkCuratedSetsResponse
  StorefrontReturnPolicies(input: Input_core_apimessages_StorefrontReturnPoliciesRequest): core_apimessages_StorefrontReturnPoliciesResponse
  CSPReviews(input: Input_core_apimessages_CSPReviewsRequest): core_apimessages_CSPReviewsResponse
  VoteProductReview(input: Input_core_apimessages_ProductReviewVoteRequest): core_apimessages_ProductReviewVoteResponse
  UpdateProductReview(input: Input_core_apimessages_UpdateProductReviewRequest): core_apimessages_UpdateProductReviewResponse
  FlagProductReview(input: Input_core_apimessages_FlagProductReviewRequest): core_apimessages_FlagProductReviewResponse
  AdminBlockProductReview(input: Input_core_apimessages_AdminBlockProductReviewRequest): core_apimessages_AdminBlockProductReviewResponse
  ListingsCuratedSets(input: Input_core_apimessages_ListingsCuratedSetsRequest): core_apimessages_ListingsCuratedSetsResponse
  AddListingToCuratedSet(input: Input_core_apimessages_AdminCuratedSetsCurateRequest): core_apimessages_AdminCuratedSetsCurateResponse
  RemoveListingFromCuratedSet(input: Input_core_apimessages_AdminCuratedSetsCurateRequest): core_apimessages_AdminCuratedSetsCurateResponse
  FeatureListingInCuratedSet(input: Input_core_apimessages_AdminCuratedSetsCurateRequest): core_apimessages_AdminCuratedSetsCurateResponse
  UnfeatureListingInCuratedSet(input: Input_core_apimessages_AdminCuratedSetsCurateRequest): core_apimessages_AdminCuratedSetsCurateResponse
  BulkAddresses(input: Input_core_apimessages_BulkAddressesRequest): core_apimessages_BulkAddressesResponse
  BulkOrders(input: Input_core_apimessages_BulkOrdersRequest): core_apimessages_BulkOrdersResponse
  ReverifyCreditCard(input: Input_core_apimessages_ReverifyCreditCardRequest): core_apimessages_ReverifyCreditCardResponse
  ReferAFriend(input: Input_google_protobuf_Empty): core_apimessages_ReferAFriendResponse
  CheckoutCreatePaymentRedirectUrl(input: Input_core_apimessages_CheckoutCreatePaymentRedirectUrlRequest): core_apimessages_CheckoutCreatePaymentRedirectUrlResponse
  StartCheckoutForListing(input: Input_core_apimessages_StartCheckoutForListingRequest): core_apimessages_StartCheckoutForListingResponse
  StartPaypalCheckout(input: Input_core_apimessages_StartPaypalCheckoutRequest): core_apimessages_StartPaypalCheckoutResponse
  CreateCheckoutPaypalOrder(input: Input_core_apimessages_CreateCheckoutPaypalOrderRequest): core_apimessages_CreateCheckoutPaypalOrderResponse
  ProcessApprovedPaypalOrder(input: Input_core_apimessages_ProcessApprovedPaypalOrderRequest): core_apimessages_ProcessApprovedPaypalOrderResponse
  ApplyCheckoutDiscountCode(input: Input_core_apimessages_ApplyCheckoutDiscountCodeRequest): core_apimessages_ApplyCheckoutDiscountCodeResponse
  SelectCheckoutCreditCard(input: Input_core_apimessages_SelectCheckoutCreditCardRequest): core_apimessages_SelectCheckoutCreditCardResponse
  UpdateCheckoutBillingAddress(input: Input_core_apimessages_UpdateCheckoutBillingAddressRequest): core_apimessages_UpdateCheckoutBillingAddressResponse
  SelectCheckoutPaymentMethod(input: Input_core_apimessages_SelectCheckoutPaymentMethodRequest): core_apimessages_SelectCheckoutPaymentMethodResponse
  CheckoutUpdateOrderQuantity(input: Input_core_apimessages_CheckoutUpdateOrderQuantityRequest): core_apimessages_CheckoutUpdateOrderQuantityResponse
  CheckoutFinalizeDigitalWalletPayment(input: Input_core_apimessages_CheckoutFinalizeDigitalWalletPaymentRequest): core_apimessages_CheckoutFinalizeDigitalWalletPaymentResponse
  CheckoutFinalizeRedirectPaymentCheckout(input: Input_core_apimessages_CheckoutFinalizeRedirectPaymentCheckoutRequest): core_apimessages_CheckoutFinalizeRedirectPaymentCheckoutResponse
  FinalizeAffirmCheckoutPayment(input: Input_core_apimessages_FinalizeAffirmCheckoutPaymentRequest): core_apimessages_FinalizeAffirmCheckoutPaymentResponse
  FinalizeCardCheckoutPayment(input: Input_core_apimessages_FinalizeCardCheckoutPaymentRequest): core_apimessages_FinalizeCardCheckoutPaymentResponse
  FinalizePaypalCheckoutPayment(input: Input_core_apimessages_FinalizePaypalCheckoutPaymentRequest): core_apimessages_FinalizePaypalCheckoutPaymentResponse
  FinalizeRedirectAuthCheckoutPayment(input: Input_core_apimessages_FinalizeRedirectAuthCheckoutPaymentRequest): core_apimessages_FinalizeRedirectAuthCheckoutPaymentResponse
  CheckoutVerifyShopper(input: Input_core_apimessages_CheckoutVerifyShopperRequest): core_apimessages_CheckoutVerifyShopperResponse
  CheckoutIdentifyShopper(input: Input_core_apimessages_CheckoutIdentifyShopperRequest): core_apimessages_CheckoutIdentifyShopperResponse
  CheckoutChallengeShopper(input: Input_core_apimessages_CheckoutChallengeShopperRequest): core_apimessages_CheckoutChallengeShopperResponse
  GuestCheckoutVerifyShopper(input: Input_core_apimessages_GuestCheckoutVerifyShopperRequest): core_apimessages_CheckoutVerifyShopperResponse
  BumpKeys(input: Input_core_apimessages_BumpKeysRequest): core_apimessages_BumpKeysResponse
  SiteBanner(input: Input_core_apimessages_SiteBannerRequest): core_apimessages_SiteBannerResponse
  SiteBanners(input: Input_core_apimessages_SiteBannerRequest): core_apimessages_SiteBannerResponse
  TrackBumpInteraction(input: Input_core_apimessages_TrackBumpInteractionRequest): core_apimessages_TrackBumpInteractionResponse
  CPSuggestions(input: Input_core_apimessages_CPSuggestionsRequest): core_apimessages_CPSuggestionsResponse
  NodesAdvertisers(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesAdCampaigns(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesAddresses(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesAdGroups(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesAdGroupKeywords(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesAds(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesAdZones(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesCsps(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesCategories(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesCuratedSets(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesImages(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesInternationalTaxProfiles(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesListings(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesListingsPricings(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesListingsExpressPay(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesListingsSignals(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesListingsProtectionPlanOptions(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesListingsAutoOfferEligibilities(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesListingsBuyerOfferEligibilities(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesListingsAffirmZeroPercentFinancingConfigurations(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesListingsSalesMemberships(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesListingsUserViews(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesListingsOfferBotRules(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesListingsCertifiedPreOwned(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesOrders(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesOrderBundles(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesPacklinkShipments(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesSales(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesTruliooOnboardingRecords(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesShippingRates(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesBrowsePages(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesBumpRates(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesBusinessRegistrationNumbers(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesCanonicalProducts(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesCspExpressSaleItemBids(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesGearCollectionItems(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesInformActThresholdStatuses(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesProductReviews(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesPublicPriceRecords(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesUsers(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesNonUserExperiments(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesPriceGuides(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesAdyenCheckoutPaymentMethods(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesTaxIdentifications(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesTaxProfiles(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesPriceChanges(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesSiteBanners(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesShops(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesShopsConfigs(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesShopsCertifiedPreOwned(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesMyUpdatesPromotions(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesUniversalPromoCampaigns(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesShopCampaignCoupons(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesPackageSizeSuggestions(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesShipmentPackages(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesReturnPolicies(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesBrands(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesProductBreadcrumbs(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesUserShopPermissions(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  NodesEstimatedNewListingPrices(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  MyShopCampaigns(input: Input_google_protobuf_Empty): core_apimessages_MyShopCampaignsResponse
  UpdateMyShopCampaign(input: Input_core_apimessages_UpdateMyShopCampaignRequest): core_apimessages_UpdateMyShopCampaignResponse
  MyShopEarnings(input: Input_core_apimessages_MyShopEarningsRequest): core_apimessages_MyShopEarningsResponse
  MyShopBumpStats(input: Input_core_apimessages_MyShopBumpStatsRequest): core_apimessages_MyShopBumpStatsResponse
  MyShopStats(input: Input_core_apimessages_MyShopStatsRequest): core_apimessages_MyShopStatsResponse
  MyShopBadges(input: Input_google_protobuf_Empty): core_apimessages_MyShopBadgesResponse
  MyMessages(input: Input_core_apimessages_MyMessagesRequest): core_apimessages_MyMessagesResponse
  CreateMySaleMembership(input: Input_core_apimessages_CreateMySaleMembershipRequest): core_apimessages_CreateMySaleMembershipResponse
  DeleteMySaleMembership(input: Input_core_apimessages_DeleteMySaleMembershipRequest): core_apimessages_DeleteMySaleMembershipResponse
  RegisterMyPacklinkAccount(input: Input_core_apimessages_RegisterMyPacklinkAccountRequest): core_apimessages_RegisterMyPacklinkAccountResponse
  LoginMyPacklinkAccount(input: Input_core_apimessages_LoginMyPacklinkAccountRequest): core_apimessages_LoginMyPacklinkAccountResponse
  MyPacklinkAccountStatus(input: Input_google_protobuf_Empty): core_apimessages_MyPacklinkAccountStatusResponse
  CreatePacklinkDraft(input: Input_core_apimessages_CreatePacklinkDraftRequest): core_apimessages_CreatePacklinkDraftResponse
  DeleteMyGearCollectionItem(input: Input_core_apimessages_DeleteGearCollectionItemRequest): core_apimessages_DeleteGearCollectionItemResponse
  UpdateGearCollectionItem(input: Input_core_apimessages_UpdateGearCollectionItemRequest): core_apimessages_UpdateGearCollectionItemResponse
  UpdateGearCollectionItemState(input: Input_core_apimessages_UpdateGearCollectionItemStateRequest): core_apimessages_UpdateGearCollectionItemStateResponse
  UpdateCartItemProtectionPlan(input: Input_core_apimessages_UpdateCartItemProtectionPlanRequest): core_apimessages_UpdateCartItemProtectionPlanResponse
  DeleteCartItemProtectionPlan(input: Input_core_apimessages_DeleteCartItemProtectionPlanRequest): core_apimessages_DeleteCartItemProtectionPlanResponse
  CreateTaxIdentification(input: Input_core_apimessages_CreateTaxIdentificationRequest): core_apimessages_CreateTaxIdentificationResponse
  UpdateTaxIdentification(input: Input_core_apimessages_UpdateTaxIdentificationRequest): core_apimessages_UpdateTaxIdentificationResponse
  DeactivateTaxIdentification(input: Input_core_apimessages_DeactivateTaxIdentificationRequest): core_apimessages_DeactivateTaxIdentificationResponse
  RequestTaxFormDownload(input: Input_core_apimessages_RequestTaxFormDownloadRequest): core_apimessages_RequestTaxFormDownloadResponse
  TaxFormDownload(input: Input_core_apimessages_TaxFormDownloadRequest): core_apimessages_TaxFormDownloadResponse
  AdServe(input: Input_core_apimessages_AdServeRequest): core_apimessages_AdServeResponse
  UpdateAdCampaign(input: Input_core_apimessages_UpdateAdCampaignRequest): core_apimessages_UpdateAdCampaignResponse
  UpdateAdvertiser(input: Input_core_apimessages_UpdateAdvertiserRequest): core_apimessages_UpdateAdvertiserResponse
  UpdateAdZone(input: Input_core_apimessages_UpdateAdZoneRequest): core_apimessages_UpdateAdZoneResponse
  AdvertisersSearch(input: Input_core_apimessages_AdvertisersSearchRequest): core_apimessages_AdvertisersSearchResponse
  AdCampaignsSearch(input: Input_core_apimessages_AdCampaignsSearchRequest): core_apimessages_AdCampaignsSearchResponse
  AdGroupsSearch(input: Input_core_apimessages_AdGroupsSearchRequest): core_apimessages_AdGroupsSearchResponse
  AdsSearch(input: Input_core_apimessages_AdsSearchRequest): core_apimessages_AdsSearchResponse
  AdZonesSearch(input: Input_core_apimessages_AdZonesSearchRequest): core_apimessages_AdZonesSearchResponse
  UpdateAdGroupKeywords(input: Input_core_apimessages_UpdateAdGroupKeywordsRequest): core_apimessages_UpdateAdGroupKeywordsResponse
  UpdateAdGroup(input: Input_core_apimessages_UpdateAdGroupRequest): core_apimessages_UpdateAdGroupResponse
  CopyAdGroup(input: Input_core_apimessages_CopyAdGroupRequest): core_apimessages_CopyAdGroupResponse
  UpdateAd(input: Input_core_apimessages_UpdateAdRequest): core_apimessages_UpdateAdResponse
  DeleteAd(input: Input_core_apimessages_DeleteAdRequest): core_apimessages_DeleteAdResponse
  CreateMyPlaidLinkToken(input: Input_core_apimessages_CreateMyPlaidLinkTokenRequest): core_apimessages_CreateMyPlaidLinkTokenResponse
  SaveMyPlaidAccount(input: Input_core_apimessages_SaveMyPlaidAccountRequest): core_apimessages_SaveMyPlaidAccountResponse
  CancelPlaidAccount(input: Input_core_apimessages_CancelPlaidAccountRequest): core_apimessages_CancelPlaidAccountResponse
  RequestAccountDeletion(input: Input_core_apimessages_RequestAccountDeletionRequest): core_apimessages_RequestAccountDeletionResponse
  DelinkUserService(input: Input_core_apimessages_DelinkUserServiceRequest): core_apimessages_DelinkUserServiceResponse
  AdaChatToken(input: Input_google_protobuf_Empty): core_apimessages_AdaChatTokenResponse
  BearerV2Token(input: Input_core_apimessages_BearerV2TokenRequest): core_apimessages_BearerV2TokenResponse
  Experiments(input: Input_google_protobuf_Empty): core_apimessages_ExperimentsResponse
  MosaicTilesHomepage(input: Input_google_protobuf_Empty): core_apimessages_MosaicTilesResponse
  UpdateUniversalPromoCampaign(input: Input_core_apimessages_UpdateUniversalPromoCampaignRequest): core_apimessages_UpdateUniversalPromoCampaignResponse
  StartCheckout(input: Input_core_apimessages_StartCheckoutRequest): core_apimessages_StartCheckoutResponse
  CheckoutShow(input: Input_core_apimessages_CheckoutShowRequest): core_apimessages_CheckoutShowResponse
  CheckoutCartEdit(input: Input_core_apimessages_CheckoutCartEditRequest): core_apimessages_CheckoutCartEditResponse
  CartMoveToWatchList(input: Input_core_apimessages_CartMoveToWatchListRequest): core_apimessages_CartMoveToWatchListResponse
  CheckoutAction(input: Input_core_apimessages_CheckoutActionRequest): core_apimessages_CheckoutActionResponse
  CheckoutApplePayDetails(input: Input_core_apimessages_CheckoutApplePayDetailsRequest): core_apimessages_CheckoutApplePayDetailsResponse
  CheckoutSelectShippingAddress(input: Input_core_apimessages_CheckoutSelectShippingAddressRequest): core_apimessages_CheckoutSelectShippingAddressResponse
  CheckoutUpdateShippingAddress(input: Input_core_apimessages_CheckoutUpdateShippingAddressRequest): core_apimessages_CheckoutUpdateShippingAddressResponse
  CheckoutSelectOrderShippingMethod(input: Input_core_apimessages_CheckoutSelectOrderShippingMethodRequest): core_apimessages_CheckoutSelectOrderShippingMethodResponse
  CheckoutUpdateShippingEstimate(input: Input_core_apimessages_CheckoutUpdateShippingEstimateRequest): core_apimessages_CheckoutUpdateShippingEstimateResponse
  ExpressSaleCheckoutShow(input: Input_core_apimessages_ExpressSaleCheckoutShowRequest): core_apimessages_ExpressSaleCheckoutShowResponse
  CreateExpressSaleCheckout(input: Input_core_apimessages_CreateExpressSaleCheckoutRequest): core_apimessages_CreateExpressSaleCheckoutResponse
  CompleteExpressSaleCheckout(input: Input_core_apimessages_CompleteExpressSaleCheckoutRequest): core_apimessages_CompleteExpressSaleCheckoutResponse
  GenerateAdminReport(input: Input_core_apimessages_GenerateAdminReportRequest): core_apimessages_GenerateAdminReportResponse
  AdminNotesSearch(input: Input_core_apimessages_AdminNotesSearchRequest): core_apimessages_AdminNotesSearchResponse
  AdminTax1099kReportingThresholdSearch(input: Input_core_apimessages_AdminTax1099kReportingThresholdSearchRequest): core_apimessages_AdminTax1099kReportingThresholdSearchResponse
  DeleteAdminTax1099kReportingThreshold(input: Input_core_apimessages_AdminTax1099kReportingThresholdDeleteRequest): core_apimessages_AdminTax1099kReportingThresholdDeleteResponse
  UpdateAdminTax1099kReportingThreshold(input: Input_core_apimessages_AdminTax1099kReportingThresholdUpdateRequest): core_apimessages_AdminTax1099kReportingThresholdUpdateResponse
  CreateAdminTax1099kReportingThreshold(input: Input_core_apimessages_AdminTax1099kReportingThresholdCreateRequest): core_apimessages_AdminTax1099kReportingThresholdCreateResponse
  AdminUserDatadogErrorsSearch(input: Input_core_apimessages_AdminUserDatadogErrorsSearchRequest): core_apimessages_AdminUserDatadogErrorsSearchResponse
  AdminUserSearch(input: Input_core_apimessages_AdminUserSearchRequest): core_apimessages_AdminUserSearchResponse
  UpdateListing(input: Input_core_apimessages_UpdateListingRequest): core_apimessages_UpdateListingResponse
  UpdateListingState(input: Input_core_apimessages_UpdateListingStateRequest): core_apimessages_UpdateListingStateResponse
  BulkPublishListings(input: Input_core_apimessages_BulkPublishListingsRequest): core_apimessages_BulkPublishListingsResponse
  BulkPublishListingsAsync(input: Input_core_apimessages_BulkPublishListingsAsyncRequest): core_apimessages_SellerBulkActionAsyncResponse
  BulkCreateAutoOffers(input: Input_core_apimessages_BulkCreateAutoOffersRequest): core_apimessages_SellerBulkActionResponse
  BulkCreateAutoOffersAsync(input: Input_core_apimessages_BulkCreateAutoOffersAsyncRequest): core_apimessages_SellerBulkActionAsyncResponse
  BulkDeleteAutoOffers(input: Input_core_apimessages_BulkDeleteAutoOffersRequest): core_apimessages_SellerBulkActionResponse
  BulkDeleteAutoOffersAsync(input: Input_core_apimessages_BulkDeleteAutoOffersAsyncRequest): core_apimessages_SellerBulkActionAsyncResponse
  BulkCreateBumped(input: Input_core_apimessages_BulkCreateBumpedRequest): core_apimessages_SellerBulkActionResponse
  BulkCreateBumpedAsync(input: Input_core_apimessages_BulkCreateBumpedAsyncRequest): core_apimessages_SellerBulkActionAsyncResponse
  BulkDeleteBumped(input: Input_core_apimessages_BulkDeleteBumpedRequest): core_apimessages_SellerBulkActionResponse
  BulkDeleteBumpedAsync(input: Input_core_apimessages_BulkDeleteBumpedAsyncRequest): core_apimessages_SellerBulkActionAsyncResponse
  BulkCreateZeroPercentAffirm(input: Input_core_apimessages_BulkCreateZeroPercentAffirmRequest): core_apimessages_SellerBulkActionResponse
  BulkCreateZeroPercentAffirmAsync(input: Input_core_apimessages_BulkCreateZeroPercentAffirmAsyncRequest): core_apimessages_SellerBulkActionAsyncResponse
  BulkDeleteZeroPercentAffirm(input: Input_core_apimessages_BulkDeleteZeroPercentAffirmRequest): core_apimessages_SellerBulkActionResponse
  BulkDeleteZeroPercentAffirmAsync(input: Input_core_apimessages_BulkDeleteZeroPercentAffirmAsyncRequest): core_apimessages_SellerBulkActionAsyncResponse
  BulkCreateSaleMemberships(input: Input_core_apimessages_BulkSaleMembershipsRequest): core_apimessages_SellerBulkActionResponse
  BulkDeleteSaleMemberships(input: Input_core_apimessages_BulkSaleMembershipsRequest): core_apimessages_SellerBulkActionResponse
  PrepublishStatus(input: Input_google_protobuf_Empty): core_apimessages_PrepublishStatusResponse
  GearCollectionSetting(input: Input_google_protobuf_Empty): core_apimessages_GearCollectionSettingResponse
  MyGearCollectionSettings(input: Input_google_protobuf_Empty): core_apimessages_GearCollectionSettingsResponse
  UpdateMyGearCollectionSettings(input: Input_core_apimessages_UpdateMyGearCollectionSettingsRequest): core_apimessages_UpdateMyGearCollectionSettingsResponse
  BulkDeleteListings(input: Input_core_apimessages_BulkDeleteListingsRequest): core_apimessages_BulkDeleteListingsResponse
  BulkDeleteListingsAsync(input: Input_core_apimessages_BulkDeleteListingsAsyncRequest): core_apimessages_SellerBulkActionAsyncResponse
  PublishAllListings(input: Input_google_protobuf_Empty): core_apimessages_PublishAllListingsResponse
  BulkExportListings(input: Input_core_apimessages_BulkExportListingsRequest): core_apimessages_BulkExportListingsResponse
  MySales(input: Input_google_protobuf_Empty): core_apimessages_MySalesResponse
  CrossPlatformListingStatus(input: Input_core_apimessages_CrossPlatformListingStatusRequest): core_apimessages_CrossPlatformListingStatusResponse
  UpdateCrossPlatformListingSession(input: Input_core_apimessages_UpdateCrossPlatformListingSessionRequest): core_apimessages_UpdateCrossPlatformListingSessionResponse
  ListingCorrection(input: Input_core_apimessages_ListingCorrectionRequest): core_apimessages_ListingCorrectionResponse
  CreateMyAction(input: Input_core_apimessages_CreateMyActionRequest): core_apimessages_CreateMyActionResponse
  ConversationFlagMessage(input: Input_core_apimessages_ConversationFlagMessageRequest): core_apimessages_ConversationFlagMessageResponse
  CreateTruliooOnboardingRecord(input: Input_google_protobuf_Empty): core_apimessages_CreateTruliooOnboardingRecordResponse
  TruliooOnboardingRecordResendPscEmail(input: Input_core_apimessages_TruliooOnboardingRecordResendPscEmailRequest): core_apimessages_TruliooOnboardingRecordResendPscEmailResponse
  PayMyStatement(input: Input_core_apimessages_PayMyStatementRequest): core_apimessages_PayMyStatementResponse
  UpsertMyFavorite(input: Input_core_apimessages_UpsertMyFavoriteRequest): core_apimessages_UpsertMyFavoriteResponse
  DeleteMyFavorite(input: Input_core_apimessages_DeleteMyFavoriteRequest): core_apimessages_DeleteMyFavoriteResponse
  FindFavorite(input: Input_core_apimessages_FindFavoriteRequest): core_apimessages_FindFavoriteResponse
  MyHomepageNotifications(input: Input_core_apimessages_MyHomepageNotificationsRequest): core_apimessages_MyHomepageNotificationsResponse
  Homepage(input: Input_core_apimessages_HomepageRequest): core_apimessages_HomepageResponse
  TruliooOnboarding(input: Input_google_protobuf_Empty): core_apimessages_TruliooOnboardingResponse
  SellerVerificationPolicy(input: Input_google_protobuf_Empty): core_apimessages_SellerVerificationPolicyResponse
  UndoDeleteMyFavorite(input: Input_core_apimessages_UndoDeleteMyFavoriteRequest): core_apimessages_UndoDeleteMyFavoriteResponse
  EstimateNegotiationSalesTax(input: Input_core_apimessages_EstimateNegotiationSalesTaxRequest): core_apimessages_EstimateNegotiationSalesTaxResponse
  RestartTruliooOnboardingWorkflow(input: Input_google_protobuf_Empty): core_apimessages_TruliooOnboardingResponse
  CreateMyFeedbackMessage(input: Input_core_apimessages_CreateMyFeedbackMessageRequest): core_apimessages_CreateMyFeedbackMessageResponse
  DeleteMyFeedbackMessage(input: Input_core_apimessages_DeleteMyFeedbackMessageRequest): core_apimessages_DeleteMyFeedbackMessageResponse
  MyFeedbackMessages(input: Input_core_apimessages_MyFeedbackMessagesRequest): core_apimessages_MyFeedbackMessagesResponse
  CreateMyAffirmCuratedSetMembership(input: Input_core_apimessages_MyAffirmCuratedSetMembershipRequest): core_apimessages_MyCuratedSetMembershipResponse
  DeleteMyAffirmCuratedSetMembership(input: Input_core_apimessages_MyAffirmCuratedSetMembershipRequest): core_apimessages_MyCuratedSetMembershipResponse
  MyBuyerCoupons(input: Input_core_apimessages_MyBuyerCouponsRequest): core_apimessages_MyBuyerCouponsResponse
  ListingsOrderStats(input: Input_core_apimessages_ListingsOrderStatsRequest): core_apimessages_ListingsOrderStatsResponse
  ListingsValidForPublish(input: Input_core_apimessages_ListingsValidForPublishRequest): core_apimessages_ListingsValidForPublishResponse
  BrowsePageLinks(input: Input_core_apimessages_BrowsePageLinksRequest): core_apimessages_BrowsePageLinksResponse
  CanonicalProductRecommendations(input: Input_core_apimessages_RecommendationsRequest): core_apimessages_RecommendationsResponse
  DeleteDraftListing(input: Input_core_apimessages_DraftListingDeleteRequest): core_apimessages_DraftListingDeleteResponse
  FormSelectCategories(input: Input_core_apimessages_FormSelectCategoriesRequest): core_apimessages_FormSelectCategoriesResponse
  MyFeedSearch(input: Input_core_apimessages_MyFeedSearchRequest): core_apimessages_MyFeedSearchResponse
  ListingPriceRecommendations(input: Input_core_apimessages_ListingPriceRecommendationsRequest): core_apimessages_ListingPriceRecommendationsResponse
  MyShopExportDac7OrderData(input: Input_core_apimessages_MyShopExportDac7OrderDataRequest): core_apimessages_MyShopExportDac7OrderDataResponse
  SelectAddressAutocompleteSuggestion(input: Input_core_apimessages_SelectAddressAutocompleteSuggestionRequest): core_apimessages_SelectAddressAutocompleteSuggestionResponse
  FindAddressAutocompleteSuggestions(input: Input_core_apimessages_FindAddressAutocompleteSuggestionsRequest): core_apimessages_FindAddressAutocompleteSuggestionsResponse
  AddressVerify(input: Input_core_apimessages_AddressVerifyRequest): core_apimessages_AddressVerifyResponse
  AcceptAddressSuggestion(input: Input_core_apimessages_AcceptAddressSuggestionRequest): core_apimessages_AcceptAddressSuggestionResponse
  UpdateCheckoutPaypalOrder(input: Input_core_apimessages_UpdateCheckoutPaypalOrderRequest): core_apimessages_UpdateCheckoutPaypalOrderResponse
  CreateAdminNote(input: Input_core_apimessages_AdminNoteCreateRequest): core_apimessages_AdminNote
  UpdateAdminNote(input: Input_core_apimessages_AdminNoteUpdateRequest): core_apimessages_AdminNote
  ShopAdyenBalancePlatformNotifications(input: Input_core_apimessages_ShopAdyenBalancePlatformNotificationsIndexRequest): core_apimessages_ShopAdyenBalancePlatformNotificationsIndexResponse
  ExportSecondaryUserActivities(input: Input_core_apimessages_ExportSecondaryUserActivitiesRequest): core_apimessages_ExportSecondaryUserActivitiesResponse
  ShowAdyenRegion(input: Input_core_apimessages_ShowAdyenRegionRequest): core_apimessages_ShowAdyenRegionResponse
  CreateUserShopPermission(input: Input_core_apimessages_CreateUserShopPermissionRequest): core_apimessages_CreateOrUpdateUserShopPermissionResponse
  UpdateUserShopPermission(input: Input_core_apimessages_UpdateUserShopPermissionRequest): core_apimessages_CreateOrUpdateUserShopPermissionResponse
  DeleteUserShopPermission(input: Input_core_apimessages_DeleteUserShopPermissionRequest): core_apimessages_DeleteUserShopPermissionResponse
  PaypalOnboardSeller(input: Input_core_apimessages_PaypalOnboardSellerRequest): core_apimessages_PaypalOnboardSellerResponse
  NodesListingsDigitalDetails(input: Input_core_apimessages_NodeRequest): core_apimessages_NodeResponse
  SendDigitalListingDownloadEmail(input: Input_core_apimessages_DigitalListingSendDownloadEmailRequest): core_apimessages_DigitalListingSendDownloadEmailResponse
  SetAccertifyTokens(input: Input_core_apimessages_SetAccertifyTokensRequest): core_apimessages_SetAccertifyTokensResponse
  _source: String
}

type core_apimessages_CountsLinks @join__type(graph: RQL) {
  self: core_apimessages_Link
  _source: String
}

type core_apimessages_CountsResponse @join__type(graph: RQL) {
  Links: core_apimessages_CountsLinks @deprecated
  total: core_apimessages_CountsTotal
  activeCartItemTotal: core_apimessages_UserBadge
  activeOffers: core_apimessages_UserBadge
  billingProfile: core_apimessages_UserBadge
  buyerActiveOffers: core_apimessages_UserBadge
  invoicedStatementCount: core_apimessages_UserBadge
  layawayOrders: core_apimessages_UserBadge
  outstandingFeedback: core_apimessages_UserBadge
  sellerActiveOffers: core_apimessages_UserBadge
  sellerOrdersAwaitingShipment: core_apimessages_UserBadge
  sellerOrdersRefundRequested: core_apimessages_UserBadge
  unpaidOrders: core_apimessages_UserBadge
  unreadMessages: core_apimessages_UserBadge
  sellerOrdersAwaitingPickup: core_apimessages_UserBadge
  buyerOrdersAwaitingPickup: core_apimessages_UserBadge
  countsLinks: core_apimessages_CountsLinks
  userNotifications: [core_apimessages_UserNotification]
  _source: String
}

type core_apimessages_CountsTotal @join__type(graph: RQL) {
  count: Int
  _source: String
}

type core_apimessages_CreateAutoOfferRequest @join__type(graph: RQL) {
  listingId: String
  message: String
  price: core_apimessages_Money @deprecated
  pushToExisting: Boolean @deprecated
  percentage: Int
  instantOffersEnabled: Boolean @deprecated
  shippingPriceOverride: core_apimessages_Money
  _source: String
}

type core_apimessages_CreateAutoOfferResponse @join__type(graph: RQL) {
  autoOffer: core_apimessages_AutoOffer
  _source: String
}

type core_apimessages_CreateCheckoutPaypalOrderRequest @join__type(graph: RQL) {
  """checkout UUID"""
  id: String
  reverbApp: String
  noShipping: Boolean
  _source: String
}

type core_apimessages_CreateCheckoutPaypalOrderResponse @join__type(graph: RQL) {
  """checkout UUID"""
  id: String
  paypalOrderId: String
  redirectUrl: String
  _source: String
}

type core_apimessages_CreateExpressSaleCheckoutRequest @join__type(graph: RQL) {
  checkoutId: String
  payoutAmountCents: Int
  isTermsAccepted: Boolean
  addressUuid: String
  address: core_apimessages_AddressEntry
  _source: String
}

type core_apimessages_CreateExpressSaleCheckoutResponse @join__type(graph: RQL) {
  checkoutId: String
  _source: String
}

type core_apimessages_CreateMyActionRequest @join__type(graph: RQL) {
  name: core_apimessages_UserActionName
  _source: String
}

type core_apimessages_CreateMyActionResponse @join__type(graph: RQL) {
  errors: [core_apimessages_Error]
  action: core_apimessages_AvailableAction
  _source: String
}

type core_apimessages_CreateMyCreditCardRequest @join__type(graph: RQL) {
  creditCard: core_apimessages_CreateMyCreditCardRequest_CreditCardEntry
  billingAddress: core_apimessages_AddressEntry
  _source: String
}

type core_apimessages_CreateMyCreditCardRequest_CreditCardEntry @join__type(graph: RQL) {
  tokenizedFields: core_apimessages_CreditCardTokenizedFields
  cardholderName: String
  _source: String
}

type core_apimessages_CreateMyCreditCardResponse @join__type(graph: RQL) {
  creditCard: core_apimessages_CreditCard
  _source: String
}

type core_apimessages_CreateMyFeedbackMessageRequest @join__type(graph: RQL) {
  message: String
  _source: String
}

type core_apimessages_CreateMyFeedbackMessageResponse @join__type(graph: RQL) {
  id: String
  _source: String
}

type core_apimessages_CreateMyPlaidLinkTokenRequest @join__type(graph: RQL) {
  countryCode: String
  plaidAccountId: String
  requiresMobileRedirect: Boolean
  _source: String
}

type core_apimessages_CreateMyPlaidLinkTokenResponse @join__type(graph: RQL) {
  linkToken: String
  _source: String
}

type core_apimessages_CreateMySaleMembershipRequest @join__type(graph: RQL) {
  listingId: String
  saleId: String
  _source: String
}

type core_apimessages_CreateMySaleMembershipResponse @join__type(graph: RQL) {
  saleMembership: core_apimessages_ListingSaleMembership
  _source: String
}

type core_apimessages_CreateNegotiationRequest @join__type(graph: RQL) {
  message: String
  offerItems: [core_apimessages_OfferItemRequest]
  recipientUuid: String
  countryCode: String
  regionCode: String
  """country code OR subregion (eg continental US)"""
  shippingRegionCode: String
  postalCode: String
  """
  optional, to copy message/photos to relevant conversation if offer is included is messages
  """
  conversation: core_apimessages_CreateNegotiationRequest_ConversationData
  bumpKey: core_apimessages_BumpKey
  shippingAddressUuid: String
  creditCardId: String
  _source: String
}

type core_apimessages_CreateNegotiationRequest_ConversationData @join__type(graph: RQL) {
  listingId: String
  photos: [core_apimessages_ImageEntry]
  _source: String
}

type core_apimessages_CreateOrUpdateUserShopPermissionResponse @join__type(graph: RQL) {
  userShopPermission: core_apimessages_UserShopPermission
  _source: String
}

type core_apimessages_CreateOrderNoteRequest @join__type(graph: RQL) {
  body: String
  """orders.id"""
  orderId: String
  _source: String
}

type core_apimessages_CreateOrderNoteResponse @join__type(graph: RQL) {
  errors: [core_apimessages_Error]
  orderNote: core_apimessages_OrderNote
  _source: String
}

type core_apimessages_CreatePacklinkDraftRequest @join__type(graph: RQL) {
  orderId: String
  _source: String
}

type core_apimessages_CreatePacklinkDraftResponse @join__type(graph: RQL) {
  shipment: core_apimessages_PacklinkShipment
  _source: String
}

type core_apimessages_CreateRecentSearchRequest @join__type(graph: RQL) {
  query: String
  _source: String
}

type core_apimessages_CreateRecentSearchResponse @join__type(graph: RQL) {
  query: String
  _source: String
}

type core_apimessages_CreateShipmentError @join__type(graph: RQL) {
  message: String
  errorType: core_apimessages_CreateShipmentErrorType
  _source: String
}

type core_apimessages_CreateShipmentRequest @join__type(graph: RQL) {
  toAddress: core_apimessages_Address
  fromAddress: core_apimessages_Address
  package: core_apimessages_ShippingLabelPackage
  shippingProtection: Boolean
  signatureRequired: Boolean
  mediaMailQualified: Boolean
  customs: core_apimessages_CustomsInfo
  orderUuids: [String]
  shippingProtectionPrice: core_apimessages_Money
  """shipments.uuid"""
  id: String
  toAddressIsResidential: Boolean
  shipmentType: core_apimessages_Shipment_ShipmentType
  modifiedCarrierCalculatedShipment: Boolean
  _source: String
}

type core_apimessages_CreateShipmentResponse @join__type(graph: RQL) {
  shipment: core_apimessages_Shipment
  errors: [core_apimessages_CreateShipmentError]
  _source: String
}

type core_apimessages_CreateTaxIdentificationRequest @join__type(graph: RQL) {
  taxId: String
  countryCode: String
  taxType: String
  _source: String
}

type core_apimessages_CreateTaxIdentificationResponse @join__type(graph: RQL) {
  taxIdentification: core_apimessages_TaxIdentification
  shopId: String
  shop: MyShop
  _source: String
}

type core_apimessages_CreateTruliooOnboardingRecordResponse @join__type(graph: RQL) {
  errors: [core_apimessages_Error]
  truliooOnboardingRecord: core_apimessages_TruliooOnboardingRecord
  _source: String
}

type core_apimessages_CreateUserShopPermissionRequest @join__type(graph: RQL) {
  email: String
  permissionLevel: core_apimessages_UserShopPermission_PermissionLevel
  _source: String
}

type core_apimessages_CreditCard @join__type(graph: RQL) {
  """credit_cards.id"""
  id: String
  last4: String
  """Use the brand field instead"""
  cardType: String @deprecated
  expirationMonth: String
  expirationYear: String
  cardholderName: String
  cardSource: String
  primaryBilling: Boolean
  address: core_apimessages_Address
  needsReverification: Boolean
  primaryForCheckout: Boolean
  brand: core_apimessages_CreditCard_Brand
  display: core_apimessages_CreditCard_Display
  cardBin: String
  _source: String
}

"""
  *
Fields generated by Adyen's secured fields library.
Each key is the name of an individual credit card field (ex: "encryptedExpiryYear"),
and each value is an encrypted string.
Adyen decrypts each field when it reaches their server.
"""
type core_apimessages_CreditCardTokenizedFields @join__type(graph: RQL) {
  encryptedCardNumber: String
  encryptedExpiryMonth: String
  encryptedExpiryYear: String
  encryptedSecurityCode: String
  _source: String
}

type core_apimessages_CreditCard_Brand @join__type(graph: RQL) {
  type: core_apimessages_CreditCard_Brand_Type
  """
  Readable brand name of type. Examples: AMEX is "American Express," MASTERCARD is "MasterCard"
  """
  name: String
  _source: String
}

type core_apimessages_CreditCard_Display @join__type(graph: RQL) {
  """
  Localized card summary. Example: "Visa ending in 1111"
  """
  summary: String
  expirationDate: String
  _source: String
}

type core_apimessages_CrossPlatformListingStatusRequest @join__type(graph: RQL) {
  listingId: String
  _source: String
}

type core_apimessages_CrossPlatformListingStatusResponse @join__type(graph: RQL) {
  status: core_apimessages_CrossPlatformListingStatusResponse_SessionStatus
  ttlSeconds: Int
  _source: String
}

type core_apimessages_CspRowQuery @join__type(graph: RQL) {
  rowTitle: String
  cspSlugs: [String]
  brandSlugs: [String]
  sort: String
  categoryUuids: [String]
  _source: String
}

type core_apimessages_CuratedSet @join__type(graph: RQL) {
  """curated_sets.id"""
  id: String
  title: String
  webLink: core_apimessages_Link
  slug: String
  setType: String
  _source: String
}

type core_apimessages_CuratedSetFeatureRequest @join__type(graph: RQL) {
  """curated_sets.id"""
  id: String
  """products.id"""
  productId: String
  _source: String
}

type core_apimessages_CuratedSetMembership @join__type(graph: RQL) {
  id: String
  curatedSetId: String
  productId: String
  _source: String
}

type core_apimessages_CuratedSetsForListing @join__type(graph: RQL) {
  """products.id"""
  id: String
  curatedSets: [core_apimessages_ListingCuratedSet]
  _source: String
}

type core_apimessages_CuratedSetsRequest @join__type(graph: RQL) {
  """curated_sets.id"""
  ids: [String]
  slugs: [String]
  _source: String
}

type core_apimessages_CuratedSetsResponse @join__type(graph: RQL) {
  curatedSets: [core_apimessages_CuratedSet]
  _source: String
}

type core_apimessages_CustomsInfo @join__type(graph: RQL) {
  signer: String
  certifiedAccuracy: Boolean
  orders: [core_apimessages_OrderCustoms]
  _source: String
}

type core_apimessages_DatadogError @join__type(graph: RQL) {
  key: String
  type: String
  content: String
  context: String
  timestamp: String
  _source: String
}

type core_apimessages_DeactivateTaxIdentificationRequest @join__type(graph: RQL) {
  id: String
  _source: String
}

type core_apimessages_DeactivateTaxIdentificationResponse @join__type(graph: RQL) {
  taxIdentification: core_apimessages_TaxIdentification
  shopId: String
  shop: MyShop
  _source: String
}

type core_apimessages_DeclineFeedbackRequest @join__type(graph: RQL) {
  orderUuid: String
  _source: String
}

type core_apimessages_DeclineFeedbackResponse @join__type(graph: RQL) {
  orderUuid: String
  _source: String
}

type core_apimessages_DeleteAdRequest @join__type(graph: RQL) {
  uuid: String
  _source: String
}

type core_apimessages_DeleteAdResponse @join__type(graph: RQL) {
  ad: core_apimessages_Ad
  _source: String
}

type core_apimessages_DeleteAutoOfferRequest @join__type(graph: RQL) {
  listingId: String
  _source: String
}

type core_apimessages_DeleteAutoOfferResponse @join__type(graph: RQL) {
  autoOffer: core_apimessages_AutoOffer
  _source: String
}

type core_apimessages_DeleteCartItemProtectionPlanRequest @join__type(graph: RQL) {
  cartItemUuid: String
  _source: String
}

type core_apimessages_DeleteCartItemProtectionPlanResponse @join__type(graph: RQL) {
  cartItemUuid: String
  _source: String
}

type core_apimessages_DeleteGearCollectionItemRequest @join__type(graph: RQL) {
  id: String
  _source: String
}

type core_apimessages_DeleteGearCollectionItemResponse @join__type(graph: RQL) {
  gearCollectionItem: core_apimessages_GearCollectionItem
  _source: String
}

type core_apimessages_DeleteMyCreditCardRequest @join__type(graph: RQL) {
  id: String
  _source: String
}

type core_apimessages_DeleteMyCreditCardResponse @join__type(graph: RQL) {
  """Deleted credit card ID"""
  id: String
  _source: String
}

type core_apimessages_DeleteMyFavoriteRequest @join__type(graph: RQL) {
  id: String
  _source: String
}

type core_apimessages_DeleteMyFavoriteResponse @join__type(graph: RQL) {
  errors: [core_apimessages_Error]
  favorite: core_apimessages_Favorite
  _source: String
}

type core_apimessages_DeleteMyFeedbackMessageRequest @join__type(graph: RQL) {
  id: String
  _source: String
}

type core_apimessages_DeleteMyFeedbackMessageResponse @join__type(graph: RQL) {
  id: String
  _source: String
}

type core_apimessages_DeleteMySaleMembershipRequest @join__type(graph: RQL) {
  listingId: String
  saleId: String
  _source: String
}

type core_apimessages_DeleteMySaleMembershipResponse @join__type(graph: RQL) {
  saleMembership: core_apimessages_ListingSaleMembership
  _source: String
}

type core_apimessages_DeleteOrderNotesRequest @join__type(graph: RQL) {
  orderNoteIds: [String]
  _source: String
}

type core_apimessages_DeleteRequest @join__type(graph: RQL) {
  """deprecated, use uuid"""
  id: String
  uuid: String
  _source: String
}

type core_apimessages_DeleteResponse @join__type(graph: RQL) {
  """deprecated, use uuid"""
  id: String
  uuid: String
  _source: String
}

type core_apimessages_DeleteUserShopPermissionRequest @join__type(graph: RQL) {
  userId: String
  _source: String
}

type core_apimessages_DeleteUserShopPermissionResponse @join__type(graph: RQL) {
  id: String
  _source: String
}

type core_apimessages_DelinkUserServiceRequest @join__type(graph: RQL) {
  provider: core_apimessages_UserService_Provider
  _source: String
}

type core_apimessages_DelinkUserServiceResponse @join__type(graph: RQL) {
  _: Boolean
  _source: String
}

type core_apimessages_DigitalListingSendDownloadEmailRequest @join__type(graph: RQL) {
  userId: String
  listingId: String
  _source: String
}

type core_apimessages_DigitalListingSendDownloadEmailResponse @join__type(graph: RQL) {
  success: Boolean
  _source: String
}

type core_apimessages_DraftListingDeleteRequest @join__type(graph: RQL) {
  listingId: String
  _source: String
}

type core_apimessages_DraftListingDeleteResponse @join__type(graph: RQL) {
  listingId: String
  _source: String
}

type core_apimessages_Error @join__type(graph: RQL) {
  message: String
  field: String
  context: String
  errorType: String
  _source: String
}

type core_apimessages_ErrorResponse @join__type(graph: RQL) {
  errors: [core_apimessages_Error]
  _source: String
}

type core_apimessages_EstimateNegotiationSalesTaxRequest @join__type(graph: RQL) {
  amountProduct: core_apimessages_MoneyMinorUnitsEntry
  amountShipping: core_apimessages_MoneyMinorUnitsEntry
  shippingAddressUuid: String
  _source: String
}

type core_apimessages_EstimateNegotiationSalesTaxResponse @join__type(graph: RQL) {
  amountTax: core_apimessages_Money
  _source: String
}

type core_apimessages_EstimateShippingResponse @join__type(graph: RQL) {
  estimatedShipping: core_apimessages_EstimatedShipping
  _source: String
}

type core_apimessages_EstimatedMonthlyPaymentsRequest @join__type(graph: RQL) {
  """products.id"""
  ids: [String]
  _source: String
}

type core_apimessages_EstimatedMonthlyPaymentsResponse @join__type(graph: RQL) {
  estimatedMonthlyPayments: [core_apimessages_EstimatedMonthlyPayment]
  _source: String
}

type core_apimessages_EstimatedNewListingPrice @join__type(graph: RQL) {
  id: String
  price: core_apimessages_Money
  _source: String
}

type core_apimessages_EstimatedShipping @join__type(graph: RQL) {
  description: String
  rates: [core_apimessages_ShippingRate]
  _source: String
}

type core_apimessages_EstimatedShippingRequest @join__type(graph: RQL) {
  weight: Float
  length: Float
  width: Float
  height: Float
  fromPostal: String
  metric: Boolean
  toCountrycode: String
  fromCountrycode: String
  _source: String
}

type core_apimessages_ExpeditedShippingAvailableSignal @join__type(graph: RQL) {
  translations: core_apimessages_SignalTranslation
  isValid: Boolean
  _source: String
}

type core_apimessages_ExperimentData @join__type(graph: RQL) {
  name: String
  group: String
  _source: String
}

type core_apimessages_ExperimentsResponse @join__type(graph: RQL) {
  experiments: [reverb_event_Experiment]
  _source: String
}

type core_apimessages_ExportSecondaryUserActivitiesRequest @join__type(graph: RQL) {
  _: Boolean
  _source: String
}

type core_apimessages_ExportSecondaryUserActivitiesResponse @join__type(graph: RQL) {
  enqueued: Boolean
  _source: String
}

type core_apimessages_ExpressSaleCheckout @join__type(graph: RQL) {
  checkoutId: String
  cspId: String
  status: core_apimessages_ExpressSaleCheckout_Status
  expressSaleItemBid: core_apimessages_CSPExpressSaleItemBid
  _source: String
}

type core_apimessages_ExpressSaleCheckoutShowRequest @join__type(graph: RQL) {
  checkoutId: String
  _source: String
}

type core_apimessages_ExpressSaleCheckoutShowResponse @join__type(graph: RQL) {
  expressSaleCheckout: core_apimessages_ExpressSaleCheckout
  _source: String
}

"""
  Favorite represents a row in the follows table (a link between a user and a saved search), and is a newer version of the Follow message.
It can also represent a row from the user_watch_products table (e.g. { id: 1, type: LISTING, favorited: true })
"""
type core_apimessages_Favorite @join__type(graph: RQL) {
  id: String
  title: String
  subtitle: String
  queryParams: String
  searchableType: reverb_feed_SearchableType
  searchableId: String
  feedEnabled: Boolean
  emailEnabled: Boolean
  favorited: Boolean
  link: core_apimessages_Link
  favoriteType: core_apimessages_FavoriteType
  shortSubtitle: String
  queryText: String
  images(input: Input_core_apimessages_ImagesRequest!): [core_apimessages_Image]
  listings(input: Input_reverb_search_ListingsSearchRequest!): [Listing]
  _source: String
}

type core_apimessages_FeedCustomizationResponse @join__type(graph: RQL) {
  articleFollows: [String]
  followGroups: [core_apimessages_FollowGroup]
  follows: [core_apimessages_Follow]
  _source: String
}

"""
  A FeedResult represents one entity that can be displayed in a feed grid/row/etc for the current user.
Listings are the only entity to be supported initially, and other types can be added if needed.
"""
type core_apimessages_FeedResult @join__type(graph: RQL) {
  entityType: core_apimessages_FeedResult_EntityType
  entityId: String
  """
    Source indicates whether the entity was returned because it directly matches
  a saved search, or because it was a recommendation from a direct match, or another reason.
  """
  source: core_apimessages_FeedResult_Source
  _source: String
}

type core_apimessages_FeedbackMessage @join__type(graph: RQL) {
  message: String
  id: String
  _source: String
}

type core_apimessages_FeedbackSummariesRequest @join__type(graph: RQL) {
  userIds: [String]
  ids: [String]
  uuids: [String]
  _source: String
}

type core_apimessages_FeedbackSummariesResponse @join__type(graph: RQL) {
  feedbackSummaries: [core_apimessages_FeedbackSummary]
  _source: String
}

type core_apimessages_FeedbacksRequest @join__type(graph: RQL) {
  offset: Int
  limit: Int
  userUuid: String
  type: core_apimessages_Feedback_Type
  _source: String
}

type core_apimessages_FinalizeAffirmCheckoutPaymentRequest @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
  """Affirm Checkout Token"""
  checkoutToken: String
  displayedAmountOwed: core_apimessages_MoneyMinorUnitsEntry
  """Native app URL param"""
  reverbApp: String
  _source: String
}

type core_apimessages_FinalizeAffirmCheckoutPaymentResponse @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
  checkout: Checkout
  _source: String
}

type core_apimessages_FinalizeCardCheckoutPaymentRequest @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
  """Required when selecting an existing vaulted card"""
  creditCardId: String
  """Required for guest checkout or when vaulting a new credit card"""
  creditCard: core_apimessages_FinalizeCardCheckoutPaymentRequest_CreditCardEntry
  displayedAmountOwed: core_apimessages_MoneyMinorUnitsEntry
  """Serialized JSON object"""
  browserInfoJson: String
  accertifyDeviceInfo: core_apimessages_AccertifyDeviceInfo
  _source: String
}

type core_apimessages_FinalizeCardCheckoutPaymentRequest_CreditCardEntry @join__type(graph: RQL) {
  tokenizedFields: core_apimessages_CreditCardTokenizedFields
  cardholderName: String
  address: core_apimessages_AddressEntry
  """amex, visa, etc."""
  brandType: String
  """Last 4 digits of the credit card number"""
  lastDigits: String
  cardBin: String
  _source: String
}

type core_apimessages_FinalizeCardCheckoutPaymentResponse @join__type(graph: RQL) {
  """checkout UUID"""
  id: String
  checkout: Checkout
  _source: String
}

type core_apimessages_FinalizePaypalCheckoutPaymentRequest @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
  displayedAmountOwed: core_apimessages_MoneyMinorUnitsEntry
  """Native app URL param"""
  reverbApp: String
  resultConfirmation: core_apimessages_FinalizePaypalCheckoutPaymentRequest_ResultConfirmation
  accertifyDeviceInfo: core_apimessages_AccertifyDeviceInfo
  _source: String
}

type core_apimessages_FinalizePaypalCheckoutPaymentResponse @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
  checkout: Checkout
  _source: String
}

type core_apimessages_FinalizeRedirectAuthCheckoutPaymentRequest @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
  """Payment processor result"""
  redirectResult: String
  """Required for native clients using Adyen Checkout v66 and below"""
  legacyResult: core_apimessages_FinalizeRedirectAuthCheckoutPaymentRequest_LegacyResult
  _source: String
}

type core_apimessages_FinalizeRedirectAuthCheckoutPaymentRequest_LegacyResult @join__type(graph: RQL) {
  paRes: String
  md: String
  _source: String
}

type core_apimessages_FinalizeRedirectAuthCheckoutPaymentResponse @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
  checkout: Checkout
  _source: String
}

type core_apimessages_FindAddressAutocompleteSuggestionsRequest @join__type(graph: RQL) {
  """loqate container id"""
  container: String
  text: String
  _source: String
}

type core_apimessages_FindAddressAutocompleteSuggestionsResponse @join__type(graph: RQL) {
  suggestions: [core_apimessages_FindAddressAutocompleteSuggestionsResponse_AutocompleteSuggestion]
  _source: String
}

type core_apimessages_FindAddressAutocompleteSuggestionsResponse_AutocompleteSuggestion @join__type(graph: RQL) {
  """loqate address id"""
  id: String
  text: String
  type: core_apimessages_FindAddressAutocompleteSuggestionsResponse_SuggestionType
  _source: String
}

type core_apimessages_FindFavoriteRequest @join__type(graph: RQL) {
  listingsSearchRequest: reverb_search_ListingsSearchRequest
  shopId: String
  shopSlug: String
  _source: String
}

type core_apimessages_FindFavoriteResponse @join__type(graph: RQL) {
  isFavorite: Boolean
  canFavorite: Boolean
  favorite: core_apimessages_Favorite
  _source: String
}

type core_apimessages_FindFollowResponse @join__type(graph: RQL) {
  following: Boolean
  followers: core_apimessages_Followers
  Links: core_apimessages_FollowLinks
  follow: core_apimessages_Follow
  display: String
  header: String
  savedSearchType: String
  subtitle: String
  title: String
  alert: core_apimessages_FollowAlert
  id: String
  queryParams: String
  followedSubcategories: [String]
  hidden: Boolean
  _source: String
}

type core_apimessages_FlagProductReviewRequest @join__type(graph: RQL) {
  productReviewId: String
  reason: core_apimessages_FlagProductReviewRequest_Reason
  _source: String
}

type core_apimessages_FlagProductReviewResponse @join__type(graph: RQL) {
  """Created Flag ID"""
  id: String
  _source: String
}

type core_apimessages_FlatRateShippingOption @join__type(graph: RQL) {
  carrier: String
  displayTitle: String
  displayName: String
  optionValue: String
  displayDimensions: String
  maximumPounds: Int
  displayPosition: Int
  _source: String
}

type core_apimessages_Follow @join__type(graph: RQL) {
  following: Boolean
  header: String
  savedSearchType: String
  subtitle: String
  title: String
  Links: core_apimessages_FollowLinks
  alert: core_apimessages_FollowAlert
  """follow.id"""
  id: String
  queryParams: String
  followedSubcategories: [String]
  _source: String
}

type core_apimessages_FollowAlert @join__type(graph: RQL) {
  type: String
  _source: String
}

type core_apimessages_FollowGroup @join__type(graph: RQL) {
  calloutLinkText: String
  description: String
  follows: [core_apimessages_Follow]
  title: String
  Links: core_apimessages_FollowGroupLinks
  _source: String
}

type core_apimessages_FollowGroupLinks @join__type(graph: RQL) {
  callout: core_apimessages_Link
  _source: String
}

type core_apimessages_FollowLinks @join__type(graph: RQL) {
  self: core_apimessages_Link
  alert: core_apimessages_Link
  remove: core_apimessages_Link
  search: core_apimessages_Link
  _source: String
}

type core_apimessages_FollowQueryParams @join__type(graph: RQL) {
  category: String
  categoryUuid: String
  condition: [String]
  countryOfOrigin: String
  """canonical_products.id"""
  cpIds: [Int]
  """curated_sets.id"""
  curatedSetId: Int
  """curated_searches.id"""
  curatedSearchId: Int
  currency: String
  decade: String
  finish: String
  handmade: String
  itemCity: String
  itemRegion: String
  itemCountry: String
  itemState: String
  make: [String]
  model: String
  priceMax: String
  priceMin: String
  productType: String
  productTypeUuid: String
  query: String
  yearMax: String
  yearMin: String
  """shops.id"""
  shopId: Int
  acceptsGiftCards: Boolean
  preferredSeller: Boolean
  listingType: String
  shipsTo: String
  acceptsPaymentPlans: Boolean
  freeShipping: Boolean
  personalProfile: String
  freeExpeditedShipping: Boolean
  zeroPercentFinancing: Boolean
  decades: [String]
  outlet: Boolean
  _source: String
}

type core_apimessages_Followers @join__type(graph: RQL) {
  count: Int
  display: String
  _source: String
}

type core_apimessages_FormSelectCategoriesRequest @join__type(graph: RQL) {
  entityId: String
  entityType: core_apimessages_FormSelectCategoriesRequest_FormSelectEntityType
  _source: String
}

type core_apimessages_FormSelectCategoriesResponse @join__type(graph: RQL) {
  categories: [core_apimessages_FormSelectCategory]
  _source: String
}

type core_apimessages_FormSelectCategory @join__type(graph: RQL) {
  uuid: String
  name: String
  subcategories: [core_apimessages_FormSelectCategory]
  _source: String
}

type core_apimessages_FreeExpeditedShippingSignal @join__type(graph: RQL) {
  translations: core_apimessages_SignalTranslation
  isValid: Boolean
  _source: String
}

type core_apimessages_FreeStandardShippingSignal @join__type(graph: RQL) {
  translations: core_apimessages_SignalTranslation
  freeShippingThresholdRequirementsMet: Boolean @deprecated
  isValid: Boolean
  _source: String
}

type core_apimessages_GearCollectionItem @join__type(graph: RQL) {
  """gear_collection_item.id"""
  id: String
  deleted: Boolean
  title: String
  make: String
  model: String
  finish: String
  year: String
  price: core_apimessages_Money
  description: String
  notes: String
  canonicalProductId: String
  ownerCost: core_apimessages_Money
  serialNumber: String
  created: Boolean
  updated: Boolean
  condition: core_apimessages_Condition
  tags: [core_apimessages_GearCollectionItemTag]
  hideListingPhotos: Boolean
  hideListingDescription: Boolean
  seedId: String
  seedType: core_apimessages_GearCollectionItem_SeedType
  subcategoryUuids: [String]
  state: core_apimessages_GearCollectionItem_State
  _source: String
}

type core_apimessages_GearCollectionItemEntry @join__type(graph: RQL) {
  """gear_collection_item.id"""
  id: String
  title: String
  make: String
  model: String
  finish: String
  year: String
  price: core_apimessages_Money
  description: String
  notes: String
  categoryUuids: [String]
  canonicalProductId: String
  seedId: String
  seedType: core_apimessages_GearCollectionItem_SeedType
  photos: [core_apimessages_ImageEntry]
  categoryRootUuid: String
  ownerCost: core_apimessages_Money
  serialNumber: String
  conditionSlug: String
  tags: [core_apimessages_GearCollectionItemTag]
  hideListingPhotos: Boolean
  hideListingDescription: Boolean
  quickCreateItemFromSeed: Boolean
  source: core_apimessages_GearCollectionItemEntry_Source
  _source: String
}

type core_apimessages_GearCollectionItemTag @join__type(graph: RQL) {
  id: String
  name: String
  _source: String
}

type core_apimessages_GearCollectionSettingResponse @join__type(graph: RQL) {
  id: String
  autoAddOrders: Boolean
  _source: String
}

type core_apimessages_GearCollectionSettingsResponse @join__type(graph: RQL) {
  id: String
  autoAddOrders: Boolean
  _source: String
}

type core_apimessages_GenerateAdminReportRequest @join__type(graph: RQL) {
  reportName: String
  startDate: String
  endDate: String
  _source: String
}

type core_apimessages_GenerateAdminReportResponse @join__type(graph: RQL) {
  reportEnqueued: Boolean
  _source: String
}

type core_apimessages_GetMyFavoriteSavedSearchesRequest @join__type(graph: RQL) {
  offset: Int
  limit: Int
  _source: String
}

type core_apimessages_GetMyFavoriteSavedSearchesResponse @join__type(graph: RQL) {
  favorites: [core_apimessages_Favorite]
  total: Int
  limit: Int
  offset: Int
  _source: String
}

"""copied from common.proto which is also used by data team"""
type core_apimessages_GoogleShoppingClick @join__type(graph: RQL) {
  listingId: String
  comparisonShoppingPageId: String
  """/ ISO8601"""
  timestamp: String
  origin: String
  """This field is different than the one in common.proto"""
  expiration: String
  _source: String
}

type core_apimessages_GreatValueSignal @join__type(graph: RQL) {
  translations: core_apimessages_SignalTranslation
  isValid: Boolean
  _source: String
}

type core_apimessages_GuestCheckoutUserEntry @join__type(graph: RQL) {
  firstName: String
  lastName: String
  email: String
  consentToAdData: Boolean
  consentToAdStorage: Boolean
  consentToAdPersonalization: Boolean
  consentToAnalyticsStorage: Boolean
  _source: String
}

type core_apimessages_GuestCheckoutVerifyShopperRequest @join__type(graph: RQL) {
  checkoutUuid: String
  checkoutId: String
  totalPrice: core_apimessages_Money
  results: core_apimessages_AdyenVerifyShopperResults
  cartItemAttributes: [core_apimessages_CartItemAttributes]
  _source: String
}

type core_apimessages_HomepageAdData @join__type(graph: RQL) {
  ad: core_apimessages_Ad
  adZones: [core_apimessages_AdZone]
  _source: String
}

type core_apimessages_HomepageComponent @join__type(graph: RQL) {
  componentType: core_apimessages_HomepageComponent_ComponentType
  title: String
  subtitle: String
  ctaUrl: String
  ctaText: String
  slug: String
  listings: [core_apimessages_ListingData]
  componentIdentifier: core_apimessages_HomepageComponent_ComponentIdentifier
  searches: [core_apimessages_SearchData]
  adComponent: core_apimessages_HomepageAdData
  _source: String
}

type core_apimessages_HomepageNotification @join__type(graph: RQL) {
  updateId: String
  type: String
  typeText: String
  iconColor: String
  descriptionText: String
  calloutText: String
  followText: String
  deadlineText: String
  iconUrl: String
  imageUrl: String
  ctaUrl: String
  id: String
  dismissed: Boolean
  typeColor: core_apimessages_NotificationColor
  _source: String
}

type core_apimessages_HomepageRequest @join__type(graph: RQL) {
  affinitySlugs: [String]
  adUserContext: core_apimessages_AdUserContext
  _source: String
}

type core_apimessages_HomepageResponse @join__type(graph: RQL) {
  components: [core_apimessages_HomepageComponent]
  _source: String
}

type core_apimessages_ImageEntry @join__type(graph: RQL) {
  id: String
  publicId: String
  version: String
  width: Int
  height: Int
  format: String
  resourceType: String
  originalFilename: String
  transformation: core_apimessages_ImageEntry_Transformation
  _source: String
}

type core_apimessages_ImageRequest @join__type(graph: RQL) {
  id: String
  uuid: String
  slug: String
  type: String
  transform: String
  scope: String
  limit: Int
  namedTransform: core_apimessages_NamedImageTransforms
  _source: String
}

type core_apimessages_ImagesRequest @join__type(graph: RQL) {
  type: String
  """postgres id for corresponding table denoted by 'type'"""
  ids: [String]
  count: Int
  transform: String
  scope: String
  uuids: [String]
  slugs: [String]
  namedTransform: core_apimessages_NamedImageTransforms
  _source: String
}

type core_apimessages_ImagesResponse @join__type(graph: RQL) {
  images: [core_apimessages_ItemImages]
  _source: String
}

type core_apimessages_InOtherCartsSignal @join__type(graph: RQL) {
  isValid: Boolean
  translations: core_apimessages_SignalTranslation
  _source: String
}

type core_apimessages_InformActThresholdStatus @join__type(graph: RQL) {
  id: String
  isCompliant: Boolean
  hasValidBankAccount: Boolean
  hasValidTaxId: Boolean
  hasCompletedSellerVerification: Boolean
  thresholdCrossedAt: Timestamp
  bankAccountVerifiedDate: Timestamp
  isPaypalOnly: Boolean
  _source: String
}

type core_apimessages_ItemImages @join__type(graph: RQL) {
  """either a uuid or id, depending on what's present in ImagesRequest"""
  id: String
  images: [core_apimessages_Image]
  _source: String
}

type core_apimessages_ItemSearchFilterPresets @join__type(graph: RQL) {
  """postgres id (polymorphic with 'collection_type')"""
  collectionId: String
  collectionType: String
  presets: [core_apimessages_SearchFilterPreset]
  collectionSlug: String
  _source: String
}

type core_apimessages_LayawayTerms @join__type(graph: RQL) {
  name: String
  percentDown: Int
  timePeriod: google_protobuf_Duration
  _source: String
}

type core_apimessages_Listing @join__type(graph: RQL) {
  """products.id"""
  id: String
  title: String
  merchandisingUuid: String
  price: core_apimessages_Money
  """shops.id"""
  shopId: String
  """users.id"""
  sellerId: String
  """users.uuid"""
  sellerUuid: String
  hasInventory: Boolean
  inventory: Int
  shopUuid: String
  """includes product_type.uuids"""
  categoryUuids: [String]
  state: String
  condition: core_apimessages_Condition
  slug: String
  listingType: core_apimessages_Listing_ListingType
  publishedAt: google_protobuf_Timestamp
  description: String
  merchandisingType: String
  countryOfOrigin: String
  finish: String
  make: String
  model: String
  """product_types.id"""
  productTypeId: String
  year: String
  """canonical_products.id"""
  canonicalProductId: String
  """postgres id (polymorphic with 'seed_type')"""
  seedId: String
  seedType: core_apimessages_Listing_SeedType
  sku: String
  stateDescription: String
  taxIncluded: Boolean
  priceGuideUuid: String
  cspUuid: String
  """auctions.uuid"""
  currentAuctionId: String
  salePrice: core_apimessages_Money @deprecated
  categoryRootUuid: String
  taxIncludedHint: String
  bumped: Boolean
  upc: String
  exclusiveChannel: String
  brandSlug: String
  soldAsIs: Boolean
  bumpEligible: Boolean
  propSixtyFiveWarning: String
  propSixtyFiveWarningImg: core_apimessages_Link
  maxBuyerQuantity: Int
  currency: String
  cspId: String
  """
  Total quantity that a buyer can set from a listing to a cart item. This value will be zero if the listing is not inventoried, or if an inventoried listing is out of stock.
  """
  allowedBuyerQuantity: Int
  sameDayShippingIneligible: Boolean
  overriddenAttributes: [String]
  combinedShippingParent: Boolean
  createdAt: google_protobuf_Timestamp
  subcategoryUuids: [String]
  usOutlet: Boolean
  offersEnabled: Boolean
  _source: String
}

type core_apimessages_ListingAutoOfferEligibility @join__type(graph: RQL) {
  isEligible: Boolean
  _source: String
}

type core_apimessages_ListingBuyerOfferEligibility @join__type(graph: RQL) {
  isEligible: Boolean
  _source: String
}

type core_apimessages_ListingCorrectionRequest @join__type(graph: RQL) {
  listingId: String
  message: String
  _source: String
}

type core_apimessages_ListingCorrectionResponse @join__type(graph: RQL) {
  _: Boolean
  _source: String
}

type core_apimessages_ListingCountsRequest @join__type(graph: RQL) {
  ids: [String]
  _source: String
}

type core_apimessages_ListingCountsResponse @join__type(graph: RQL) {
  listings: [core_apimessages_ListingCounts]
  _source: String
}

type core_apimessages_ListingCuratedSet @join__type(graph: RQL) {
  id: String
  slug: String
  uuid: String
  featuredInSet: Boolean
  name: String
  setType: String
  _source: String
}

type core_apimessages_ListingData @join__type(graph: RQL) {
  title: String
  condition: String
  price: String
  strikeThroughPrice: String
  discountDescription: String
  imageUrl: String
  ctaUrl: String
  isWatching: Boolean
  isInCart: Boolean
  eyebrow: core_apimessages_ListingData_Disruptor
  disruptor: core_apimessages_ListingData_Disruptor
  countryName: String
  id: String
  savingsText: String
  conditionIconUrl: String
  _source: String
}

"""For PUT/POST submissions"""
type core_apimessages_ListingEntry @join__type(graph: RQL) {
  id: String
  sku: String
  year: String
  countryOfOrigin: String
  seedId: String
  seedType: core_apimessages_Listing_SeedType
  categoryRootUuid: String
  categoryUuids: [String]
  localizedContents: [core_apimessages_LocalizedListingContent]
  handmade: Boolean
  traits: [core_apimessages_Trait]
  conditionSlug: String
  hasInventory: Boolean
  inventory: Int
  upc: String
  upcDoesNotApply: Boolean
  videoLinkUrl: String
  photos: [core_apimessages_ImageEntry]
  shippingProfileId: String
  offersLocalPickup: Boolean
  shippingRates: [core_apimessages_ShippingRates]
  carrierCalculatedPackage: core_apimessages_ShippingLabelPackage
  prefersReverbShippingLabel: Boolean
  price: core_apimessages_Money
  sellerCost: core_apimessages_Money
  soldAsIs: Boolean
  offersEnabled: Boolean
  sameDayShippingIneligible: Boolean
  preorderInfo: core_apimessages_PreorderInfoEntry
  taxExempt: Boolean
  scheduledPriceDrops: [core_apimessages_ScheduledPriceDropEntry]
  sellerReportedMap: core_apimessages_Money
  _source: String
}

type core_apimessages_ListingInCartCount @join__type(graph: RQL) {
  count: google_protobuf_Int32Value
  _source: String
}

type core_apimessages_ListingInUserCart @join__type(graph: RQL) {
  listingId: String
  inCart: Boolean
  _source: String
}

type core_apimessages_ListingPriceRecommendationsRequest @join__type(graph: RQL) {
  listingIds: [String]
  countryCode: String
  currency: String
  _source: String
}

type core_apimessages_ListingPriceRecommendationsResponse @join__type(graph: RQL) {
  priceRecommendations: [core_apimessages_PriceRecommendation]
  _source: String
}

type core_apimessages_ListingSale @join__type(graph: RQL) {
  sale: core_apimessages_Sale
  totalLiveListings: Int
  isListingInSale: Boolean
  isListingEligible: Boolean
  _source: String
}

type core_apimessages_ListingSales @join__type(graph: RQL) {
  reverbSales: [core_apimessages_ListingSale]
  sellerSales: [core_apimessages_ListingSale]
  _source: String
}

type core_apimessages_ListingSignals @join__type(graph: RQL) {
  id: String
  onSaleSignal: core_apimessages_OnSaleSignal
  paymentPlanSignal: core_apimessages_PaymentPlanSignal @deprecated
  priceDropSignal: core_apimessages_PriceDropSignal @deprecated
  lowStockSignal: core_apimessages_LowStockSignal
  predictedToSellSoonSignal: core_apimessages_PredictedToSellSoonSignal
  greatValueSignal: core_apimessages_GreatValueSignal
  sharedSignalData: core_apimessages_SharedSignalData
  returnPolicySignal: core_apimessages_ReturnPolicySignal
  buyWithConfidenceSignal: core_apimessages_BuyWithConfidenceSignal
  secureCheckoutSignal: core_apimessages_SecureCheckoutSignal
  availableNearbyForPickupSignal: core_apimessages_AvailableNearbyForPickupSignal
  expeditedShippingAvailableSignal: core_apimessages_ExpeditedShippingAvailableSignal
  freeExpeditedShippingSignal: core_apimessages_FreeExpeditedShippingSignal
  freeStandardShippingSignal: core_apimessages_FreeStandardShippingSignal
  newListingSignal: core_apimessages_NewListingSignal
  """deprecated"""
  shipsSoonSignal: core_apimessages_ShipsSoonSignal
  availableForPickupSignal: core_apimessages_AvailableForPickupSignal
  localPickupOnlySignal: core_apimessages_LocalPickupOnlySignal
  inOtherCartsSignal: core_apimessages_InOtherCartsSignal
  rareGearSignal: core_apimessages_RareGearSignal
  _source: String
}

type core_apimessages_ListingUserView @join__type(graph: RQL) {
  """True if the current user has recently viewed this item"""
  isRecentlyViewed: Boolean
  _source: String
}

type core_apimessages_ListingValidForPublish @join__type(graph: RQL) {
  isValid: Boolean
  errors: [core_apimessages_Error]
  _source: String
}

type core_apimessages_ListingsCuratedSetsRequest @join__type(graph: RQL) {
  ids: [String]
  curatedSetSlugs: [String]
  _source: String
}

type core_apimessages_ListingsCuratedSetsResponse @join__type(graph: RQL) {
  curatedSetsForListings: [core_apimessages_CuratedSetsForListing]
  _source: String
}

type core_apimessages_ListingsInUserCartRequest @join__type(graph: RQL) {
  """product.id"""
  listingIds: [String]
  _source: String
}

type core_apimessages_ListingsInUserCartResponse @join__type(graph: RQL) {
  listings: [core_apimessages_ListingInUserCart]
  _source: String
}

type core_apimessages_ListingsOrderStatsRequest @join__type(graph: RQL) {
  listingIds: [String]
  _source: String
}

type core_apimessages_ListingsOrderStatsResponse @join__type(graph: RQL) {
  orderStats: [core_apimessages_OrderStats]
  _source: String
}

type core_apimessages_ListingsPricingRequest @join__type(graph: RQL) {
  ids: [String]
  _source: String
}

type core_apimessages_ListingsPricingResponse @join__type(graph: RQL) {
  listings: [core_apimessages_ListingPricing]
  _source: String
}

type core_apimessages_ListingsRequest @join__type(graph: RQL) {
  Aid: String
  utmCompaign: String
  """products.id"""
  ids: [String]
  _source: String
}

type core_apimessages_ListingsResponse @join__type(graph: RQL) {
  listings: [core_apimessages_Listing]
  _source: String
}

type core_apimessages_ListingsSignalsRequest @join__type(graph: RQL) {
  ids: [String]
  _source: String
}

type core_apimessages_ListingsSignalsResponse @join__type(graph: RQL) {
  listingsSignals: [core_apimessages_ListingSignals]
  _source: String
}

type core_apimessages_ListingsSpecsRequest @join__type(graph: RQL) {
  ids: [String]
  _source: String
}

type core_apimessages_ListingsSpecsResponse @join__type(graph: RQL) {
  specs: [core_apimessages_ListingSpec]
  _source: String
}

type core_apimessages_ListingsValidForPublishRequest @join__type(graph: RQL) {
  listingIds: [String]
  _source: String
}

type core_apimessages_ListingsValidForPublishResponse @join__type(graph: RQL) {
  listingsValidForPublish: [core_apimessages_ListingValidForPublish]
  _source: String
}

type core_apimessages_LocalPickupOnlySignal @join__type(graph: RQL) {
  translations: core_apimessages_SignalTranslation
  isValid: Boolean
  _source: String
}

type core_apimessages_LocalizationSettings @join__type(graph: RQL) {
  locale: String
  currency: String
  shippingRegion: String
  _source: String
}

type core_apimessages_LoginMyPacklinkAccountRequest @join__type(graph: RQL) {
  email: String
  password: String
  countryCode: String
  _source: String
}

type core_apimessages_LoginMyPacklinkAccountResponse @join__type(graph: RQL) {
  shopId: String
  _source: String
}

type core_apimessages_LowStockSignal @join__type(graph: RQL) {
  isValid: Boolean
  translations: core_apimessages_SignalTranslation
  _source: String
}

type core_apimessages_MarkOrderAsReceivedRequest @join__type(graph: RQL) {
  orderId: String
  _source: String
}

type core_apimessages_MarkOrderAsReceivedResponse @join__type(graph: RQL) {
  orderId: String
  order: Order
  _source: String
}

type core_apimessages_MeResponse @join__type(graph: RQL) {
  """users.id"""
  id: String
  uuid: String
  shopUuid: String
  admin: Boolean
  status: core_apimessages_UserStatus
  shopId: String
  shopSlug: String
  requireOptIn: Boolean
  profileSlug: String
  """True when this user has a single orderBundle, otherwise false."""
  firstTimeBuyer: Boolean
  _source: String
}

"""
For POST/PUT API requests for major units, suitable for user text field input
"""
type core_apimessages_MoneyMajorUnitsEntry @join__type(graph: RQL) {
  amount: String
  currency: String
  _source: String
}

"""For POST/PUT API requests where minor units (cents) are known"""
type core_apimessages_MoneyMinorUnitsEntry @join__type(graph: RQL) {
  amountCents: Int
  currency: String
  _source: String
}

type core_apimessages_MosaicTile @join__type(graph: RQL) {
  id: String
  url: String
  imageTitle: String
  imageSubtitle: String
  imageUrl: String
  contentSponsorship: core_apimessages_ContentSponsorship
  position: core_apimessages_MosaicTilePosition
  _source: String
}

type core_apimessages_MosaicTilesResponse @join__type(graph: RQL) {
  mosaicTiles: [core_apimessages_MosaicTile]
  _source: String
}

"""duplicate of the Mparticle ProfileResponse defined in rql"""
type core_apimessages_MparticleProfileResponse @join__type(graph: RQL) {
  mpid: String
  topProductType: String
  topProductTypes: [String]
  topCategories: [String]
  topBrands: [String]
  recentlyViewedCsps: [String]
  averageOrderValue: Float
  totalListingsCreated: Int
  totalListingsSold: Int
  totalListingsDraft: Int
  totalListingsSuspended: Int
  totalListingsLive: Int
  cumulativeGmv: Float
  totalPurchases: Int
  buyerLabel: String
  sellerLabel: String
  totalFeedFollows: Int
  totalBuyerOffersCreated: Int
  totalBuyerOffersAccepted: Int
  sellerFeedbackRating: Float
  buyerFeedbackRating: Float
  mostRecentOrderDate: String
  firstOrderDate: String
  topProductTypeUuids: [String]
  topCategoryUuids: [String]
  topBrandCategories: [String]
  brandCategories: [String]
  topMostRecentProductTypes: [String]
  _source: String
}

type core_apimessages_MyAddressesRequest @join__type(graph: RQL) {
  addressType: core_apimessages_MyAddressType
  _source: String
}

type core_apimessages_MyAddressesResponse @join__type(graph: RQL) {
  addresses: [core_apimessages_Address]
  _source: String
}

type core_apimessages_MyAffirmCuratedSetMembershipRequest @join__type(graph: RQL) {
  productId: String
  _source: String
}

type core_apimessages_MyAvailableActionsIndexRequest @join__type(graph: RQL) {
  listingId: String
  _source: String
}

type core_apimessages_MyAvailableActionsIndexResponse @join__type(graph: RQL) {
  availableActions: [core_apimessages_AvailableAction]
  _source: String
}

type core_apimessages_MyBuyerCouponsRequest @join__type(graph: RQL) {
  context: core_apimessages_MyBuyerCouponsRequest_Context
  checkoutUuid: String
  shopSlug: String
  _source: String
}

type core_apimessages_MyCartItemBundlesIndexResponse @join__type(graph: RQL) {
  bundles: [core_apimessages_CartItemBundle]
  _source: String
}

type core_apimessages_MyCartItemsIndexResponse @join__type(graph: RQL) {
  cartItems: [core_apimessages_CartItem]
  _source: String
}

type core_apimessages_MyCreditCardsResponse @join__type(graph: RQL) {
  creditCards: [core_apimessages_CreditCard]
  _source: String
}

type core_apimessages_MyCuratedSetMembershipRequest @join__type(graph: RQL) {
  setType: core_apimessages_CuratedSet_SetType
  productId: String
  _source: String
}

type core_apimessages_MyCuratedSetMembershipResponse @join__type(graph: RQL) {
  curatedSetMembership: core_apimessages_CuratedSetMembership
  _source: String
}

type core_apimessages_MyDirectCheckoutProfileRequest @join__type(graph: RQL) {
  _: Boolean
  _source: String
}

type core_apimessages_MyDirectCheckoutProfileResponse @join__type(graph: RQL) {
  nameOnAccount: String
  maskedNameSummary: String
  bankName: String
  currency: String
  countryCode: String
  payoutMethod: String
  hasAcceptedReverbBankTerms: Boolean
  profileErrors: [String]
  plaidAccountId: String
  _source: String
}

type core_apimessages_MyFeedSearchRequest @join__type(graph: RQL) {
  """
    Optional listings search filters. The following fields are ignored:
  - limit/offset: filters are optional, but pagination is not optional. Use the top level request proto fields instead.
  - shipping_region_code: uses the `X-Shipping-Region` HTTP request header instead.
  - locale: uses the `Accept-Language` HTTP request header instead (which will default to English).
  - item_region: uses the `X-Item-Region` HTTP request header instead.
  - experiments: uses the `X-Experiments` HTTP request header instead.
  """
  listingsSearchRequest: reverb_search_ListingsSearchRequest
  limit: Int
  offset: Int
  _source: String
}

"""
  Similar to a `reverb.search.SearchResponse` message,
but instead of a `resultIds` field, it has `results`, which contains ids and metadata:
{
  "results": [{ "entityType": "LISTING", "entityId": "1", "source": "SAVED_SEARCH" }, ...],
  ...
}
"""
type core_apimessages_MyFeedSearchResponse @join__type(graph: RQL) {
  results: [core_apimessages_FeedResult]
  filters: [reverb_search_Filter]
  total: Int
  offset: Int
  limit: Int
  _source: String
}

type core_apimessages_MyFeedbackMessagesRequest @join__type(graph: RQL) {
  _: Boolean
  _source: String
}

type core_apimessages_MyFeedbackMessagesResponse @join__type(graph: RQL) {
  feedbackMessages: [core_apimessages_FeedbackMessage]
  _source: String
}

type core_apimessages_MyHomepageNotificationsRequest @join__type(graph: RQL) {
  limit: Int
  imageType: core_apimessages_IconImageType
  multiClientExperiments: [core_apimessages_ExperimentData]
  _source: String
}

type core_apimessages_MyHomepageNotificationsResponse @join__type(graph: RQL) {
  homepageNotifications: [core_apimessages_HomepageNotification]
  errors: [core_apimessages_Error]
  _source: String
}

type core_apimessages_MyMessage @join__type(graph: RQL) {
  id: String
  createdAt: Timestamp
  body: String
  read: Boolean
  conversationId: String
  _source: String
}

type core_apimessages_MyMessagesRequest @join__type(graph: RQL) {
  limit: Int
  unrepliedOnly: Boolean
  _source: String
}

type core_apimessages_MyMessagesResponse @join__type(graph: RQL) {
  messages: [core_apimessages_MyMessage]
  _source: String
}

type core_apimessages_MyPacklinkAccountStatusResponse @join__type(graph: RQL) {
  account: core_apimessages_PacklinkAccount
  _source: String
}

type core_apimessages_MyPayoutBalancesResponse @join__type(graph: RQL) {
  payoutBalances: [core_apimessages_Money]
  _source: String
}

type core_apimessages_MyReverbCreditsResponse @join__type(graph: RQL) {
  reverbCredits: [core_apimessages_Money]
  _source: String
}

type core_apimessages_MySalesResponse @join__type(graph: RQL) {
  reverbSales: [core_apimessages_Sale]
  sellerSales: [core_apimessages_Sale]
  _source: String
}

type core_apimessages_MyShippingProfile @join__type(graph: RQL) {
  id: String
  name: String
  categoryUuids: [String]
  localPickup: Boolean
  offersIncrementalRates: Boolean
  shippingRates: [core_apimessages_ShippingRates]
  _source: String
}

type core_apimessages_MyShopBadgesResponse @join__type(graph: RQL) {
  shopBadges: [core_apimessages_ShopBadge]
  _source: String
}

type core_apimessages_MyShopBumpStats @join__type(graph: RQL) {
  spent: core_apimessages_Money
  sales: core_apimessages_Money
  percentageSpent: Int
  views: Int
  _source: String
}

type core_apimessages_MyShopBumpStatsRequest @join__type(graph: RQL) {
  timePeriod: String
  _source: String
}

type core_apimessages_MyShopBumpStatsResponse @join__type(graph: RQL) {
  brandNew: core_apimessages_MyShopBumpStats
  used: core_apimessages_MyShopBumpStats
  _source: String
}

type core_apimessages_MyShopCampaign @join__type(graph: RQL, key: "_id") {
  _id: ID
  id: String
  active: Boolean
  code: String
  campaignType: core_apimessages_MyShopCampaign_CampaignType
  discountPercent: Int
  discountAmount: core_apimessages_Money
  minPurchaseAmount: core_apimessages_Money
  maxDiscountAmount: core_apimessages_Money
  unlimitedUse: Boolean
  applyToNewConditions: Boolean
  applyToUsedConditions: Boolean
  applyToBStockConditions: Boolean
  useRetroactiveSends: Boolean
  discountSummary: String
  totalCouponCount: Int
  redeemedCouponCount: Int
  excludedBrands: [Brand]
  excludedCategories: [Category]
  _source: String
}

"""For PUT/POST submissions"""
type core_apimessages_MyShopCampaignEntry @join__type(graph: RQL) {
  id: String
  active: Boolean
  code: String
  campaignType: core_apimessages_MyShopCampaign_CampaignType
  discountPercent: Int
  """in shop currency"""
  discountAmountInput: String
  """in shop currency"""
  minPurchaseAmountInput: String
  """in shop currency"""
  maxDiscountAmountInput: String
  unlimitedUse: Boolean
  applyToNewConditions: Boolean
  applyToUsedConditions: Boolean
  applyToBStockConditions: Boolean
  useRetroactiveSends: Boolean
  excludedBrandsSlugs: [String]
  excludedCategoryUuids: [String]
  _source: String
}

type core_apimessages_MyShopCampaignsResponse @join__type(graph: RQL) {
  shopCampaigns: [core_apimessages_MyShopCampaign]
  _source: String
}

type core_apimessages_MyShopComparisonStats @join__type(graph: RQL) {
  currentStats: core_apimessages_MyShopStats
  previousStats: core_apimessages_MyShopStats
  changeStats: core_apimessages_MyShopStats
  _source: String
}

type core_apimessages_MyShopEarningsRequest @join__type(graph: RQL) {
  timePeriod: String
  _source: String
}

type core_apimessages_MyShopEarningsResponse @join__type(graph: RQL) {
  ordersTotal: core_apimessages_Money
  accommodationsTotal: core_apimessages_Money
  _source: String
}

type core_apimessages_MyShopExportDac7OrderDataRequest @join__type(graph: RQL) {
  year: String
  _source: String
}

type core_apimessages_MyShopExportDac7OrderDataResponse @join__type(graph: RQL) {
  success: Boolean
  _source: String
}

type core_apimessages_MyShopOnboardingResponse @join__type(graph: RQL) {
  billingMethodStatus: core_apimessages_MyShopOnboardingResponse_BillingMethodStatus
  originCountryCode: String
  paypalSetupStatus: core_apimessages_MyShopOnboardingResponse_PaypalSetupStatus
  paymentMethod: core_apimessages_MyShopOnboardingResponse_PaymentMethod
  _source: String
}

type core_apimessages_MyShopOrderRefundStatsRequest @join__type(graph: RQL) {
  startDate: String
  endDate: String
  _source: String
}

type core_apimessages_MyShopOrderRefundStatsResponse @join__type(graph: RQL) {
  sellerInitiatedRefundCount: Int
  _source: String
}

type core_apimessages_MyShopPaypalProfileResponse @join__type(graph: RQL) {
  paypalProfile: core_apimessages_MyShopPaypalProfileResponse_PaypalProfile
  _source: String
}

type core_apimessages_MyShopPaypalProfileResponse_PaypalProfile @join__type(graph: RQL) {
  email: String
  _source: String
}

type core_apimessages_MyShopResponse @join__type(graph: RQL) {
  shop: core_apimessages_Shop
  _source: String
}

type core_apimessages_MyShopSalesChartData @join__type(graph: RQL) {
  labels: [String]
  series: [core_apimessages_MyShopSalesChartDataSet]
  currencySymbol: String
  salesInMoreThanOneCurrency: Boolean
  _source: String
}

type core_apimessages_MyShopSalesChartDataSet @join__type(graph: RQL) {
  dataSet: [Int]
  _source: String
}

type core_apimessages_MyShopShippingProfilesRequest @join__type(graph: RQL) {
  _: Boolean
  _source: String
}

type core_apimessages_MyShopShippingProfilesResponse @join__type(graph: RQL) {
  shippingProfiles: [core_apimessages_MyShippingProfile]
  _source: String
}

type core_apimessages_MyShopShippingRatesRequest @join__type(graph: RQL) {
  shippingProfileIds: [String]
  _source: String
}

type core_apimessages_MyShopShippingRatesResponse @join__type(graph: RQL) {
  shippingRatesForShippingProfiles: [core_apimessages_ShippingRatesForShippingProfile]
  _source: String
}

type core_apimessages_MyShopStats @join__type(graph: RQL) {
  messages: Int
  orders: Int
  offers: Int
  watchers: Int
  _source: String
}

type core_apimessages_MyShopStatsRequest @join__type(graph: RQL) {
  timePeriod: String
  _source: String
}

type core_apimessages_MyShopStatsResponse @join__type(graph: RQL) {
  salesChartData: core_apimessages_MyShopSalesChartData
  comparisonStats: core_apimessages_MyShopComparisonStats
  _source: String
}

type core_apimessages_MyUpdatesPromotion @join__type(graph: RQL) {
  id: String
  title: String
  subtitle: String
  url: core_apimessages_Link
  startsAt: Timestamp
  _source: String
}

type core_apimessages_MyUserServicesResponse @join__type(graph: RQL) {
  userServices: [core_apimessages_UserService]
  _source: String
}

type core_apimessages_Negotiation @join__type(graph: RQL) {
  """negotiations.id"""
  id: String
  """repeated Offer offers = 2;"""
  state: core_apimessages_NegotiationState
  buyerUuid: String
  sellerUuid: String
  expiresAt: google_protobuf_Timestamp
  orderUuids: [String]
  lastOffer: core_apimessages_Offer
  taxIncluded: Boolean
  taxIncludedHint: String
  """deprecated in favor of seller_shipping_warning"""
  buyerOutsideListingShippingRegions: Boolean @deprecated
  negotiationType: core_apimessages_NegotiationType
  sellerShippingWarning: String
  buyerWillPayImmediately: Boolean
  _source: String
}

type core_apimessages_NegotiationOffers @join__type(graph: RQL) {
  offers: [core_apimessages_Offer]
  _source: String
}

type core_apimessages_NegotiationsRequest @join__type(graph: RQL) {
  """negotiations.id"""
  ids: [String]
  _source: String
}

type core_apimessages_NegotiationsResponse @join__type(graph: RQL) {
  negotiations: [core_apimessages_Negotiation]
  _source: String
}

type core_apimessages_NegotiationsShippingLocationRequest @join__type(graph: RQL) {
  """negotiations.id"""
  ids: [String]
  _source: String
}

type core_apimessages_NegotiationsShippingLocationResponse @join__type(graph: RQL) {
  shippingLocations: [core_apimessages_Address]
  _source: String
}

type core_apimessages_NewListingSignal @join__type(graph: RQL) {
  translations: core_apimessages_SignalTranslation
  isValid: Boolean
  _source: String
}

type core_apimessages_NodeRequest @join__type(graph: RQL) {
  lookups: [core_apimessages_NodeRequest_Lookup]
  debug: Boolean
  _source: String
}

type core_apimessages_NodeRequest_Lookup @join__type(graph: RQL) {
  lid: String
  rel: String
  params: core_apimessages_NodeRequest_Lookup_Params
  _source: String
}

type core_apimessages_NodeRequest_Lookup_Params @join__type(graph: RQL) {
  """
  Node endpoints default to the field name that corresponds to its class name
  """
  images: core_apimessages_NodeRequest_Lookup_Params_Images
  sales: core_apimessages_NodeRequest_Lookup_Params_Sales
  shippingRates: core_apimessages_NodeRequest_Lookup_Params_ShippingRates
  listingsPricings: core_apimessages_NodeRequest_Lookup_Params_ListingsPricings
  truliooOnboardingRecords: core_apimessages_NodeRequest_Lookup_Params_TruliooOnboardingRecords
  productReviews: core_apimessages_NodeRequest_Lookup_Params_ProductReviews
  shopsCertifiedPreOwned: core_apimessages_NodeRequest_Lookup_Params_ShopsCertifiedPreOwned
  estimatedNewListingPrices: core_apimessages_NodeRequest_Lookup_Params_EstimatedNewListingPrices
  users: core_apimessages_NodeRequest_Lookup_Params_Users
  listingsCertifiedPreOwned: core_apimessages_NodeRequest_Lookup_Params_ListingsCertifiedPreOwned
  _source: String
}

type core_apimessages_NodeRequest_Lookup_Params_EstimatedNewListingPrices @join__type(graph: RQL) {
  currency: String
  _source: String
}

type core_apimessages_NodeRequest_Lookup_Params_Images @join__type(graph: RQL) {
  transform: core_apimessages_NamedImageTransforms
  scope: core_apimessages_Image_Scope
  limit: Int
  _source: String
}

type core_apimessages_NodeRequest_Lookup_Params_ListingsCertifiedPreOwned @join__type(graph: RQL) {
  imageType: core_apimessages_IconImageType
  _source: String
}

type core_apimessages_NodeRequest_Lookup_Params_ListingsPricings @join__type(graph: RQL) {
  ribbonPercent: String
  ruleOfOneHundred: Boolean
  _source: String
}

type core_apimessages_NodeRequest_Lookup_Params_ProductReviews @join__type(graph: RQL) {
  forCurrentUser: Boolean
  _source: String
}

type core_apimessages_NodeRequest_Lookup_Params_Sales @join__type(graph: RQL) {
  all: Boolean
  _source: String
}

type core_apimessages_NodeRequest_Lookup_Params_ShippingRates @join__type(graph: RQL) {
  inOriginalCurrency: Boolean
  _source: String
}

type core_apimessages_NodeRequest_Lookup_Params_ShopsCertifiedPreOwned @join__type(graph: RQL) {
  imageType: core_apimessages_IconImageType
  _source: String
}

type core_apimessages_NodeRequest_Lookup_Params_TruliooOnboardingRecords @join__type(graph: RQL) {
  recordType: core_apimessages_NodeRequest_Lookup_Params_TruliooOnboardingRecords_RecordType
  _source: String
}

type core_apimessages_NodeRequest_Lookup_Params_Users @join__type(graph: RQL) {
  fullname: Boolean
  _source: String
}

type core_apimessages_NodeResponse @join__type(graph: RQL) {
  results: [core_apimessages_NodeResponse_Result]
  _source: String
}

type core_apimessages_NodeResponse_Result @join__type(graph: RQL) {
  lookup: core_apimessages_NodeRequest_Lookup
  meta: core_apimessages_NodeResponse_Result_Meta
  """
  Node endpoints default to the field name that corresponds to its class name
  """
  listings: [core_apimessages_Listing]
  csps: [core_apimessages_CSP]
  images: [core_apimessages_Image]
  listingsPricings: [core_apimessages_ListingPricing]
  orders: [core_apimessages_Order]
  sales: [core_apimessages_Sale]
  curatedSets: [core_apimessages_CuratedSet]
  packlinkShipments: [core_apimessages_PacklinkShipment]
  shippingRates: [core_apimessages_ShippingRates]
  bumpRates: [core_apimessages_BumpRate]
  categories: [core_apimessages_NodesCategory]
  gearCollectionItems: [core_apimessages_GearCollectionItem]
  priceGuides: [core_apimessages_PriceGuide]
  cartItems: [core_apimessages_CartItem]
  adyenCheckoutPaymentMethods: [core_apimessages_AdyenCheckoutPaymentMethods]
  taxIdentifications: [core_apimessages_TaxIdentification]
  priceChanges: [core_apimessages_PriceChange]
  adCampaigns: [core_apimessages_AdCampaign]
  advertisers: [core_apimessages_Advertiser]
  adGroups: [core_apimessages_AdGroup]
  adGroupKeywords: [core_apimessages_AdGroupKeyword]
  ads: [core_apimessages_Ad]
  siteBanners: [core_apimessages_SiteBanner]
  shops: [core_apimessages_Shop]
  myUpdatesPromotions: [core_apimessages_MyUpdatesPromotion]
  adZones: [core_apimessages_AdZone]
  listingsSignals: [core_apimessages_ListingSignals]
  universalPromoCampaigns: [core_apimessages_UniversalPromoCampaign]
  shipmentPackages: [core_apimessages_ShippingLabelPackage]
  cspExpressSaleItemBids: [core_apimessages_CSPExpressSaleItemBid]
  orderBundles: [core_apimessages_OrderBundle]
  publicPriceRecords: [core_apimessages_PublicPriceRecord]
  nonUserExperiments: [core_apimessages_NonUserExperiment]
  users: [core_apimessages_User]
  addresses: [core_apimessages_Address]
  shopsConfigs: [core_apimessages_ShopConfig]
  productReviews: [core_apimessages_ProductReview]
  truliooOnboardingRecords: [core_apimessages_TruliooOnboardingRecord]
  listingsUserViews: [core_apimessages_ListingUserView]
  internationalTaxProfiles: [core_apimessages_InternationalTaxProfile]
  businessRegistrationNumbers: [core_apimessages_BusinessRegistrationNumber]
  listingsAutoOfferEligibilities: [core_apimessages_ListingAutoOfferEligibility]
  listingsSalesMemberships: [core_apimessages_ListingSalesMemberships]
  shopCampaignCoupons: [core_apimessages_ShopCampaignCoupon]
  browsePages: [core_apimessages_BrowsePage]
  informActThresholdStatuses: [core_apimessages_InformActThresholdStatus]
  listingsOfferBotRules: [core_apimessages_OfferBotRule]
  taxProfiles: [core_apimessages_TaxProfile]
  returnPolicies: [core_apimessages_ReturnPolicy]
  brands: [core_apimessages_Brand]
  listingsAffirmZeroPercentFinancingConfigurations: [core_apimessages_ListingAffirmZeroPercentFinancingConfiguration]
  listingsExpressPay: [core_apimessages_ListingExpressPay]
  productBreadcrumbs: [core_apimessages_ProductBreadcrumb]
  listingsBuyerOfferEligibilities: [core_apimessages_ListingBuyerOfferEligibility]
  userShopPermissions: [core_apimessages_UserShopPermission]
  shopsCertifiedPreOwned: [core_apimessages_ShopCertifiedPreOwned]
  canonicalProducts: [core_apimessages_CanonicalProduct]
  packageSizeSuggestions: [core_apimessages_PackageSizeSuggestion]
  estimatedNewListingPrices: [core_apimessages_EstimatedNewListingPrice]
  listingsProtectionPlanOptions: [core_apimessages_ProtectionPlanOptions]
  listingsCertifiedPreOwned: [core_apimessages_ListingCertifiedPreOwned]
  listingsDigitalDetails: [core_apimessages_ListingDigitalDetails]
  _source: String
}

type core_apimessages_NodeResponse_Result_Meta @join__type(graph: RQL) {
  total: Int
  _source: String
}

type core_apimessages_NodesCategory @join__type(graph: RQL) {
  """categories.uuid"""
  id: String
  name: String
  webLink: core_apimessages_Link
  cmsLink: core_apimessages_Link
  slug: String
  rootSlug: String
  cmsUrl: core_apimessages_Link
  root: Boolean
  leaf: Boolean
  _source: String
}

type core_apimessages_OfferAlert @join__type(graph: RQL) {
  level: core_apimessages_OfferAlert_Level
  title: String
  body: String
  _source: String
}

type core_apimessages_OfferBotRule @join__type(graph: RQL) {
  autoRejectPercentage: Int
  _source: String
}

type core_apimessages_OfferItem @join__type(graph: RQL) {
  """products.id"""
  listingId: String
  prices: core_apimessages_OfferPrices
  quantity: Int
  listing: Listing
  _source: String
}

type core_apimessages_OfferItemRequest @join__type(graph: RQL) {
  """products.id"""
  listingId: String
  price: core_apimessages_Money
  shippingPrice: core_apimessages_Money
  quantity: Int
  _source: String
}

type core_apimessages_OfferPrices @join__type(graph: RQL) {
  price: core_apimessages_ConvertedMoney
  shippingPrice: core_apimessages_ConvertedMoney
  totalPrice: core_apimessages_ConvertedMoney
  _source: String
}

type core_apimessages_OffersRequest @join__type(graph: RQL) {
  """negotiations.id"""
  ids: [String]
  _source: String
}

type core_apimessages_OffersResponse @join__type(graph: RQL) {
  offers: [core_apimessages_NegotiationOffers]
  _source: String
}

type core_apimessages_OnSaleSignal @join__type(graph: RQL) {
  isValid: Boolean
  translations: core_apimessages_SignalTranslation
  link: core_apimessages_SignalLink
  _source: String
}

type core_apimessages_Order @join__type(graph: RQL) {
  uuid: String
  buyerUuid: String
  shopUuid: String
  """products.id"""
  listingId: String
  status: core_apimessages_Order_Status
  shippingMethod: core_apimessages_ShippingMethod
  sellerUuid: String
  checkoutUuid: String
  """orders.id"""
  legacyOrderId: String
  createdAt: google_protobuf_Timestamp
  settlementAmountProductSubtotal: core_apimessages_Money
  quantity: Int
  """users.id"""
  legacyBuyerId: String
  paidAt: google_protobuf_Timestamp
  updatedAt: google_protobuf_Timestamp
  shippedAt: google_protobuf_Timestamp
  needsFeedbackForBuyer: Boolean
  needsFeedbackForSeller: Boolean
  orderType: String
  shippingProvider: String
  shippingCode: String
  amountProduct: core_apimessages_Money
  amountTotal: core_apimessages_Money
  amountTax: core_apimessages_Money
  amountShipping: core_apimessages_Money
  statusDescription: String
  webTrackingUrl: String
  shipmentStatus: String
  orderUrl: core_apimessages_Link
  mobileStatus: String
  carrierCalculatedShippingAmount: core_apimessages_Money
  shippingTaxed: Boolean
  paymentRequiredAt: google_protobuf_Timestamp
  protectionPlan: Boolean
  carrierCalculatedCarrier: String
  protectionPlanEligible: Boolean
  title: String
  _source: String
}

type core_apimessages_OrderBundle @join__type(graph: RQL) {
  amountTotal: core_apimessages_Money
  amountProductSubtotal: core_apimessages_Money
  amountShipping: core_apimessages_Money
  amountCredit: core_apimessages_Money
  amountTax: core_apimessages_Money
  bonusBucks: core_apimessages_Money
  paymentMethod: core_apimessages_Payment_PaymentMethod
  """order_bundles.checkout_uuid"""
  uuid: String
  localPickup: Boolean
  """order_bundles.id"""
  id: String
  orderType: String
  checkoutType: core_apimessages_Checkout_Type
  _source: String
}

type core_apimessages_OrderBundleShowResponse @join__type(graph: RQL) {
  orderBundle: core_apimessages_OrderBundle
  _source: String
}

type core_apimessages_OrderCustoms @join__type(graph: RQL) {
  uuid: String
  description: String
  countryOfOrigin: String
  declaredValue: core_apimessages_Money
  tariffNumber: String
  quantity: Int
  _source: String
}

type core_apimessages_OrderCustomsInfo @join__type(graph: RQL) {
  tariffNumber: String
  categoryName: String
  description: String
  countryOfOrigin: String
  _source: String
}

type core_apimessages_OrderFeedbacks @join__type(graph: RQL) {
  orderUuid: String
  feedbacks: [core_apimessages_Feedback]
  _source: String
}

type core_apimessages_OrderFeedbacksRequest @join__type(graph: RQL) {
  orderUuids: [String]
  orderIds: [String]
  _source: String
}

type core_apimessages_OrderFeedbacksResponse @join__type(graph: RQL) {
  orderFeedbacks: [core_apimessages_OrderFeedbacks]
  _source: String
}

type core_apimessages_OrderFlatRateShippingOptionsRequest @join__type(graph: RQL) {
  checkoutUuid: String
  orderUuid: String
  _source: String
}

type core_apimessages_OrderFlatRateShippingOptionsResponse @join__type(graph: RQL) {
  flatRateShippingOptions: [core_apimessages_FlatRateShippingOption]
  _source: String
}

type core_apimessages_OrderNote @join__type(graph: RQL) {
  """order_notes.id"""
  id: String
  body: String
  """orders.id"""
  orderId: String
  createdAt: google_protobuf_Timestamp
  _source: String
}

type core_apimessages_OrderNotes @join__type(graph: RQL) {
  notes: [core_apimessages_OrderNote]
  _source: String
}

type core_apimessages_OrderNotesIndexRequest @join__type(graph: RQL) {
  orderUuids: [String]
  orderIds: [String]
  _source: String
}

type core_apimessages_OrderNotesIndexResponse @join__type(graph: RQL) {
  orderNotes: [core_apimessages_OrderNotes]
  _source: String
}

"""
  This endpoint is not used with GRPC or with RQL, which is not recommended
Do not use this endpoint directly, instead query for order notes using RQL
"""
type core_apimessages_OrderNotesRequest @join__type(graph: RQL) {
  orderIds: [String]
  _source: String
}

type core_apimessages_OrderNotesResponse @join__type(graph: RQL) {
  orderNotes: [core_apimessages_OrderNote]
  _source: String
}

type core_apimessages_OrderPackingSlip @join__type(graph: RQL) {
  packingSlipWebUrl: String
  _source: String
}

type core_apimessages_OrderPayments @join__type(graph: RQL) {
  payments: [core_apimessages_Payment]
  _source: String
}

type core_apimessages_OrderPaymentsRequest @join__type(graph: RQL) {
  orderUuids: [String]
  orderIds: [String]
  _source: String
}

type core_apimessages_OrderPaymentsResponse @join__type(graph: RQL) {
  orderPayments: [core_apimessages_OrderPayments]
  _source: String
}

type core_apimessages_OrderProtectionPlanDetails @join__type(graph: RQL) {
  buyerEmail: String
  associatedProtectionPlanOrderId: String
  associatedCoveredProductOrderId: String
  activationLink: core_apimessages_Link
  _source: String
}

type core_apimessages_OrderRefundRequests @join__type(graph: RQL) {
  refundRequests: [core_apimessages_RefundRequest]
  _source: String
}

type core_apimessages_OrderRefunds @join__type(graph: RQL) {
  refundableState: core_apimessages_OrderRefunds_RefundableState
  refundRequests: [core_apimessages_RefundRequest]
  completedRefunds: [core_apimessages_Refund]
  _source: String
}

type core_apimessages_OrderRefundsRequest @join__type(graph: RQL) {
  orderUuids: [String]
  orderIds: [String]
  _source: String
}

type core_apimessages_OrderRefundsResponse @join__type(graph: RQL) {
  orderRefunds: [core_apimessages_OrderRefunds]
  _source: String
}

type core_apimessages_OrderShippingAddressesRequest @join__type(graph: RQL) {
  orderUuids: [String]
  orderIds: [String]
  _source: String
}

type core_apimessages_OrderShippingAddressesResponse @join__type(graph: RQL) {
  addresses: [core_apimessages_Address]
  _source: String
}

type core_apimessages_OrderShippingLabel @join__type(graph: RQL) {
  shippingLabelWebUrl: String
  purchaseShippingLabelWebUrl: String
  _source: String
}

type core_apimessages_OrderStats @join__type(graph: RQL) {
  listingId: String
  totalOrders: Int
  isViewable: Boolean
  _source: String
}

type core_apimessages_OrderVerifyShippingAddressRequest @join__type(graph: RQL) {
  checkoutUuid: String
  orderUuid: String
  _source: String
}

type core_apimessages_OrderVerifyShippingAddressResponse @join__type(graph: RQL) {
  address: core_apimessages_Address
  errorMessage: String
  verificationStatus: core_apimessages_AddressVerificationStatus
  isResidential: Boolean
  _source: String
}

type core_apimessages_OrderViewStatus @join__type(graph: RQL) {
  status: String
  description: String
  _source: String
}

type core_apimessages_OrdersAddressRequest @join__type(graph: RQL) {
  uuids: [String]
  addressType: String
  _source: String
}

type core_apimessages_OrdersAddressResponse @join__type(graph: RQL) {
  addresses: [core_apimessages_Address]
  _source: String
}

type core_apimessages_OrdersCustomsInfoRequest @join__type(graph: RQL) {
  uuids: [String]
  ids: [String]
  _source: String
}

type core_apimessages_OrdersCustomsInfoResponse @join__type(graph: RQL) {
  ordersCustomsInfo: [core_apimessages_OrderCustomsInfo]
  _source: String
}

type core_apimessages_OrdersRequest @join__type(graph: RQL) {
  uuids: [String]
  ids: [String]
  _source: String
}

type core_apimessages_OrdersResponse @join__type(graph: RQL) {
  orders: [core_apimessages_Order]
  _source: String
}

type core_apimessages_OtherBuyersWithListingInCartCountsRequest @join__type(graph: RQL) {
  """product.id"""
  ids: [String]
  _source: String
}

type core_apimessages_OtherBuyersWithListingInCartCountsResponse @join__type(graph: RQL) {
  listingInCartCount: [core_apimessages_ListingInCartCount]
  _source: String
}

type core_apimessages_PackageSizeSuggestion @join__type(graph: RQL) {
  id: String
  length: core_apimessages_Measurement
  width: core_apimessages_Measurement
  height: core_apimessages_Measurement
  weight: core_apimessages_Measurement
  _source: String
}

type core_apimessages_PacklinkAccount @join__type(graph: RQL) {
  id: String
  email: String
  status: core_apimessages_PacklinkAccount_Status
  _source: String
}

type core_apimessages_PacklinkPolicies @join__type(graph: RQL) {
  dataProcessing: Boolean
  marketingCalls: Boolean
  marketingEmails: Boolean
  termsAndConditions: Boolean
  _source: String
}

type core_apimessages_PacklinkShipment @join__type(graph: RQL) {
  id: String
  orderId: String
  packlinkAccountId: String
  reference: String
  status: core_apimessages_PacklinkShipment_Status
  _source: String
}

type core_apimessages_PayMyStatementRequest @join__type(graph: RQL) {
  statementId: String
  creditCardId: String
  payment: core_apimessages_MoneyMajorUnitsEntry
  _source: String
}

type core_apimessages_PayMyStatementResponse @join__type(graph: RQL) {
  statementId: String
  statementBalance: Int
  amountPaidCents: Int
  _source: String
}

type core_apimessages_Payment @join__type(graph: RQL) {
  paymentMethod: core_apimessages_Payment_PaymentMethod
  paymentStatus: core_apimessages_Payment_PaymentStatus
  amount: core_apimessages_Money
  _source: String
}

"""Card-shaped icon for a payment method"""
type core_apimessages_PaymentCardIcon @join__type(graph: RQL) {
  slug: String
  description: String
  url: String
  _source: String
}

type core_apimessages_PaymentMethods @join__type(graph: RQL) {
  """either shops.uuid or products.id"""
  itemId: String
  itemType: String
  acceptedPaymentMethods: [String]
  _source: String
}

type core_apimessages_PaymentPlanSignal @join__type(graph: RQL) {
  isValid: Boolean
  translations: core_apimessages_SignalTranslation
  _source: String
}

type core_apimessages_PaypalOnboardSellerRequest @join__type(graph: RQL) {
  _: Boolean
  _source: String
}

type core_apimessages_PaypalOnboardSellerResponse @join__type(graph: RQL) {
  """paypal_profiles.id"""
  id: String
  actionUrl: String
  _source: String
}

type core_apimessages_PredictedToSellSoonSignal @join__type(graph: RQL) {
  isValid: Boolean
  translations: core_apimessages_SignalTranslation
  _source: String
}

type core_apimessages_PreorderInfoEntry @join__type(graph: RQL) {
  timeType: core_apimessages_PreorderInfoEntry_TimeType
  leadTimeUnit: core_apimessages_PreorderInfoEntry_LeadTimeUnit
  shipDate: String
  leadTimeDays: Int
  _source: String
}

type core_apimessages_PreorderInfoRequest @join__type(graph: RQL) {
  listingIds: [String]
  _source: String
}

type core_apimessages_PreorderInfoResponse @join__type(graph: RQL) {
  preorderInfo: [core_apimessages_PreorderInfo]
  _source: String
}

type core_apimessages_PrepublishStatusResponse @join__type(graph: RQL) {
  nextStep: core_apimessages_PrepublishStatusResponse_PrepublishStatus
  nextSteps: [core_apimessages_PrepublishStatusResponse_PrepublishStatus]
  _source: String
}

type core_apimessages_PriceChange @join__type(graph: RQL) {
  id: String
  listingId: String
  previousPrice: core_apimessages_Money
  newPrice: core_apimessages_Money
  currentPriceDropPercent: Int
  totalPriceDropPercent: Int
  _source: String
}

type core_apimessages_PriceDropSignal @join__type(graph: RQL) {
  isValid: Boolean
  translations: core_apimessages_SignalTranslation
  _source: String
}

type core_apimessages_PriceGuide @join__type(graph: RQL) {
  """price_guides.id"""
  id: String
  title: String
  webLink: core_apimessages_Link
  priceLow: core_apimessages_Money
  priceHigh: core_apimessages_Money
  uuid: String
  _source: String
}

type core_apimessages_PriceRecommendation @join__type(graph: RQL) {
  canonicalProductId: String
  conditionUuid: String
  priceLow: core_apimessages_Money
  priceHigh: core_apimessages_Money
  priceMiddle: core_apimessages_Money
  priceLowThirtyDaysAgo: core_apimessages_Money
  priceHighThirtyDaysAgo: core_apimessages_Money
  priceMiddleThirtyDaysAgo: core_apimessages_Money
  countryCode: String
  comparisonShoppingPageId: String
  _source: String
}

type core_apimessages_PrimaryKey @join__type(graph: RQL) {
  type: core_apimessages_PrimaryKey_Type
  value: String
  _source: String
}

type core_apimessages_ProcessApprovedPaypalOrderRequest @join__type(graph: RQL) {
  """checkout UUID"""
  id: String
  _source: String
}

type core_apimessages_ProcessApprovedPaypalOrderResponse @join__type(graph: RQL) {
  """checkout UUID"""
  id: String
  checkout: Checkout
  _source: String
}

type core_apimessages_ProcessingFees @join__type(graph: RQL) {
  percent: String
  flatFee: core_apimessages_Money
  _source: String
}

type core_apimessages_ProductReview @join__type(graph: RQL) {
  id: String
  body: String
  createdAt: Timestamp
  title: String
  rating: Int
  voteCount: Int
  reviewer: core_apimessages_Reviewer
  verified: Boolean
  reported: Boolean
  isMyReview: Boolean
  voted: Boolean
  _source: String
}

type core_apimessages_ProductReviewVoteRequest @join__type(graph: RQL) {
  id: String
  _source: String
}

type core_apimessages_ProductReviewVoteResponse @join__type(graph: RQL) {
  id: String
  _source: String
}

type core_apimessages_PublicPriceRecord @join__type(graph: RQL) {
  uuid: String
  listingId: String
  createdAt: google_protobuf_Timestamp
  settlementAmountProductSubtotal: core_apimessages_Money
  orderType: String
  amountProduct: core_apimessages_Money
  amountTotal: core_apimessages_Money
  amountTax: core_apimessages_Money
  amountShipping: core_apimessages_Money
  condition: core_apimessages_Condition
  _source: String
}

type core_apimessages_PublishAllListingsResponse @join__type(graph: RQL) {
  enqueued: Boolean
  message: String
  prepublishStepRequired: core_apimessages_PublishAllListingsResponse_PrepublishStepRequired
  _source: String
}

type core_apimessages_PublishAllListingsResponse_PrepublishStepRequired @join__type(graph: RQL) {
  step: String
  _source: String
}

type core_apimessages_PurchaseShippingRateRequest @join__type(graph: RQL) {
  shipmentUuid: String
  rateUuid: String
  acceptedCarrierTerms: Boolean
  _source: String
}

type core_apimessages_PurchaseShippingRateResponse @join__type(graph: RQL) {
  errors: [core_apimessages_Error]
  _source: String
}

type core_apimessages_RareGearSignal @join__type(graph: RQL) {
  isValid: Boolean
  translations: core_apimessages_SignalTranslation
  _source: String
}

type core_apimessages_RecentSearchesResponse @join__type(graph: RQL) {
  queries: [String]
  _source: String
}

type core_apimessages_RecentlyViewedListingsRequest @join__type(graph: RQL) {
  limit: Int
  _source: String
}

type core_apimessages_RecentlyViewedListingsResponse @join__type(graph: RQL) {
  listingIds: [String]
  listings: [Listing]
  _source: String
}

type core_apimessages_Recommendation @join__type(graph: RQL) {
  id: String
  type: core_apimessages_Recommendation_RecommendationType
  _source: String
}

type core_apimessages_RecommendationsRequest @join__type(graph: RQL) {
  cpIds: [String]
  limit: Int
  multiClientExperiments: [core_apimessages_ExperimentData]
  listingIds: [String]
  _source: String
}

type core_apimessages_RecommendationsResponse @join__type(graph: RQL) {
  recommendations: [core_apimessages_Recommendation]
  recommendationEngineInputIds: [String]
  recommendationEngineOutputIds: [String]
  _source: String
}

type core_apimessages_RedeemPromotionalCodeRequest @join__type(graph: RQL) {
  token: String
  _source: String
}

type core_apimessages_RedeemPromotionalCodeResponse @join__type(graph: RQL) {
  message: String
  _source: String
}

type core_apimessages_ReferAFriend @join__type(graph: RQL) {
  shareUrl: String
  signUpBonus: core_apimessages_Money
  rewardAmount: core_apimessages_Money
  minOrderAmount: core_apimessages_Money
  _source: String
}

type core_apimessages_ReferAFriendResponse @join__type(graph: RQL) {
  referAFriend: core_apimessages_ReferAFriend
  _source: String
}

type core_apimessages_Refund @join__type(graph: RQL) {
  id: String
  amount: core_apimessages_ConvertedMoney
  createdAt: google_protobuf_Timestamp
  updatedAt: google_protobuf_Timestamp
  noteToBuyer: String
  buyerRefund: core_apimessages_BuyerRefund
  _source: String
}

type core_apimessages_RefundRequest @join__type(graph: RQL) {
  amount: core_apimessages_Money
  type: core_apimessages_RefundRequest_RefundType
  state: core_apimessages_RefundRequest_RefundState
  createdAt: google_protobuf_Timestamp
  updatedAt: google_protobuf_Timestamp
  id: String
  markItemReturnedWebUrl: String
  respondToRequestWebUrl: String
  _source: String
}

type core_apimessages_RegisterMyPacklinkAccountRequest @join__type(graph: RQL) {
  email: String
  password: String
  policies: core_apimessages_PacklinkPolicies
  _source: String
}

type core_apimessages_RegisterMyPacklinkAccountResponse @join__type(graph: RQL) {
  shopId: String
  _source: String
}

type core_apimessages_RequestAccountDeletionRequest @join__type(graph: RQL) {
  reason: String
  _source: String
}

type core_apimessages_RequestAccountDeletionResponse @join__type(graph: RQL) {
  uuid: String
  _source: String
}

type core_apimessages_RequestTaxFormDownloadRequest @join__type(graph: RQL) {
  taxFormId: String
  _source: String
}

type core_apimessages_RequestTaxFormDownloadResponse @join__type(graph: RQL) {
  taxFormDownload: core_apimessages_TaxFormDownload
  error: String
  _source: String
}

type core_apimessages_ReturnPolicySignal @join__type(graph: RQL) {
  isValid: Boolean
  translations: core_apimessages_SignalTranslation
  link: core_apimessages_SignalLink
  _source: String
}

type core_apimessages_ReverifyCreditCardRequest @join__type(graph: RQL) {
  creditCardId: String
  tokenizedFields: String
  _source: String
}

type core_apimessages_ReverifyCreditCardResponse @join__type(graph: RQL) {
  creditCard: core_apimessages_CreditCard
  _source: String
}

type core_apimessages_SaveMyPlaidAccountRequest @join__type(graph: RQL) {
  accountId: String
  publicToken: String
  verificationStatus: String
  countryCode: String
  _source: String
}

type core_apimessages_SaveMyPlaidAccountResponse @join__type(graph: RQL) {
  plaidAccountId: String
  _source: String
}

type core_apimessages_ScheduledPriceDropEntry @join__type(graph: RQL) {
  newPrice: core_apimessages_Money
  active: Boolean
  _source: String
}

type core_apimessages_SearchData @join__type(graph: RQL) {
  title: String
  queryParams: String
  imageUrl: String
  _source: String
}

type core_apimessages_SearchFilterPreset @join__type(graph: RQL) {
  """postgres id (polymorphic with 'collection_type')"""
  collectionId: String
  collectionType: String
  title: String
  url: String
  id: String
  image(transform: String): core_apimessages_Image
  _source: String
}

type core_apimessages_SearchFilterPresetsRequest @join__type(graph: RQL) {
  categoryUuids: [String]
  collectionType: core_apimessages_CollectionHeader_CollectionType
  """UUIDs"""
  collectionIds: [String]
  collectionSlugs: [String]
  _source: String
}

type core_apimessages_SearchFilterPresetsResponse @join__type(graph: RQL) {
  searchFilterPresets: [core_apimessages_ItemSearchFilterPresets]
  _source: String
}

type core_apimessages_SearchMetadataRequest @join__type(graph: RQL) {
  categorySlugs: [String]
  brandSlugs: [String]
  conditionSlugs: [String]
  curatedSetSlug: String
  shopSlug: String
  yearMin: String
  yearMax: String
  query: String
  searchUrlParams: String
  _source: String
}

type core_apimessages_SearchMetadataResponse @join__type(graph: RQL) {
  title: String
  _source: String
}

type core_apimessages_SecureCheckoutSignal @join__type(graph: RQL) {
  isValid: Boolean
  translations: core_apimessages_SignalTranslation
  _source: String
}

type core_apimessages_SeedListingRequest @join__type(graph: RQL) {
  seedId: String
  seedType: core_apimessages_Listing_SeedType
  _source: String
}

type core_apimessages_SeedListingResponse @join__type(graph: RQL) {
  listing: core_apimessages_SeededListing
  _source: String
}

type core_apimessages_SeededListing @join__type(graph: RQL) {
  make: String
  model: String
  brandSlug: String
  finish: String
  year: String
  countryOfOrigin: String
  title: String
  seedType: core_apimessages_Listing_SeedType
  seedId: String
  comparisonShoppingPageId: String
  canonicalProductId: String
  productTypeId: String
  categoryUuids: [String]
  categoryRootUuid: String
  subcategoryLeafUuids: [String]
  conditionSlug: String
  description: String
  handmade: Boolean
  soldAsIs: Boolean
  sellerPrice: core_apimessages_Money
  sellerCost: core_apimessages_Money
  shippingProfileId: String
  _source: String
}

type core_apimessages_SelectAddressAutocompleteSuggestionRequest @join__type(graph: RQL) {
  """loqate address id"""
  id: String
  _source: String
}

type core_apimessages_SelectAddressAutocompleteSuggestionResponse @join__type(graph: RQL) {
  suggestion: core_apimessages_Address
  _source: String
}

type core_apimessages_SelectCheckoutCreditCardRequest @join__type(graph: RQL) {
  """checkout UUID"""
  id: String
  creditCardId: String
  _source: String
}

type core_apimessages_SelectCheckoutCreditCardResponse @join__type(graph: RQL) {
  """checkout UUID"""
  id: String
  checkout: Checkout
  _source: String
}

type core_apimessages_SelectCheckoutPaymentMethodRequest @join__type(graph: RQL) {
  """checkout UUID"""
  id: String
  paymentMethod: core_apimessages_CheckoutPaymentMethod_Type
  _source: String
}

type core_apimessages_SelectCheckoutPaymentMethodResponse @join__type(graph: RQL) {
  """checkout UUID"""
  id: String
  checkout: Checkout
  _source: String
}

type core_apimessages_SellerBulkActionAsyncResponse @join__type(graph: RQL) {
  enqueued: Boolean
  message: String
  _source: String
}

type core_apimessages_SellerBulkActionResponse @join__type(graph: RQL) {
  responses: [core_apimessages_SellerListingBulkActionResponse]
  _source: String
}

type core_apimessages_SellerListing @join__type(graph: RQL) {
  sellerCost: core_apimessages_Money
  storageLocation: String
  sellerPrice: core_apimessages_Money
  handmade: Boolean
  upcDoesNotApply: Boolean
  localizedContents: [core_apimessages_LocalizedListingContent]
  shippingProfileId: String
  prefersReverbShippingLabel: Boolean
  taxExempt: Boolean
  scheduledPriceDrops: [core_apimessages_ScheduledPriceDrop]
  sellerReportedMap: core_apimessages_Money
  relistable: Boolean
  vatIncluded: Boolean
  vatIncludedHint: String
  _source: String
}

type core_apimessages_SellerListingBulkActionResponse @join__type(graph: RQL) {
  listingId: String
  success: Boolean
  errors: [core_apimessages_Error]
  _source: String
}

type core_apimessages_SellerListingsResponse @join__type(graph: RQL) {
  listings: [core_apimessages_SellerListing]
  _source: String
}

type core_apimessages_SellerOrder @join__type(graph: RQL) {
  uuid: String
  shippingLabel: core_apimessages_OrderShippingLabel
  packingSlip: core_apimessages_OrderPackingSlip
  taxResponsibleParty: core_apimessages_SellerOrder_TaxResponsibleParty
  orderViewStatus: core_apimessages_OrderViewStatus
  _source: String
}

type core_apimessages_SellerOrdersResponse @join__type(graph: RQL) {
  orders: [core_apimessages_SellerOrder]
  _source: String
}

type core_apimessages_SellerVerificationPolicyResponse @join__type(graph: RQL) {
  completedVerification: Boolean
  eligibleForInformAct: Boolean
  eligibleForSellerVerification: Boolean
  eligibleForSellerVerificationBackcast: Boolean
  eligibleForColdStorageSellerVerificationBypass: Boolean
  _source: String
}

type core_apimessages_SellingFees @join__type(graph: RQL) {
  minFee: core_apimessages_Money
  maxFee: core_apimessages_Money
  sellingFeePercent: String
  processingFees: core_apimessages_ProcessingFees
  _source: String
}

type core_apimessages_SellingFeesRequest @join__type(graph: RQL) {
  channel: core_apimessages_Channel
  _source: String
}

type core_apimessages_SellingFeesResponse @join__type(graph: RQL) {
  fees: core_apimessages_SellingFees
  _source: String
}

type core_apimessages_SetAccertifyTokensRequest @join__type(graph: RQL) {
  checkoutId: String
  accertifyDeviceInfo: core_apimessages_AccertifyDeviceInfo
  _source: String
}

type core_apimessages_SetAccertifyTokensResponse @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
  _source: String
}

type core_apimessages_SetupPaymentMethodsRequest @join__type(graph: RQL) {
  shopCurrency: String
  adyenDetails: core_apimessages_SetupPaymentMethodsRequestAdyenDetails
  paypalDetails: core_apimessages_SetupPaymentMethodsRequestPaypalDetails
  returnPolicyDetails: core_apimessages_ReturnPolicy
  creditCard: core_apimessages_BillingCreditCardEntry
  _source: String
}

type core_apimessages_SetupPaymentMethodsRequestAdyenDetails @join__type(graph: RQL) {
  legalEntity: core_apimessages_AdyenLegalEntity
  individualDetails: core_apimessages_SetupPaymentMethodsRequestIndividualAdyenDetails
  businessDetails: core_apimessages_SetupPaymentMethodsRequestBusinessAdyenDetails
  solePropDetails: core_apimessages_SetupPaymentMethodsRequestSolePropAdyenDetails
  _source: String
}

type core_apimessages_SetupPaymentMethodsRequestBusinessAdyenDetails @join__type(graph: RQL) {
  originCountryCode: String
  legalBusinessName: String
  _source: String
}

type core_apimessages_SetupPaymentMethodsRequestIndividualAdyenDetails @join__type(graph: RQL) {
  firstName: String
  lastName: String
  originCountryCode: String
  _source: String
}

type core_apimessages_SetupPaymentMethodsRequestPaypalDetails @join__type(graph: RQL) {
  email: String
  legalCountryCode: String
  _source: String
}

type core_apimessages_SetupPaymentMethodsRequestSolePropAdyenDetails @join__type(graph: RQL) {
  legalName: String
  originCountryCode: String
  _source: String
}

type core_apimessages_SetupPaymentMethodsResponse @join__type(graph: RQL) {
  errors: [core_apimessages_Error]
  _source: String
}

type core_apimessages_SharedSignalData @join__type(graph: RQL) {
  buyerPrice: core_apimessages_Money
  originalPrice: core_apimessages_Money
  sellerLocationDisplay: String
  _source: String
}

type core_apimessages_Shipment @join__type(graph: RQL) {
  toAddress: core_apimessages_Address
  fromAddress: core_apimessages_Address
  package: core_apimessages_ShippingLabelPackage
  shippingProtection: Boolean
  signatureRequired: Boolean
  mediaMailQualified: Boolean
  defaultPaymentMethod: core_apimessages_FeePaymentMethod
  carrierRates: [core_apimessages_CarrierRateGroup]
  shippingMethod: core_apimessages_ShippingMethod
  """shipments.uuid"""
  id: String
  orderUuids: [String]
  shippingProtectionPrice: core_apimessages_Money
  toAddressIsResidential: Boolean
  _source: String
}

type core_apimessages_ShipmentItem @join__type(graph: RQL) {
  """products.id"""
  productId: String
  declaredValue: core_apimessages_Money
  _source: String
}

type core_apimessages_ShipmentsRequest @join__type(graph: RQL) {
  shipmentUuids: [String]
  _source: String
}

type core_apimessages_ShipmentsResponse @join__type(graph: RQL) {
  shipments: [core_apimessages_Shipment]
  _source: String
}

type core_apimessages_ShippingLabelPackage @join__type(graph: RQL) {
  length: core_apimessages_Measurement
  height: core_apimessages_Measurement
  width: core_apimessages_Measurement
  weight: core_apimessages_Measurement
  predefinedPackage: String
  id: String
  reverbSuggested: Boolean @deprecated
  allowedCarriers: [String]
  packageSizeSuggestionId: String
  _source: String
}

type core_apimessages_ShippingPricesRequest @join__type(graph: RQL) {
  listingIds: [String]
  shippingRegionCode: String
  usePrimaryShippingAddress: Boolean
  returnAllShippingPrices: Boolean
  postalCode: String
  _source: String
}

type core_apimessages_ShippingPricesResponse @join__type(graph: RQL) {
  prices: [core_apimessages_Money]
  shippingPrices: [core_apimessages_ShippingPrices]
  _source: String
}

"""POST /shipping_protection"""
type core_apimessages_ShippingProtectionRequest @join__type(graph: RQL) {
  shipmentItems: [core_apimessages_ShipmentItem]
  fromCountryCode: String
  toCountryCode: String
  shipmentType: core_apimessages_Shipment_ShipmentType
  _source: String
}

"""POST /shipping_protection"""
type core_apimessages_ShippingProtectionResponse @join__type(graph: RQL) {
  price: core_apimessages_Money
  shippingProtectionStatus: core_apimessages_ShippingProtectionStatus
  signatureRequiredStatus: core_apimessages_SignatureRequiredStatus
  signatureRequiredCosts: [core_apimessages_SignatureRequiredCost]
  _source: String
}

type core_apimessages_ShippingRate @join__type(graph: RQL) {
  displayName: String
  price: core_apimessages_Money
  _source: String
}

type core_apimessages_ShippingRatesForShippingProfile @join__type(graph: RQL) {
  shippingProfileId: String
  shippingRates: [core_apimessages_ShippingRates]
  _source: String
}

type core_apimessages_ShipsSoonSignal @join__type(graph: RQL) {
  translations: core_apimessages_SignalTranslation
  isValid: Boolean
  _source: String
}

"""A public representation of a shop, accessible to all users."""
type core_apimessages_Shop @join__type(graph: RQL) {
  uuid: String
  name: String
  slug: String
  currency: String
  shopType: core_apimessages_Shop_ShopType
  paymentPolicy: String
  shippingPolicy: String
  id: String
  preferredSeller: Boolean
  quickShipper: Boolean
  quickResponder: Boolean
  userUuid: String
  onVacation: Boolean
  description: String
  userId: String
  website: String
  showSold: Boolean
  vatId: String
  """Unused by any client but needed in mobile apps RQL queries"""
  recentlyShipped: Boolean @deprecated
  quickShipperSpeed: core_apimessages_Shop_QuickShipperSpeed
  createdAt: Timestamp
  lowballOfferPercentage: Int
  manufacturersSafetyInformation: String
  _source: String
}

type core_apimessages_ShopAdyenBalancePlatformNotificationsIndexRequest @join__type(graph: RQL) {
  shopId: String
  eventTypes: [String]
  offset: String
  limit: String
  _source: String
}

type core_apimessages_ShopAdyenBalancePlatformNotificationsIndexResponse @join__type(graph: RQL) {
  notifications: [core_apimessages_AdyenBalancePlatformNotification]
  totalResults: String
  offset: String
  limit: String
  _source: String
}

type core_apimessages_ShopBadge @join__type(graph: RQL) {
  badgeType: String
  completedPercentage: Float
  """optional: we won't display requirements for the preferred seller badge"""
  requirements: [core_apimessages_ShopBadgeRequirement]
  _source: String
}

type core_apimessages_ShopBadgeRequirement @join__type(graph: RQL) {
  requirement: String
  completed: Boolean
  _source: String
}

"""A private representation of a shop, accessible to owners and admins."""
type core_apimessages_ShopConfig @join__type(graph: RQL) {
  defaultLocale: String
  currencySetting: String
  shippingRegionSettings: [core_apimessages_ShippingRegionSetting]
  sameDayShippingConfigured: Boolean
  listableConditions: [core_apimessages_Condition]
  offerPolicy: core_apimessages_ShopConfig_OfferPolicy
  shopSupportedLocaleCodes: [String]
  hasAccountRep: Boolean
  canCurateSales: Boolean
  isShopInEu: Boolean
  inclusiveVatPricingEnabled: Boolean
  acceptsAffirm: Boolean
  isShopInUk: Boolean
  firstTimeSeller: Boolean
  marketplaceTaxReportingCountryCode: String
  _source: String
}

type core_apimessages_ShopEntry @join__type(graph: RQL) {
  currency: String
  originCountryCode: String
  defaultLocale: String
  name: String
  address: core_apimessages_AddressEntry
  shopType: core_apimessages_Shop_ShopType
  _source: String
}

type core_apimessages_ShopReturnPoliciesRequest @join__type(graph: RQL) {
  shopUuids: [String]
  ids: [String]
  uuids: [String]
  slugs: [String]
  _source: String
}

type core_apimessages_ShopReturnPoliciesResponse @join__type(graph: RQL) {
  shopReturnPolicies: [core_apimessages_ShopReturnPolicy]
  _source: String
}

type core_apimessages_ShopReturnPolicy @join__type(graph: RQL) {
  shopUuid: String
  returnPolicy: core_apimessages_ReturnPolicy
  _source: String
}

type core_apimessages_ShopShippingProfiles @join__type(graph: RQL) {
  shopUuid: String
  shippingProfiles: [core_apimessages_ShippingProfile]
  _source: String
}

type core_apimessages_ShopShippingProfilesRequest @join__type(graph: RQL) {
  shopUuids: [String]
  ids: [String]
  uuids: [String]
  slugs: [String]
  _source: String
}

type core_apimessages_ShopShippingProfilesResponse @join__type(graph: RQL) {
  shopShippingProfiles: [core_apimessages_ShopShippingProfiles]
  _source: String
}

type core_apimessages_ShopTaxPolicies @join__type(graph: RQL) {
  shopUuid: String
  taxPolicies: [core_apimessages_ShopTaxPolicy]
  _source: String
}

type core_apimessages_Shop_OfferPolicy @join__type(graph: RQL) {
  autoRejectLowOffers: Boolean
  lowballPercentage: Int
  _source: String
}

type core_apimessages_ShopsRequest @join__type(graph: RQL) {
  uuids: [String]
  channel: core_apimessages_Channel
  slugs: [String]
  _source: String
}

type core_apimessages_ShopsResponse @join__type(graph: RQL) {
  shops: [core_apimessages_Shop]
  _source: String
}

type core_apimessages_ShowAdyenRegionRequest @join__type(graph: RQL) {
  _: Boolean
  _source: String
}

type core_apimessages_ShowAdyenRegionResponse @join__type(graph: RQL) {
  webRegion: String
  iosRegion: String
  androidRegion: String
  _source: String
}

type core_apimessages_SignalLink @join__type(graph: RQL) {
  url: String
  text: String
  _source: String
}

type core_apimessages_SignalTranslation @join__type(graph: RQL) {
  title: String
  subtitle: String
  tooltipText: String
  _source: String
}

type core_apimessages_SignatureRequiredCost @join__type(graph: RQL) {
  carrier: String
  amount: core_apimessages_Money
  _source: String
}

type core_apimessages_SiteBanner @join__type(graph: RQL) {
  id: String
  heading: String
  subheading: String
  callToAction: String
  url: core_apimessages_Link
  mobileUrl: core_apimessages_Link
  mobileWebUrl: core_apimessages_Link
  imageUrl: String
  """Deprecated"""
  webOnly: Boolean
  mobileImageUrl: String
  startsAt: Timestamp
  endsAt: Timestamp
  contentSponsorship: core_apimessages_ContentSponsorship
  downtime: Boolean
  hasPhotos: Boolean
  showOnMobile: Boolean
  showOnMyUpdates: Boolean
  _source: String
}

type core_apimessages_SiteBannerRequest @join__type(graph: RQL) {
  limit: Int
  visibilityScope: core_apimessages_SiteBannerRequest_VisibilityScope
  _source: String
}

type core_apimessages_SiteBannerResponse @join__type(graph: RQL) {
  siteBanner: core_apimessages_SiteBanner
  siteBanners: [core_apimessages_SiteBanner]
  _source: String
}

type core_apimessages_StartCheckoutForListingRequest @join__type(graph: RQL) {
  listingId: String
  paymentMethod: core_apimessages_CheckoutPaymentMethod_Type
  quantity: Int
  protectionPlanId: String
  _source: String
}

type core_apimessages_StartCheckoutForListingResponse @join__type(graph: RQL) {
  redirectUrl: String
  checkoutId: String
  checkout: Checkout
  _source: String
}

type core_apimessages_StartCheckoutRequest @join__type(graph: RQL) {
  checkoutBundlingId: String
  paymentMethodType: core_apimessages_CheckoutPaymentMethod_Type
  _source: String
}

type core_apimessages_StartCheckoutResponse @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
  checkout: Checkout
  _source: String
}

type core_apimessages_StartPaypalCheckoutRequest @join__type(graph: RQL) {
  checkoutBundlingId: String
  """Item quantity for Buy It Now checkout on item page"""
  quantity: Int
  paymentMethodType: core_apimessages_StartPaypalCheckoutRequest_PaymentMethodType
  protectionPlanId: String
  _source: String
}

type core_apimessages_StartPaypalCheckoutResponse @join__type(graph: RQL) {
  """checkout UUID"""
  id: String
  paypalOrderId: String
  redirectUrl: String
  checkout: Checkout
  _source: String
}

type core_apimessages_Storefront @join__type(graph: RQL) {
  channel: String
  slug: String
  name: String
  shopUuid: String
  id: String
  description: String
  shippingPolicy: String
  _source: String
}

type core_apimessages_StorefrontReturnPoliciesRequest @join__type(graph: RQL) {
  slugs: [String]
  _source: String
}

type core_apimessages_StorefrontReturnPoliciesResponse @join__type(graph: RQL) {
  returnPolicies: [core_apimessages_ReturnPolicy]
  _source: String
}

type core_apimessages_StorefrontsRequest @join__type(graph: RQL) {
  slugs: [String]
  _source: String
}

type core_apimessages_StorefrontsResponse @join__type(graph: RQL) {
  storefronts: [core_apimessages_Storefront]
  _source: String
}

type core_apimessages_TargetingContext @join__type(graph: RQL) {
  keywords: [String]
  categories: [String]
  _source: String
}

type core_apimessages_Tax1099kReportingThresholdSearchResult @join__type(graph: RQL) {
  id: String
  year: String
  region: String
  salesAmountCents: String
  transactionCount: String
  _source: String
}

type core_apimessages_TaxFormDownload @join__type(graph: RQL) {
  id: String
  status: core_apimessages_TaxFormDownload_Status
  url: String
  _source: String
}

type core_apimessages_TaxFormDownloadRequest @join__type(graph: RQL) {
  id: String
  _source: String
}

type core_apimessages_TaxFormDownloadResponse @join__type(graph: RQL) {
  taxFormDownload: core_apimessages_TaxFormDownload
  _source: String
}

type core_apimessages_TaxIdentification @join__type(graph: RQL) {
  id: String
  taxId: String
  status: core_apimessages_TaxIdentification_Status
  taxType: core_apimessages_TaxIdentification_TaxType
  countryCode: String
  active: Boolean
  _source: String
}

type core_apimessages_TaxIdentificationUpdate @join__type(graph: RQL) {
  id: String
  taxId: String
  countryCode: String
  _source: String
}

type core_apimessages_TaxPoliciesRequest @join__type(graph: RQL) {
  id: String
  uuid: String
  slug: String
  type: core_apimessages_TaxPoliciesRequest_TaxPoliciesType
  _source: String
}

type core_apimessages_ThirdPartyAdsAttributes @join__type(graph: RQL) {
  email: String
  firstName: String
  lastName: String
  orderBundleId: String
  billingAddress: String
  billingAddressExtended: String
  billingPostalCode: String
  shippingAddress: String
  shippingAddressExtended: String
  shippingPostalCode: String
  mobilePhoneNumber: String
  country: String
  language: String
  currency: String
  amount: String
  cartItemsJson: String
  paymentType: String
  _source: String
}

type core_apimessages_ThreeDSOneData @join__type(graph: RQL) {
  paReq: String
  md: String
  termUrl: String
  redirectUrl: String
  _source: String
}

type core_apimessages_TrackBumpInteractionRequest @join__type(graph: RQL) {
  bumpKey: core_apimessages_BumpKey
  listingId: String
  interactionType: arbiter_Interaction_InteractionType
  componentName: String
  _source: String
}

type core_apimessages_TrackBumpInteractionResponse @join__type(graph: RQL) {
  bumpKey: core_apimessages_BumpKey
  _source: String
}

type core_apimessages_TraitResponse @join__type(graph: RQL) {
  """traits.traitable_id (polymorphic foreign key, with 'type')"""
  traitableId: String
  traits: [core_apimessages_Trait]
  _source: String
}

type core_apimessages_TraitsRequest @join__type(graph: RQL) {
  """traits.traitable_id (polymorphic foreign key, with 'type')"""
  ids: [String]
  type: core_apimessages_TraitsRequest_TraitableType
  _source: String
}

type core_apimessages_TraitsResponse @join__type(graph: RQL) {
  traits: [core_apimessages_TraitResponse]
  _source: String
}

type core_apimessages_TruliooOnboarding @join__type(graph: RQL) {
  id: String
  verificationStatus: core_apimessages_TruliooOnboarding_VerificationStatus
  completedAt: Timestamp
  truliooOnboardingRecords(input: Input_core_apimessages_NodeRequest_Lookup_Params_TruliooOnboardingRecords): [core_apimessages_TruliooOnboardingRecord]
  _source: String
}

type core_apimessages_TruliooOnboardingRecord @join__type(graph: RQL) {
  id: String
  entityType: core_apimessages_TruliooOnboardingRecord_EntityType
  workflowStatus: core_apimessages_TruliooOnboardingRecord_Status
  clientId: String
  flowId: String
  isParent: Boolean
  email: String
  fullName: String
  pscOwners: [core_apimessages_TruliooOnboardingRecord]
  _source: String
}

type core_apimessages_TruliooOnboardingRecordResendPscEmailRequest @join__type(graph: RQL) {
  truliooOnboardingRecordId: String
  _source: String
}

type core_apimessages_TruliooOnboardingRecordResendPscEmailResponse @join__type(graph: RQL) {
  truliooOnboardingRecordId: String
  _source: String
}

type core_apimessages_TruliooOnboardingRecordResponse @join__type(graph: RQL) {
  truliooOnboardingRecord: core_apimessages_TruliooOnboardingRecord
  _source: String
}

type core_apimessages_TruliooOnboardingResponse @join__type(graph: RQL) {
  truliooOnboarding: core_apimessages_TruliooOnboarding
  errors: [core_apimessages_Error]
  _source: String
}

type core_apimessages_UndoDeleteMyFavoriteRequest @join__type(graph: RQL) {
  id: String
  type: core_apimessages_FavoriteType
  _source: String
}

type core_apimessages_UndoDeleteMyFavoriteResponse @join__type(graph: RQL) {
  errors: [core_apimessages_Error]
  favorite: core_apimessages_Favorite
  listing: Listing
  _source: String
}

type core_apimessages_UniversalPromoCampaign @join__type(graph: RQL) {
  id: String
  name: String
  code: String
  expiresAt: Timestamp
  marketingChannel: String
  newBuyer: Boolean
  redemptionLimit: Int
  hasRedemptionLimit: Boolean
  universalPromoCurrencies: [core_apimessages_UniversalPromoCurrency]
  categories: [core_apimessages_NodesCategory]
  lapsedBuyer: Boolean
  lapsedBuyerLastPurchaseDate: Timestamp
  _source: String
}

type core_apimessages_UniversalPromoCurrency @join__type(graph: RQL) {
  amount: core_apimessages_Money
  minPurchaseAmount: core_apimessages_Money
  _source: String
}

type core_apimessages_UpdateAdCampaignRequest @join__type(graph: RQL) {
  adCampaign: core_apimessages_AdCampaign
  _source: String
}

type core_apimessages_UpdateAdCampaignResponse @join__type(graph: RQL) {
  adCampaign: core_apimessages_AdCampaign
  _source: String
}

type core_apimessages_UpdateAdGroupKeywordsRequest @join__type(graph: RQL) {
  keywords: [String]
  adGroupUuid: String
  _source: String
}

type core_apimessages_UpdateAdGroupKeywordsResponse @join__type(graph: RQL) {
  adGroupKeywords: [core_apimessages_AdGroupKeyword]
  _source: String
}

type core_apimessages_UpdateAdGroupRequest @join__type(graph: RQL) {
  adGroup: core_apimessages_AdGroup
  _source: String
}

type core_apimessages_UpdateAdGroupResponse @join__type(graph: RQL) {
  adGroup: core_apimessages_AdGroup
  _source: String
}

type core_apimessages_UpdateAdRequest @join__type(graph: RQL) {
  ad: core_apimessages_Ad
  _source: String
}

type core_apimessages_UpdateAdResponse @join__type(graph: RQL) {
  ad: core_apimessages_Ad
  _source: String
}

type core_apimessages_UpdateAdZoneRequest @join__type(graph: RQL) {
  adZone: core_apimessages_AdZone
  _source: String
}

type core_apimessages_UpdateAdZoneResponse @join__type(graph: RQL) {
  adZone: core_apimessages_AdZone
  _source: String
}

type core_apimessages_UpdateAddressRequest @join__type(graph: RQL) {
  """addresses.uuid"""
  id: String
  addressType: core_apimessages_MyAddressType
  isPrimary: Boolean
  address: core_apimessages_AddressEntry
  uuid: String
  _source: String
}

type core_apimessages_UpdateAddressResponse @join__type(graph: RQL) {
  address: core_apimessages_Address
  suggestion: core_apimessages_Address
  _source: String
}

type core_apimessages_UpdateAdvertiserRequest @join__type(graph: RQL) {
  advertiser: core_apimessages_Advertiser
  _source: String
}

type core_apimessages_UpdateAdvertiserResponse @join__type(graph: RQL) {
  advertiser: core_apimessages_Advertiser
  _source: String
}

type core_apimessages_UpdateBillingMethodRequest @join__type(graph: RQL) {
  creditCard: core_apimessages_BillingCreditCardEntry
  browserInfo: String
  returnUrl: String
  origin: String
  """
  optional, to indicate that a new card is being added specifically for a partial payment
  """
  partialPayment: Boolean
  _source: String
}

type core_apimessages_UpdateBillingMethodResponse @join__type(graph: RQL) {
  errors: [core_apimessages_Error]
  creditCard: core_apimessages_CreditCard
  adyenPaymentResult: core_apimessages_AdyenPaymentResult
  billingMethodUuid: String
  me: rql_Me
  _source: String
}

type core_apimessages_UpdateCartItemProtectionPlanRequest @join__type(graph: RQL) {
  cartItemUuid: String
  protectionPlan: core_apimessages_ProtectionPlan
  _source: String
}

type core_apimessages_UpdateCartItemProtectionPlanResponse @join__type(graph: RQL) {
  cartItemUuid: String
  protectionPlan: core_apimessages_ProtectionPlan
  _source: String
}

type core_apimessages_UpdateCheckoutBillingAddressRequest @join__type(graph: RQL) {
  """checkout UUID"""
  id: String
  billingAddress: core_apimessages_AddressEntry
  accertifyDeviceInfo: core_apimessages_AccertifyDeviceInfo
  _source: String
}

type core_apimessages_UpdateCheckoutBillingAddressResponse @join__type(graph: RQL) {
  """checkout UUID"""
  id: String
  checkout: Checkout
  _source: String
}

type core_apimessages_UpdateCheckoutPaypalOrderRequest @join__type(graph: RQL) {
  """checkout UUID"""
  id: String
  paypalOrderId: String
  _source: String
}

type core_apimessages_UpdateCheckoutPaypalOrderResponse @join__type(graph: RQL) {
  """checkout UUID"""
  id: String
  _source: String
}

type core_apimessages_UpdateCrossPlatformListingSessionRequest @join__type(graph: RQL) {
  action: core_apimessages_UpdateCrossPlatformListingSessionRequest_Action
  listingId: String
  _source: String
}

type core_apimessages_UpdateCrossPlatformListingSessionResponse @join__type(graph: RQL) {
  _: Boolean
  _source: String
}

type core_apimessages_UpdateFeedbackRequest @join__type(graph: RQL) {
  orderUuid: String
  message: String
  rating: Int
  shippingSatisfactory: google_protobuf_BoolValue
  conditionSatisfactory: google_protobuf_BoolValue
  _source: String
}

type core_apimessages_UpdateFeedbackResponse @join__type(graph: RQL) {
  feedback: core_apimessages_Feedback
  _source: String
}

type core_apimessages_UpdateGearCollectionItemRequest @join__type(graph: RQL) {
  gearCollectionItemEntry: core_apimessages_GearCollectionItemEntry
  _source: String
}

type core_apimessages_UpdateGearCollectionItemResponse @join__type(graph: RQL) {
  gearCollectionItem: core_apimessages_GearCollectionItem
  _source: String
}

type core_apimessages_UpdateGearCollectionItemStateRequest @join__type(graph: RQL) {
  id: String
  newState: core_apimessages_GearCollectionItem_State
  _source: String
}

type core_apimessages_UpdateGearCollectionItemStateResponse @join__type(graph: RQL) {
  gearCollectionItem: core_apimessages_GearCollectionItem
  _source: String
}

type core_apimessages_UpdateInternationalTaxProfileRequest @join__type(graph: RQL) {
  name: String
  tinType: String
  tin: String
  dateOfBirth: String
  businessRegistrationNumber: String
  addressAttributes: core_apimessages_AddressEntry
  _source: String
}

type core_apimessages_UpdateInternationalTaxProfileResponse @join__type(graph: RQL) {
  internationalTaxProfile: core_apimessages_InternationalTaxProfile
  businessRegistrationNumber: core_apimessages_BusinessRegistrationNumber
  _source: String
}

type core_apimessages_UpdateListingRequest @join__type(graph: RQL) {
  listingEntry: core_apimessages_ListingEntry
  updateType: core_apimessages_UpdateListingRequest_UpdateType
  fields: [String]
  _source: String
}

type core_apimessages_UpdateListingResponse @join__type(graph: RQL) {
  listing: core_apimessages_Listing
  _source: String
}

type core_apimessages_UpdateListingStateRequest @join__type(graph: RQL) {
  productId: String
  newState: core_apimessages_ListingStateUpdate
  endingReason: String
  _source: String
}

type core_apimessages_UpdateListingStateResponse @join__type(graph: RQL) {
  newState: core_apimessages_ListingStateUpdate
  _source: String
}

type core_apimessages_UpdateMyCreditCardRequest @join__type(graph: RQL) {
  id: String
  creditCard: core_apimessages_UpdateMyCreditCardRequest_CreditCardEntry
  billingAddress: core_apimessages_AddressEntry
  _source: String
}

type core_apimessages_UpdateMyCreditCardRequest_CreditCardEntry @join__type(graph: RQL) {
  """Expiration month on card. Example: "2" for February"""
  expirationMonth: String
  """
  Full expiration year on card. Example: "2049"
  """
  expirationYear: String
  cardholderName: String
  primaryForCheckout: Boolean
  _source: String
}

type core_apimessages_UpdateMyCreditCardResponse @join__type(graph: RQL) {
  creditCard: core_apimessages_CreditCard
  _source: String
}

type core_apimessages_UpdateMyGearCollectionSettingsRequest @join__type(graph: RQL) {
  autoAddOrders: Boolean
  _source: String
}

type core_apimessages_UpdateMyGearCollectionSettingsResponse @join__type(graph: RQL) {
  gearCollectionSettings: core_apimessages_GearCollectionSettingsResponse
  _source: String
}

type core_apimessages_UpdateMyShippingProfile @join__type(graph: RQL) {
  id: String
  name: String
  categoryUuids: [String]
  localPickup: Boolean
  offersIncrementalRates: Boolean
  shippingRates: [core_apimessages_ShippingRates]
  _source: String
}

type core_apimessages_UpdateMyShopCampaignRequest @join__type(graph: RQL) {
  shopCampaignEntry: core_apimessages_MyShopCampaignEntry
  _source: String
}

type core_apimessages_UpdateMyShopCampaignResponse @join__type(graph: RQL) {
  shopCampaign: core_apimessages_MyShopCampaign
  _source: String
}

type core_apimessages_UpdateMyShopRequest @join__type(graph: RQL) {
  shop: core_apimessages_ShopEntry
  _source: String
}

type core_apimessages_UpdateMyShopResponse @join__type(graph: RQL) {
  errors: [core_apimessages_Error]
  shop: core_apimessages_Shop
  address: core_apimessages_Address
  _source: String
}

type core_apimessages_UpdateMyShopShippingProfilesRequest @join__type(graph: RQL) {
  shippingProfiles: [core_apimessages_UpdateMyShippingProfile]
  _source: String
}

type core_apimessages_UpdateMyShopShippingProfilesResponse @join__type(graph: RQL) {
  shippingProfiles: [core_apimessages_UpdateMyShippingProfile]
  _source: String
}

type core_apimessages_UpdateNegotiationRequest @join__type(graph: RQL) {
  """negotiations.id"""
  id: String
  message: String
  offerItems: [core_apimessages_OfferItemRequest]
  action: core_apimessages_NegotiationAction
  shippingAddressUuid: String
  creditCardId: String
  conditionallyAcceptedBySeller: Boolean
  _source: String
}

type core_apimessages_UpdateNegotiationResponse @join__type(graph: RQL) {
  negotiation: core_apimessages_Negotiation
  _source: String
}

type core_apimessages_UpdateProductReviewRequest @join__type(graph: RQL) {
  rating: Int
  body: String
  title: String
  comparisonShoppingPageId: String
  _source: String
}

type core_apimessages_UpdateProductReviewResponse @join__type(graph: RQL) {
  id: String
  _source: String
}

type core_apimessages_UpdateReturnPolicyRequest @join__type(graph: RQL) {
  newReturnWindowDays: Int
  usedReturnWindowDays: Int
  restockingFeePercent: Int
  specialConditions: String
  _source: String
}

type core_apimessages_UpdateReturnPolicyResponse @join__type(graph: RQL) {
  errors: [core_apimessages_Error]
  returnPolicy: core_apimessages_ReturnPolicy
  _source: String
}

type core_apimessages_UpdateTaxIdentificationRequest @join__type(graph: RQL) {
  taxIdentification: core_apimessages_TaxIdentificationUpdate
  _source: String
}

type core_apimessages_UpdateTaxIdentificationResponse @join__type(graph: RQL) {
  taxIdentification: core_apimessages_TaxIdentification
  shopId: String
  shop: MyShop
  _source: String
}

type core_apimessages_UpdateUniversalPromoCampaignRequest @join__type(graph: RQL) {
  universalPromoCampaign: core_apimessages_UniversalPromoCampaign
  _source: String
}

type core_apimessages_UpdateUniversalPromoCampaignResponse @join__type(graph: RQL) {
  universalPromoCampaign: core_apimessages_UniversalPromoCampaign
  _source: String
}

type core_apimessages_UpdateUserShopPermissionRequest @join__type(graph: RQL) {
  userId: String
  permissionLevel: core_apimessages_UserShopPermission_PermissionLevel
  _source: String
}

"""
  UpsertMyFavoriteRequest field spec:
  - query_params should be used when favoriting a filtered query, a CSP (can include filters), Shop saved searches, etc.
  - shop_id should be used when favoriting a shop
We could have reused query_params to contain shop_id (e.g. "shop_id=1"), but doing seems
burdensome/possibly confusing for clients. So we are opting to keep this request proto explicit,
aware that as we add more types to Favorite (articles warrants article_id field), this proto will
grow in width.
"""
type core_apimessages_UpsertMyFavoriteRequest @join__type(graph: RQL) {
  feedEnabled: Boolean
  emailEnabled: Boolean
  shopId: Int
  queryParams: String
  _source: String
}

type core_apimessages_UpsertMyFavoriteResponse @join__type(graph: RQL) {
  errors: [core_apimessages_Error]
  favorite: core_apimessages_Favorite
  _source: String
}

type core_apimessages_User @join__type(graph: RQL, key: "_id") {
  _id: ID
  uuid: String
  name: String
  shopUuid: String
  """users.id"""
  id: String
  firstName: String
  shortname: String
  _source: String
}

type core_apimessages_UserBadge @join__type(graph: RQL) {
  count: Int
  displayText: String
  Links: core_apimessages_UserBadgeLinks @deprecated
  badgeLinks: core_apimessages_UserBadgeLinks
  _source: String
}

type core_apimessages_UserBadgeLinks @join__type(graph: RQL) {
  web: core_apimessages_Link
  _source: String
}

type core_apimessages_UserNotification @join__type(graph: RQL) {
  notificationType: core_apimessages_UserNotificationType
  title: String
  description: String
  notificationLinks: core_apimessages_UserNotificationLinks
  key: core_apimessages_UserNotification_UserNotificationKey
  hidden: Boolean
  _source: String
}

type core_apimessages_UserNotificationLinks @join__type(graph: RQL) {
  web: core_apimessages_Link
  _source: String
}

type core_apimessages_UserSearchResult @join__type(graph: RQL) {
  id: String
  email: String
  shopId: String
  shopName: String
  fullName: String
  _source: String
}

type core_apimessages_UserService @join__type(graph: RQL) {
  """internal id"""
  id: String
  """The provider's user email, not Reverb's"""
  email: String
  provider: core_apimessages_UserService_Provider
  _source: String
}

type core_apimessages_UserShopPermission @join__type(graph: RQL) {
  id: String
  userId: String
  email: String
  permissionLevel: core_apimessages_UserShopPermission_PermissionLevel
  _source: String
}

type core_apimessages_UserWatchesRequest @join__type(graph: RQL) {
  listingIds: [String]
  offset: Int
  limit: Int
  channel: core_apimessages_Channel
  listingsState: core_apimessages_UserWatchesRequest_ListingState
  profileSlug: String
  _source: String
}

type core_apimessages_UsersRequest @join__type(graph: RQL) {
  uuids: [String]
  fullname: Boolean
  _source: String
}

type core_apimessages_UsersResponse @join__type(graph: RQL) {
  users: [core_apimessages_User]
  _source: String
}

type core_apimessages_VerifyPromotionalCodeRequest @join__type(graph: RQL) {
  token: String
  _source: String
}

type core_apimessages_VerifyPromotionalCodeResponse @join__type(graph: RQL) {
  success: Boolean
  message: String
  _source: String
}

type core_apimessages_VideosRequest @join__type(graph: RQL) {
  type: core_apimessages_VideosRequest_VideolinkableType
  """(products|shops).id"""
  ids: [String]
  uuids: [String]
  slugs: [String]
  _source: String
}

type core_apimessages_VideosResponse @join__type(graph: RQL) {
  videos: [core_apimessages_Video]
  _source: String
}

type core_apimessages_WatchResponse @join__type(graph: RQL) {
  listingId: String
  watching: Boolean
  _source: String
}

type core_apimessages_WatchesCreateRequest @join__type(graph: RQL) {
  listingId: String
  channel: core_apimessages_Channel
  bumpKey: core_apimessages_BumpKey
  _source: String
}

type core_apimessages_WatchesDeleteRequest @join__type(graph: RQL) {
  listingId: String
  _source: String
}

type core_apimessages_WatchesRequest @join__type(graph: RQL) {
  listingIds: [String]
  offset: Int
  limit: Int
  channel: core_apimessages_Channel
  listingsState: core_apimessages_WatchesRequest_ListingState
  _source: String
}

type core_apimessages_WatchesResponse @join__type(graph: RQL) {
  watches: [core_apimessages_WatchResponse]
  offset: Int
  limit: Int
  total: Int
  _source: String
}

"""A custom pattern is used for defining custom HTTP verb."""
type google_api_CustomHttpPattern @join__type(graph: RQL) {
  """The name of this custom HTTP verb."""
  kind: String
  """The path matched by this custom verb."""
  path: String
  _source: String
}

"""
  Defines the HTTP configuration for an API service. It contains a list of
[HttpRule][google.api.HttpRule], each specifying the mapping of an RPC method
to one or more HTTP REST API methods.
"""
type google_api_Http @join__type(graph: RQL) {
  """
    A list of HTTP configuration rules that apply to individual API methods.
  
  **NOTE:** All service configuration rules follow "last one wins" order.
  """
  rules: [google_api_HttpRule]
  """
    When set to true, URL path parmeters will be fully URI-decoded except in
  cases of single segment matches in reserved expansion, where "%2F" will be
  left encoded.
  
  The default behavior is to not decode RFC 6570 reserved characters in multi
  segment matches.
  """
  fullyDecodeReservedExpansion: Boolean
  _source: String
}

"""
  `HttpRule` defines the mapping of an RPC method to one or more HTTP
REST API methods. The mapping specifies how different portions of the RPC
request message are mapped to URL path, URL query parameters, and
HTTP request body. The mapping is typically specified as an
`google.api.http` annotation on the RPC method,
see "google/api/annotations.proto" for details.

The mapping consists of a field specifying the path template and
method kind.  The path template can refer to fields in the request
message, as in the example below which describes a REST GET
operation on a resource collection of messages:


    service Messaging {
      rpc GetMessage(GetMessageRequest) returns (Message) {
        option (google.api.http).get = "/v1/messages/{message_id}/{sub.subfield}";
      }
    }
    message GetMessageRequest {
      message SubMessage {
        string subfield = 1;
      }
      string message_id = 1; // mapped to the URL
      SubMessage sub = 2;    // `sub.subfield` is url-mapped
    }
    message Message {
      string text = 1; // content of the resource
    }

The same http annotation can alternatively be expressed inside the
`GRPC API Configuration` YAML file.

    http:
      rules:
        - selector: <proto_package_name>.Messaging.GetMessage
          get: /v1/messages/{message_id}/{sub.subfield}

This definition enables an automatic, bidrectional mapping of HTTP
JSON to RPC. Example:

HTTP | RPC
-----|-----
`GET /v1/messages/123456/foo`  | `GetMessage(message_id: "123456" sub: SubMessage(subfield: "foo"))`

In general, not only fields but also field paths can be referenced
from a path pattern. Fields mapped to the path pattern cannot be
repeated and must have a primitive (non-message) type.

Any fields in the request message which are not bound by the path
pattern automatically become (optional) HTTP query
parameters. Assume the following definition of the request message:


    service Messaging {
      rpc GetMessage(GetMessageRequest) returns (Message) {
        option (google.api.http).get = "/v1/messages/{message_id}";
      }
    }
    message GetMessageRequest {
      message SubMessage {
        string subfield = 1;
      }
      string message_id = 1; // mapped to the URL
      int64 revision = 2;    // becomes a parameter
      SubMessage sub = 3;    // `sub.subfield` becomes a parameter
    }


This enables a HTTP JSON to RPC mapping as below:

HTTP | RPC
-----|-----
`GET /v1/messages/123456?revision=2&sub.subfield=foo` | `GetMessage(message_id: "123456" revision: 2 sub: SubMessage(subfield: "foo"))`

Note that fields which are mapped to HTTP parameters must have a
primitive type or a repeated primitive type. Message types are not
allowed. In the case of a repeated type, the parameter can be
repeated in the URL, as in `...?param=A&param=B`.

For HTTP method kinds which allow a request body, the `body` field
specifies the mapping. Consider a REST update method on the
message resource collection:


    service Messaging {
      rpc UpdateMessage(UpdateMessageRequest) returns (Message) {
        option (google.api.http) = {
          put: "/v1/messages/{message_id}"
          body: "message"
        };
      }
    }
    message UpdateMessageRequest {
      string message_id = 1; // mapped to the URL
      Message message = 2;   // mapped to the body
    }


The following HTTP JSON to RPC mapping is enabled, where the
representation of the JSON in the request body is determined by
protos JSON encoding:

HTTP | RPC
-----|-----
`PUT /v1/messages/123456 { "text": "Hi!" }` | `UpdateMessage(message_id: "123456" message { text: "Hi!" })`

The special name `*` can be used in the body mapping to define that
every field not bound by the path template should be mapped to the
request body.  This enables the following alternative definition of
the update method:

    service Messaging {
      rpc UpdateMessage(Message) returns (Message) {
        option (google.api.http) = {
          put: "/v1/messages/{message_id}"
          body: "*"
        };
      }
    }
    message Message {
      string message_id = 1;
      string text = 2;
    }


The following HTTP JSON to RPC mapping is enabled:

HTTP | RPC
-----|-----
`PUT /v1/messages/123456 { "text": "Hi!" }` | `UpdateMessage(message_id: "123456" text: "Hi!")`

Note that when using `*` in the body mapping, it is not possible to
have HTTP parameters, as all fields not bound by the path end in
the body. This makes this option more rarely used in practice of
defining REST APIs. The common usage of `*` is in custom methods
which don't use the URL at all for transferring data.

It is possible to define multiple HTTP methods for one RPC by using
the `additional_bindings` option. Example:

    service Messaging {
      rpc GetMessage(GetMessageRequest) returns (Message) {
        option (google.api.http) = {
          get: "/v1/messages/{message_id}"
          additional_bindings {
            get: "/v1/users/{user_id}/messages/{message_id}"
          }
        };
      }
    }
    message GetMessageRequest {
      string message_id = 1;
      string user_id = 2;
    }


This enables the following two alternative HTTP JSON to RPC
mappings:

HTTP | RPC
-----|-----
`GET /v1/messages/123456` | `GetMessage(message_id: "123456")`
`GET /v1/users/me/messages/123456` | `GetMessage(user_id: "me" message_id: "123456")`

# Rules for HTTP mapping

The rules for mapping HTTP path, query parameters, and body fields
to the request message are as follows:

1. The `body` field specifies either `*` or a field path, or is
   omitted. If omitted, it indicates there is no HTTP request body.
2. Leaf fields (recursive expansion of nested messages in the
   request) can be classified into three types:
    (a) Matched in the URL template.
    (b) Covered by body (if body is `*`, everything except (a) fields;
        else everything under the body field)
    (c) All other fields.
3. URL query parameters found in the HTTP request are mapped to (c) fields.
4. Any body sent with an HTTP request can contain only (b) fields.

The syntax of the path template is as follows:

    Template = "/" Segments [ Verb ] ;
    Segments = Segment { "/" Segment } ;
    Segment  = "*" | "**" | LITERAL | Variable ;
    Variable = "{" FieldPath [ "=" Segments ] "}" ;
    FieldPath = IDENT { "." IDENT } ;
    Verb     = ":" LITERAL ;

The syntax `*` matches a single path segment. The syntax `**` matches zero
or more path segments, which must be the last part of the path except the
`Verb`. The syntax `LITERAL` matches literal text in the path.

The syntax `Variable` matches part of the URL path as specified by its
template. A variable template must not contain other variables. If a variable
matches a single path segment, its template may be omitted, e.g. `{var}`
is equivalent to `{var=*}`.

If a variable contains exactly one path segment, such as `"{var}"` or
`"{var=*}"`, when such a variable is expanded into a URL path, all characters
except `[-_.~0-9a-zA-Z]` are percent-encoded. Such variables show up in the
Discovery Document as `{var}`.

If a variable contains one or more path segments, such as `"{var=foo/*}"`
or `"{var=**}"`, when such a variable is expanded into a URL path, all
characters except `[-_.~/0-9a-zA-Z]` are percent-encoded. Such variables
show up in the Discovery Document as `{+var}`.

NOTE: While the single segment variable matches the semantics of
[RFC 6570](https://tools.ietf.org/html/rfc6570) Section 3.2.2
Simple String Expansion, the multi segment variable **does not** match
RFC 6570 Reserved Expansion. The reason is that the Reserved Expansion
does not expand special characters like `?` and `#`, which would lead
to invalid URLs.

NOTE: the field paths in variables and in the `body` must not refer to
repeated fields or map fields.
"""
type google_api_HttpRule @join__type(graph: RQL) {
  """
    Selects methods to which this rule applies.
  
  Refer to [selector][google.api.DocumentationRule.selector] for syntax details.
  """
  selector: String
  """Used for listing and getting information about resources."""
  get: String
  """Used for updating a resource."""
  put: String
  """Used for creating a resource."""
  post: String
  """Used for deleting a resource."""
  delete: String
  """Used for updating a resource."""
  patch: String
  """
    The custom pattern is used for specifying an HTTP method that is not
  included in the `pattern` field, such as HEAD, or "*" to leave the
  HTTP method unspecified for this rule. The wild-card rule is useful
  for services that provide content to Web (HTML) clients.
  """
  custom: google_api_CustomHttpPattern
  """
    The name of the request field whose value is mapped to the HTTP body, or
  `*` for mapping all fields not captured by the path pattern to the HTTP
  body. NOTE: the referred field must not be a repeated field and must be
  present at the top-level of request message type.
  """
  body: String
  """
    Additional HTTP bindings for the selector. Nested bindings must
  not contain an `additional_bindings` field themselves (that is,
  the nesting may only be one level deep).
  """
  additionalBindings: [google_api_HttpRule]
  _source: String
}

"""
  Wrapper message for `bytes`.

The JSON representation for `BytesValue` is JSON string.
"""
type google_protobuf_BytesValue @join__type(graph: RQL) {
  """The bytes value."""
  value: String
  _source: String
}

"""Describes a message type."""
type google_protobuf_DescriptorProto @join__type(graph: RQL) {
  name: String
  field: [google_protobuf_FieldDescriptorProto]
  extension: [google_protobuf_FieldDescriptorProto]
  nestedType: [google_protobuf_DescriptorProto]
  enumType: [google_protobuf_EnumDescriptorProto]
  extensionRange: [google_protobuf_DescriptorProto_ExtensionRange]
  oneofDecl: [google_protobuf_OneofDescriptorProto]
  options: google_protobuf_MessageOptions
  reservedRange: [google_protobuf_DescriptorProto_ReservedRange]
  """
    Reserved field names, which may not be used by fields in the same message.
  A given name may only be reserved once.
  """
  reservedName: [String]
  _source: String
}

type google_protobuf_DescriptorProto_ExtensionRange @join__type(graph: RQL) {
  start: Int
  end: Int
  options: google_protobuf_ExtensionRangeOptions
  _source: String
}

"""
  Range of reserved tag numbers. Reserved tag numbers may not be used by
fields or extension ranges in the same message. Reserved ranges may
not overlap.
"""
type google_protobuf_DescriptorProto_ReservedRange @join__type(graph: RQL) {
  """Inclusive."""
  start: Int
  """Exclusive."""
  end: Int
  _source: String
}

"""
  Wrapper message for `double`.

The JSON representation for `DoubleValue` is JSON number.
"""
type google_protobuf_DoubleValue @join__type(graph: RQL) {
  """The double value."""
  value: Float
  _source: String
}

"""
  A Duration represents a signed, fixed-length span of time represented
as a count of seconds and fractions of seconds at nanosecond
resolution. It is independent of any calendar and concepts like "day"
or "month". It is related to Timestamp in that the difference between
two Timestamp values is a Duration and it can be added or subtracted
from a Timestamp. Range is approximately +-10,000 years.

# Examples

Example 1: Compute Duration from two Timestamps in pseudo code.

    Timestamp start = ...;
    Timestamp end = ...;
    Duration duration = ...;

    duration.seconds = end.seconds - start.seconds;
    duration.nanos = end.nanos - start.nanos;

    if (duration.seconds < 0 && duration.nanos > 0) {
      duration.seconds += 1;
      duration.nanos -= 1000000000;
    } else if (durations.seconds > 0 && duration.nanos < 0) {
      duration.seconds -= 1;
      duration.nanos += 1000000000;
    }

Example 2: Compute Timestamp from Timestamp + Duration in pseudo code.

    Timestamp start = ...;
    Duration duration = ...;
    Timestamp end = ...;

    end.seconds = start.seconds + duration.seconds;
    end.nanos = start.nanos + duration.nanos;

    if (end.nanos < 0) {
      end.seconds -= 1;
      end.nanos += 1000000000;
    } else if (end.nanos >= 1000000000) {
      end.seconds += 1;
      end.nanos -= 1000000000;
    }

Example 3: Compute Duration from datetime.timedelta in Python.

    td = datetime.timedelta(days=3, minutes=10)
    duration = Duration()
    duration.FromTimedelta(td)

# JSON Mapping

In JSON format, the Duration type is encoded as a string rather than an
object, where the string ends in the suffix "s" (indicating seconds) and
is preceded by the number of seconds, with nanoseconds expressed as
fractional seconds. For example, 3 seconds with 0 nanoseconds should be
encoded in JSON format as "3s", while 3 seconds and 1 nanosecond should
be expressed in JSON format as "3.000000001s", and 3 seconds and 1
microsecond should be expressed in JSON format as "3.000001s".
"""
type google_protobuf_Duration @join__type(graph: RQL) {
  """
    Signed seconds of the span of time. Must be from -315,576,000,000
  to +315,576,000,000 inclusive. Note: these bounds are computed from:
  60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
  """
  seconds: Int
  """
    Signed fractions of a second at nanosecond resolution of the span
  of time. Durations less than one second are represented with a 0
  `seconds` field and a positive or negative `nanos` field. For durations
  of one second or more, a non-zero value for the `nanos` field must be
  of the same sign as the `seconds` field. Must be from -999,999,999
  to +999,999,999 inclusive.
  """
  nanos: Int
  _source: String
}

"""
  A generic empty message that you can re-use to avoid defining duplicated
empty messages in your APIs. A typical example is to use it as the request
or the response type of an API method. For instance:

    service Foo {
      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
    }

The JSON representation for `Empty` is empty JSON object `{}`.
"""
type google_protobuf_Empty @join__type(graph: RQL) {
  _: Boolean
  _source: String
}

"""Describes an enum type."""
type google_protobuf_EnumDescriptorProto @join__type(graph: RQL) {
  name: String
  value: [google_protobuf_EnumValueDescriptorProto]
  options: google_protobuf_EnumOptions
  """
    Range of reserved numeric values. Reserved numeric values may not be used
  by enum values in the same enum declaration. Reserved ranges may not
  overlap.
  """
  reservedRange: [google_protobuf_EnumDescriptorProto_EnumReservedRange]
  """
    Reserved enum value names, which may not be reused. A given name may only
  be reserved once.
  """
  reservedName: [String]
  _source: String
}

"""
  Range of reserved numeric values. Reserved values may not be used by
entries in the same enum. Reserved ranges may not overlap.

Note that this is distinct from DescriptorProto.ReservedRange in that it
is inclusive such that it can appropriately represent the entire int32
domain.
"""
type google_protobuf_EnumDescriptorProto_EnumReservedRange @join__type(graph: RQL) {
  """Inclusive."""
  start: Int
  """Inclusive."""
  end: Int
  _source: String
}

type google_protobuf_EnumOptions @join__type(graph: RQL) {
  """
    Set this option to true to allow mapping different tag names to the same
  value.
  """
  allowAlias: Boolean
  """
    Is this enum deprecated?
  Depending on the target platform, this can emit Deprecated annotations
  for the enum, or it will be completely ignored; in the very least, this
  is a formalization for deprecating enums.
  """
  deprecated: Boolean
  """The parser stores options it doesn't recognize here. See above."""
  uninterpretedOption: [google_protobuf_UninterpretedOption]
  _source: String
}

"""Describes a value within an enum."""
type google_protobuf_EnumValueDescriptorProto @join__type(graph: RQL) {
  name: String
  number: Int
  options: google_protobuf_EnumValueOptions
  _source: String
}

type google_protobuf_EnumValueOptions @join__type(graph: RQL) {
  """
    Is this enum value deprecated?
  Depending on the target platform, this can emit Deprecated annotations
  for the enum value, or it will be completely ignored; in the very least,
  this is a formalization for deprecating enum values.
  """
  deprecated: Boolean
  """The parser stores options it doesn't recognize here. See above."""
  uninterpretedOption: [google_protobuf_UninterpretedOption]
  _source: String
}

type google_protobuf_ExtensionRangeOptions @join__type(graph: RQL) {
  """The parser stores options it doesn't recognize here. See above."""
  uninterpretedOption: [google_protobuf_UninterpretedOption]
  _source: String
}

"""Describes a field within a message."""
type google_protobuf_FieldDescriptorProto @join__type(graph: RQL) {
  name: String
  number: Int
  label: google_protobuf_FieldDescriptorProto_Label
  """
    If type_name is set, this need not be set.  If both this and type_name
  are set, this must be one of TYPE_ENUM, TYPE_MESSAGE or TYPE_GROUP.
  """
  type: google_protobuf_FieldDescriptorProto_Type
  """
    For message and enum types, this is the name of the type.  If the name
  starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping
  rules are used to find the type (i.e. first the nested types within this
  message are searched, then within the parent, on up to the root
  namespace).
  """
  typeName: String
  """
    For extensions, this is the name of the type being extended.  It is
  resolved in the same manner as type_name.
  """
  extendee: String
  """
    For numeric types, contains the original text representation of the value.
  For booleans, "true" or "false".
  For strings, contains the default text contents (not escaped in any way).
  For bytes, contains the C escaped value.  All bytes >= 128 are escaped.
  TODO(kenton):  Base-64 encode?
  """
  defaultValue: String
  """
    If set, gives the index of a oneof in the containing type's oneof_decl
  list.  This field is a member of that oneof.
  """
  oneofIndex: Int
  """
    JSON name of this field. The value is set by protocol compiler. If the
  user has set a "json_name" option on this field, that option's value
  will be used. Otherwise, it's deduced from the field's name by converting
  it to camelCase.
  """
  jsonName: String
  options: google_protobuf_FieldOptions
  _source: String
}

type google_protobuf_FieldOptions @join__type(graph: RQL) {
  """
    The ctype option instructs the C++ code generator to use a different
  representation of the field than it normally would.  See the specific
  options below.  This option is not yet implemented in the open source
  release -- sorry, we'll try to include it in a future version!
  """
  ctype: google_protobuf_FieldOptions_CType
  """
    The packed option can be enabled for repeated primitive fields to enable
  a more efficient representation on the wire. Rather than repeatedly
  writing the tag and type for each element, the entire array is encoded as
  a single length-delimited blob. In proto3, only explicit setting it to
  false will avoid using packed encoding.
  """
  packed: Boolean
  """
    The jstype option determines the JavaScript type used for values of the
  field.  The option is permitted only for 64 bit integral and fixed types
  (int64, uint64, sint64, fixed64, sfixed64).  A field with jstype JS_STRING
  is represented as JavaScript string, which avoids loss of precision that
  can happen when a large value is converted to a floating point JavaScript.
  Specifying JS_NUMBER for the jstype causes the generated JavaScript code to
  use the JavaScript "number" type.  The behavior of the default option
  JS_NORMAL is implementation dependent.
  
  This option is an enum to permit additional types to be added, e.g.
  goog.math.Integer.
  """
  jstype: google_protobuf_FieldOptions_JSType
  """
    Should this field be parsed lazily?  Lazy applies only to message-type
  fields.  It means that when the outer message is initially parsed, the
  inner message's contents will not be parsed but instead stored in encoded
  form.  The inner message will actually be parsed when it is first accessed.
  
  This is only a hint.  Implementations are free to choose whether to use
  eager or lazy parsing regardless of the value of this option.  However,
  setting this option true suggests that the protocol author believes that
  using lazy parsing on this field is worth the additional bookkeeping
  overhead typically needed to implement it.
  
  This option does not affect the public interface of any generated code;
  all method signatures remain the same.  Furthermore, thread-safety of the
  interface is not affected by this option; const methods remain safe to
  call from multiple threads concurrently, while non-const methods continue
  to require exclusive access.
  
  
  Note that implementations may choose not to check required fields within
  a lazy sub-message.  That is, calling IsInitialized() on the outer message
  may return true even if the inner message has missing required fields.
  This is necessary because otherwise the inner message would have to be
  parsed in order to perform the check, defeating the purpose of lazy
  parsing.  An implementation which chooses not to check required fields
  must be consistent about it.  That is, for any particular sub-message, the
  implementation must either *always* check its required fields, or *never*
  check its required fields, regardless of whether or not the message has
  been parsed.
  """
  lazy: Boolean
  """
    Is this field deprecated?
  Depending on the target platform, this can emit Deprecated annotations
  for accessors, or it will be completely ignored; in the very least, this
  is a formalization for deprecating fields.
  """
  deprecated: Boolean
  """For Google-internal migration only. Do not use."""
  weak: Boolean
  """The parser stores options it doesn't recognize here. See above."""
  uninterpretedOption: [google_protobuf_UninterpretedOption]
  _source: String
}

"""Describes a complete .proto file."""
type google_protobuf_FileDescriptorProto @join__type(graph: RQL) {
  """file name, relative to root of source tree"""
  name: String
  """e.g. "foo", "foo.bar", etc."""
  package: String
  """Names of files imported by this file."""
  dependency: [String]
  """Indexes of the public imported files in the dependency list above."""
  publicDependency: [Int]
  """
    Indexes of the weak imported files in the dependency list.
  For Google-internal migration only. Do not use.
  """
  weakDependency: [Int]
  """All top-level definitions in this file."""
  messageType: [google_protobuf_DescriptorProto]
  enumType: [google_protobuf_EnumDescriptorProto]
  service: [google_protobuf_ServiceDescriptorProto]
  extension: [google_protobuf_FieldDescriptorProto]
  options: google_protobuf_FileOptions
  """
    This field contains optional information about the original source code.
  You may safely remove this entire field without harming runtime
  functionality of the descriptors -- the information is needed only by
  development tools.
  """
  sourceCodeInfo: google_protobuf_SourceCodeInfo
  """
    The syntax of the proto file.
  The supported values are "proto2" and "proto3".
  """
  syntax: String
  _source: String
}

"""
  The protocol compiler can output a FileDescriptorSet containing the .proto
files it parses.
"""
type google_protobuf_FileDescriptorSet @join__type(graph: RQL) {
  file: [google_protobuf_FileDescriptorProto]
  _source: String
}

type google_protobuf_FileOptions @join__type(graph: RQL) {
  """
    Sets the Java package where classes generated from this .proto will be
  placed.  By default, the proto package is used, but this is often
  inappropriate because proto packages do not normally start with backwards
  domain names.
  """
  javaPackage: String
  """
    If set, all the classes from the .proto file are wrapped in a single
  outer class with the given name.  This applies to both Proto1
  (equivalent to the old "--one_java_file" option) and Proto2 (where
  a .proto always translates to a single class, but you may want to
  explicitly choose the class name).
  """
  javaOuterClassname: String
  """
    If set true, then the Java code generator will generate a separate .java
  file for each top-level message, enum, and service defined in the .proto
  file.  Thus, these types will *not* be nested inside the outer class
  named by java_outer_classname.  However, the outer class will still be
  generated to contain the file's getDescriptor() method as well as any
  top-level extensions defined in the file.
  """
  javaMultipleFiles: Boolean
  """This option does nothing."""
  javaGenerateEqualsAndHash: Boolean @deprecated
  """
    If set true, then the Java2 code generator will generate code that
  throws an exception whenever an attempt is made to assign a non-UTF-8
  byte sequence to a string field.
  Message reflection will do the same.
  However, an extension field still accepts non-UTF-8 byte sequences.
  This option has no effect on when used with the lite runtime.
  """
  javaStringCheckUtf8: Boolean
  optimizeFor: google_protobuf_FileOptions_OptimizeMode
  """
    Sets the Go package where structs generated from this .proto will be
  placed. If omitted, the Go package will be derived from the following:
    - The basename of the package import path, if provided.
    - Otherwise, the package statement in the .proto file, if present.
    - Otherwise, the basename of the .proto file, without extension.
  """
  goPackage: String
  """
    Should generic services be generated in each language?  "Generic" services
  are not specific to any particular RPC system.  They are generated by the
  main code generators in each language (without additional plugins).
  Generic services were the only kind of service generation supported by
  early versions of google.protobuf.
  
  Generic services are now considered deprecated in favor of using plugins
  that generate code specific to your particular RPC system.  Therefore,
  these default to false.  Old code which depends on generic services should
  explicitly set them to true.
  """
  ccGenericServices: Boolean
  javaGenericServices: Boolean
  pyGenericServices: Boolean
  phpGenericServices: Boolean
  """
    Is this file deprecated?
  Depending on the target platform, this can emit Deprecated annotations
  for everything in the file, or it will be completely ignored; in the very
  least, this is a formalization for deprecating files.
  """
  deprecated: Boolean
  """
    Enables the use of arenas for the proto messages in this file. This applies
  only to generated classes for C++.
  """
  ccEnableArenas: Boolean
  """
    Sets the objective c class prefix which is prepended to all objective c
  generated classes from this .proto. There is no default.
  """
  objcClassPrefix: String
  """Namespace for generated classes; defaults to the package."""
  csharpNamespace: String
  """
    By default Swift generators will take the proto package and CamelCase it
  replacing '.' with underscore and use that to prefix the types/symbols
  defined. When this options is provided, they will use this value instead
  to prefix the types/symbols defined.
  """
  swiftPrefix: String
  """
    Sets the php class prefix which is prepended to all php generated classes
  from this .proto. Default is empty.
  """
  phpClassPrefix: String
  """
    Use this option to change the namespace of php generated classes. Default
  is empty. When this option is empty, the package name will be used for
  determining the namespace.
  """
  phpNamespace: String
  """
    The parser stores options it doesn't recognize here.
  See the documentation for the "Options" section above.
  """
  uninterpretedOption: [google_protobuf_UninterpretedOption]
  _source: String
}

"""
  Wrapper message for `float`.

The JSON representation for `FloatValue` is JSON number.
"""
type google_protobuf_FloatValue @join__type(graph: RQL) {
  """The float value."""
  value: Float
  _source: String
}

"""
  Describes the relationship between generated code and its original source
file. A GeneratedCodeInfo message is associated with only one generated
source file, but may contain references to different source .proto files.
"""
type google_protobuf_GeneratedCodeInfo @join__type(graph: RQL) {
  """
    An Annotation connects some span of text in generated code to an element
  of its generating .proto file.
  """
  annotation: [google_protobuf_GeneratedCodeInfo_Annotation]
  _source: String
}

type google_protobuf_GeneratedCodeInfo_Annotation @join__type(graph: RQL) {
  """
    Identifies the element in the original source .proto file. This field
  is formatted the same as SourceCodeInfo.Location.path.
  """
  path: [Int]
  """Identifies the filesystem path to the original source .proto."""
  sourceFile: String
  """
    Identifies the starting offset in bytes in the generated code
  that relates to the identified object.
  """
  begin: Int
  """
    Identifies the ending offset in bytes in the generated code that
  relates to the identified offset. The end offset should be one past
  the last relevant byte (so the length of the text = end - begin).
  """
  end: Int
  _source: String
}

"""
  Wrapper message for `int64`.

The JSON representation for `Int64Value` is JSON string.
"""
type google_protobuf_Int64Value @join__type(graph: RQL) {
  """The int64 value."""
  value: Int
  _source: String
}

type google_protobuf_MessageOptions @join__type(graph: RQL) {
  """
    Set true to use the old proto1 MessageSet wire format for extensions.
  This is provided for backwards-compatibility with the MessageSet wire
  format.  You should not use this for any other reason:  It's less
  efficient, has fewer features, and is more complicated.
  
  The message must be defined exactly as follows:
    message Foo {
      option message_set_wire_format = true;
      extensions 4 to max;
    }
  Note that the message cannot have any defined fields; MessageSets only
  have extensions.
  
  All extensions of your type must be singular messages; e.g. they cannot
  be int32s, enums, or repeated messages.
  
  Because this is an option, the above two restrictions are not enforced by
  the protocol compiler.
  """
  messageSetWireFormat: Boolean
  """
    Disables the generation of the standard "descriptor()" accessor, which can
  conflict with a field of the same name.  This is meant to make migration
  from proto1 easier; new code should avoid fields named "descriptor".
  """
  noStandardDescriptorAccessor: Boolean
  """
    Is this message deprecated?
  Depending on the target platform, this can emit Deprecated annotations
  for the message, or it will be completely ignored; in the very least,
  this is a formalization for deprecating messages.
  """
  deprecated: Boolean
  """
    Whether the message is an automatically generated map entry type for the
  maps field.
  
  For maps fields:
      map<KeyType, ValueType> map_field = 1;
  The parsed descriptor looks like:
      message MapFieldEntry {
          option map_entry = true;
          optional KeyType key = 1;
          optional ValueType value = 2;
      }
      repeated MapFieldEntry map_field = 1;
  
  Implementations may choose not to generate the map_entry=true message, but
  use a native map in the target language to hold the keys and values.
  The reflection APIs in such implementions still need to work as
  if the field is a repeated message field.
  
  NOTE: Do not set the option in .proto files. Always use the maps syntax
  instead. The option should only be implicitly set by the proto compiler
  parser.
  """
  mapEntry: Boolean
  """The parser stores options it doesn't recognize here. See above."""
  uninterpretedOption: [google_protobuf_UninterpretedOption]
  _source: String
}

"""Describes a method of a service."""
type google_protobuf_MethodDescriptorProto @join__type(graph: RQL) {
  name: String
  """
    Input and output type names.  These are resolved in the same way as
  FieldDescriptorProto.type_name, but must refer to a message type.
  """
  inputType: String
  outputType: String
  options: google_protobuf_MethodOptions
  """Identifies if client streams multiple client messages"""
  clientStreaming: Boolean
  """Identifies if server streams multiple server messages"""
  serverStreaming: Boolean
  _source: String
}

type google_protobuf_MethodOptions @join__type(graph: RQL) {
  """
    Is this method deprecated?
  Depending on the target platform, this can emit Deprecated annotations
  for the method, or it will be completely ignored; in the very least,
  this is a formalization for deprecating methods.
  """
  deprecated: Boolean
  idempotencyLevel: google_protobuf_MethodOptions_IdempotencyLevel
  """The parser stores options it doesn't recognize here. See above."""
  uninterpretedOption: [google_protobuf_UninterpretedOption]
  _source: String
}

"""Describes a oneof."""
type google_protobuf_OneofDescriptorProto @join__type(graph: RQL) {
  name: String
  options: google_protobuf_OneofOptions
  _source: String
}

type google_protobuf_OneofOptions @join__type(graph: RQL) {
  """The parser stores options it doesn't recognize here. See above."""
  uninterpretedOption: [google_protobuf_UninterpretedOption]
  _source: String
}

"""Describes a service."""
type google_protobuf_ServiceDescriptorProto @join__type(graph: RQL) {
  name: String
  method: [google_protobuf_MethodDescriptorProto]
  options: google_protobuf_ServiceOptions
  _source: String
}

type google_protobuf_ServiceOptions @join__type(graph: RQL) {
  """
    Is this service deprecated?
  Depending on the target platform, this can emit Deprecated annotations
  for the service, or it will be completely ignored; in the very least,
  this is a formalization for deprecating services.
  """
  deprecated: Boolean
  """The parser stores options it doesn't recognize here. See above."""
  uninterpretedOption: [google_protobuf_UninterpretedOption]
  _source: String
}

"""
  Encapsulates information about the original source file from which a
FileDescriptorProto was generated.
"""
type google_protobuf_SourceCodeInfo @join__type(graph: RQL) {
  """
    A Location identifies a piece of source code in a .proto file which
  corresponds to a particular definition.  This information is intended
  to be useful to IDEs, code indexers, documentation generators, and similar
  tools.
  
  For example, say we have a file like:
    message Foo {
      optional string foo = 1;
    }
  Let's look at just the field definition:
    optional string foo = 1;
    ^       ^^     ^^  ^  ^^^
    a       bc     de  f  ghi
  We have the following locations:
    span   path               represents
    [a,i)  [ 4, 0, 2, 0 ]     The whole field definition.
    [a,b)  [ 4, 0, 2, 0, 4 ]  The label (optional).
    [c,d)  [ 4, 0, 2, 0, 5 ]  The type (string).
    [e,f)  [ 4, 0, 2, 0, 1 ]  The name (foo).
    [g,h)  [ 4, 0, 2, 0, 3 ]  The number (1).
  
  Notes:
  - A location may refer to a repeated field itself (i.e. not to any
    particular index within it).  This is used whenever a set of elements are
    logically enclosed in a single code segment.  For example, an entire
    extend block (possibly containing multiple extension definitions) will
    have an outer location whose path refers to the "extensions" repeated
    field without an index.
  - Multiple locations may have the same path.  This happens when a single
    logical declaration is spread out across multiple places.  The most
    obvious example is the "extend" block again -- there may be multiple
    extend blocks in the same scope, each of which will have the same path.
  - A location's span is not always a subset of its parent's span.  For
    example, the "extendee" of an extension declaration appears at the
    beginning of the "extend" block and is shared by all extensions within
    the block.
  - Just because a location's span is a subset of some other location's span
    does not mean that it is a descendent.  For example, a "group" defines
    both a type and a field in a single declaration.  Thus, the locations
    corresponding to the type and field and their components will overlap.
  - Code which tries to interpret locations should probably be designed to
    ignore those that it doesn't understand, as more types of locations could
    be recorded in the future.
  """
  location: [google_protobuf_SourceCodeInfo_Location]
  _source: String
}

type google_protobuf_SourceCodeInfo_Location @join__type(graph: RQL) {
  """
    Identifies which part of the FileDescriptorProto was defined at this
  location.
  
  Each element is a field number or an index.  They form a path from
  the root FileDescriptorProto to the place where the definition.  For
  example, this path:
    [ 4, 3, 2, 7, 1 ]
  refers to:
    file.message_type(3)  // 4, 3
        .field(7)         // 2, 7
        .name()           // 1
  This is because FileDescriptorProto.message_type has field number 4:
    repeated DescriptorProto message_type = 4;
  and DescriptorProto.field has field number 2:
    repeated FieldDescriptorProto field = 2;
  and FieldDescriptorProto.name has field number 1:
    optional string name = 1;
  
  Thus, the above path gives the location of a field name.  If we removed
  the last element:
    [ 4, 3, 2, 7 ]
  this path refers to the whole field declaration (from the beginning
  of the label to the terminating semicolon).
  """
  path: [Int]
  """
    Always has exactly three or four elements: start line, start column,
  end line (optional, otherwise assumed same as start line), end column.
  These are packed into a single field for efficiency.  Note that line
  and column numbers are zero-based -- typically you will want to add
  1 to each before displaying to a user.
  """
  span: [Int]
  """
    If this SourceCodeInfo represents a complete declaration, these are any
  comments appearing before and after the declaration which appear to be
  attached to the declaration.
  
  A series of line comments appearing on consecutive lines, with no other
  tokens appearing on those lines, will be treated as a single comment.
  
  leading_detached_comments will keep paragraphs of comments that appear
  before (but not connected to) the current element. Each paragraph,
  separated by empty lines, will be one comment element in the repeated
  field.
  
  Only the comment content is provided; comment markers (e.g. //) are
  stripped out.  For block comments, leading whitespace and an asterisk
  will be stripped from the beginning of each line other than the first.
  Newlines are included in the output.
  
  Examples:
  
    optional int32 foo = 1;  // Comment attached to foo.
    // Comment attached to bar.
    optional int32 bar = 2;
  
    optional string baz = 3;
    // Comment attached to baz.
    // Another line attached to baz.
  
    // Comment attached to qux.
    //
    // Another line attached to qux.
    optional double qux = 4;
  
    // Detached comment for corge. This is not leading or trailing comments
    // to qux or corge because there are blank lines separating it from
    // both.
  
    // Detached comment for corge paragraph 2.
  
    optional string corge = 5;
    /* Block comment attached
     * to corge.  Leading asterisks
     * will be removed. */
    /* Block comment attached to
     * grault. */
    optional int32 grault = 6;
  
    // ignored detached comments.
  """
  leadingComments: String
  trailingComments: String
  leadingDetachedComments: [String]
  _source: String
}

"""
  Wrapper message for `string`.

The JSON representation for `StringValue` is JSON string.
"""
type google_protobuf_StringValue @join__type(graph: RQL) {
  """The string value."""
  value: String
  _source: String
}

"""
  Wrapper message for `uint32`.

The JSON representation for `UInt32Value` is JSON number.
"""
type google_protobuf_UInt32Value @join__type(graph: RQL) {
  """The uint32 value."""
  value: Int
  _source: String
}

"""
  Wrapper message for `uint64`.

The JSON representation for `UInt64Value` is JSON string.
"""
type google_protobuf_UInt64Value @join__type(graph: RQL) {
  """The uint64 value."""
  value: Int
  _source: String
}

"""
  A message representing a option the parser does not recognize. This only
appears in options protos created by the compiler::Parser class.
DescriptorPool resolves these when building Descriptor objects. Therefore,
options protos in descriptor objects (e.g. returned by Descriptor::options(),
or produced by Descriptor::CopyTo()) will never have UninterpretedOptions
in them.
"""
type google_protobuf_UninterpretedOption @join__type(graph: RQL) {
  name: [google_protobuf_UninterpretedOption_NamePart]
  """
    The value of the uninterpreted option, in whatever type the tokenizer
  identified it as during parsing. Exactly one of these should be set.
  """
  identifierValue: String
  positiveIntValue: Int
  negativeIntValue: Int
  doubleValue: Float
  stringValue: String
  aggregateValue: String
  _source: String
}

"""
  The name of the uninterpreted option.  Each string represents a segment in
a dot-separated name.  is_extension is true iff a segment represents an
extension (denoted with parentheses in options specs in .proto files).
E.g.,{ ["foo", false], ["bar.baz", true], ["qux", false] } represents
"foo.(bar.baz).qux".
"""
type google_protobuf_UninterpretedOption_NamePart @join__type(graph: RQL) {
  namePart: String
  isExtension: Boolean
  _source: String
}

type loqate_AddressCaptureFindRequest @join__type(graph: RQL) {
  text: String
  container: String
  key: String
  limit: Int
  language: String
  countries: String
  _source: String
}

type loqate_AddressCaptureFindResponse @join__type(graph: RQL) {
  Items: [loqate_AddressCaptureFindResponse_Item]
  _source: String
}

type loqate_AddressCaptureFindResponse_Item @join__type(graph: RQL) {
  Id: String
  Type: loqate_AddressCaptureFindResponse_Item_ItemType
  Text: String
  Description: String
  _source: String
}

type loqate_AddressCaptureRetrieveRequest @join__type(graph: RQL) {
  key: String
  id: String
  _source: String
}

type loqate_AddressCaptureRetrieveResponse @join__type(graph: RQL) {
  Items: [loqate_AddressCaptureRetrieveResponse_Item]
  _source: String
}

type loqate_AddressCaptureRetrieveResponse_Item @join__type(graph: RQL) {
  Id: String
  Line1: String
  SubBuilding: String
  PostalCode: String
  ProvinceCode: String
  City: String
  CountryIso2: String
  _source: String
}

type loqate_Loqate @join__type(graph: RQL) {
  FindAddressSuggestions(input: Input_loqate_AddressCaptureFindRequest): loqate_AddressCaptureFindResponse
  SelectAddressSuggestion(input: Input_loqate_AddressCaptureRetrieveRequest): loqate_AddressCaptureRetrieveResponse
  _source: String
}

type mparticle_Identity @join__type(graph: RQL) {
  type: String
  value: String
  _source: String
}

type mparticle_Mparticle @join__type(graph: RQL) {
  Profile(input: Input_mparticle_ProfileRequest): mparticle_ProfileResponse
  ProfileByMpid(input: Input_mparticle_ProfileRequest): mparticle_ProfileResponse
  _source: String
}

type mparticle_MparticleOauth @join__type(graph: RQL) {
  Token(input: Input_mparticle_TokenRequest): mparticle_TokenResponse
  _source: String
}

type mparticle_Mpid @join__type(graph: RQL) {
  mpid: String
  _source: String
}

type mparticle_ProfileRequest @join__type(graph: RQL) {
  orgId: String
  accountId: String
  workspaceId: String
  environmentType: String
  identity: mparticle_Identity
  mpid: mparticle_Mpid
  _source: String
}

type mparticle_ProfileResponse @join__type(graph: RQL) {
  mpid: String
  topProductType: String
  topProductTypes: [String]
  topCategories: [String]
  topBrands: [String]
  recentlyViewedCsps: [String]
  averageOrderValue: Float
  totalListingsCreated: Int
  totalListingsSold: Int
  totalListingsDraft: Int
  totalListingsSuspended: Int
  totalListingsLive: Int
  cumulativeGmv: Float
  totalPurchases: Int
  buyerLabel: String
  sellerLabel: String
  totalFeedFollows: Int
  totalBuyerOffersCreated: Int
  totalBuyerOffersAccepted: Int
  sellerFeedbackRating: Float
  buyerFeedbackRating: Float
  mostRecentOrderDate: String
  firstOrderDate: String
  topProductTypeUuids: [String]
  topCategoryUuids: [String]
  topBrandCategories: [String]
  brandCategories: [String]
  topMostRecentProductTypes: [String]
  _source: String
}

type mparticle_TokenRequest @join__type(graph: RQL) {
  clientId: String
  clientSecret: String
  audience: String
  grantType: String
  _source: String
}

type mparticle_TokenResponse @join__type(graph: RQL) {
  accessToken: String
  tokenType: String
  expiresIn: Int
  _source: String
}

type reverb_config_cache_AddressFormConfig @join__type(graph: RQL) {
  countryCode: String
  fields: [reverb_config_cache_AddressFormField]
  _source: String
}

type reverb_config_cache_AddressFormField @join__type(graph: RQL) {
  fieldName: String
  displayNames: [reverb_config_cache_LocalizedAddressFormDisplayName]
  required: Boolean
  _source: String
}

type reverb_config_cache_AddressValidation @join__type(graph: RQL) {
  postalCode: String
  state: String
  _source: String
}

type reverb_config_cache_AddressValidationsResponse @join__type(graph: RQL) {
  addresses: [reverb_config_cache_AddressValidation]
  _source: String
}

type reverb_config_cache_ConfigService @join__type(graph: RQL) {
  GetExchangeRates(input: Input_reverb_config_cache_ExchangeRateRequest): reverb_config_cache_CurrencyResponse
  GetVersionedExchangeRates(input: Input_reverb_config_cache_VersionedExchangeRatesRequest): reverb_config_cache_VersionedExchangeRatesResponse
  ExchangeCurrency(input: Input_reverb_config_cache_ExchangeCurrencyRequest): reverb_config_cache_ExchangeCurrencyResponse
  TaxRates(input: Input_google_protobuf_Empty): reverb_config_cache_TaxRatesResponse
  AddressValidations(input: Input_google_protobuf_Empty): reverb_config_cache_AddressValidationsResponse
  GetTranslations(input: Input_reverb_config_cache_TranslationsRequest): reverb_config_cache_TranslationsResponse
  GetSearchRedirects(input: Input_reverb_config_cache_SearchRedirectsRequest): reverb_config_cache_SearchRedirectsResponse
  GetInternationalAddressFormConfig(input: Input_google_protobuf_Empty): reverb_config_cache_InternationalAddressFormConfigResponse
  _source: String
}

type reverb_config_cache_CurrencyResponse @join__type(graph: RQL) {
  rates: [reverb_config_cache_ExchangeRate]
  _source: String
}

type reverb_config_cache_ExchangeCurrencyRequest @join__type(graph: RQL) {
  from: String
  to: String
  amountMinorUnits: Int
  inverseReverseRates: Boolean
  _source: String
}

type reverb_config_cache_ExchangeCurrencyResponse @join__type(graph: RQL) {
  amountMinorUnits: Int
  from: String
  to: String
  _source: String
}

type reverb_config_cache_ExchangeRate @join__type(graph: RQL) {
  from: String
  to: String
  rate: Float
  _source: String
}

type reverb_config_cache_ExchangeRateRequest @join__type(graph: RQL) {
  useMajorUnitConversion: Boolean
  inverseReverseRates: Boolean
  _source: String
}

type reverb_config_cache_Filters @join__type(graph: RQL) {
  productType: String
  category: String
  brand: String
  productFamily: String
  _source: String
}

type reverb_config_cache_InternationalAddressFormConfigResponse @join__type(graph: RQL) {
  configs: [reverb_config_cache_AddressFormConfig]
  _source: String
}

type reverb_config_cache_LocalizedAddressFormDisplayName @join__type(graph: RQL) {
  locale: String
  displayName: String
  _source: String
}

type reverb_config_cache_SearchRedirect @join__type(graph: RQL) {
  queryTerm: String
  redirectTerm: String
  type: reverb_config_cache_SearchRedirect_Type
  redirectTerms: [String] @deprecated
  filters: reverb_config_cache_Filters
  _source: String
}

type reverb_config_cache_SearchRedirectsRequest @join__type(graph: RQL) {
  _: Boolean
  _source: String
}

type reverb_config_cache_SearchRedirectsResponse @join__type(graph: RQL) {
  redirects: [reverb_config_cache_SearchRedirect]
  _source: String
}

type reverb_config_cache_TaxRate @join__type(graph: RQL) {
  postalcode: String
  totalSalesTaxRate: String
  totalSalesTaxRatePrecision: Int
  state: String
  _source: String
}

type reverb_config_cache_TaxRatesResponse @join__type(graph: RQL) {
  rates: [reverb_config_cache_TaxRate]
  _source: String
}

type reverb_config_cache_TranslationsRequest @join__type(graph: RQL) {
  project: String
  resource: String
  locales: [String]
  _source: String
}

type reverb_config_cache_TranslationsResponse @join__type(graph: RQL) {
  translations: [reverb_config_cache_TranslationsResponse_Translation]
  _source: String
}

type reverb_config_cache_TranslationsResponse_Translation @join__type(graph: RQL) {
  project: String
  resource: String
  locale: String
  content: String
  _source: String
}

type reverb_config_cache_VersionedExchangeRatesRequest @join__type(graph: RQL) {
  version: String
  inverseReverseRates: Boolean
  _source: String
}

type reverb_config_cache_VersionedExchangeRatesResponse @join__type(graph: RQL) {
  rates: [reverb_config_cache_ExchangeRate]
  _source: String
}

type reverb_event_AddedToCart @join__type(graph: RQL) {
  userContext: reverb_event_UserContext
  listing: reverb_event_Listing
  otherListings: [reverb_event_Listing]
  referer: String
  aid: String
  cartItemUuid: String
  _source: String
}

type reverb_event_AdminAbilityAndAbilityProfileUpdated @join__type(graph: RQL) {
  abilityManagerUserId: String
  abilityRecipientUserId: String
  adHocAbilities: [String]
  abilityProfiles: [String]
  _source: String
}

type reverb_event_Article @join__type(graph: RQL) {
  id: String
  _source: String
}

type reverb_event_ArticleView @join__type(graph: RQL) {
  userContext: reverb_event_UserContext
  articleId: String
  requestId: String
  referer: String
  url: String
  aid: String
  utmCampaign: String
  _source: String
}

type reverb_event_ArticleViewRelatedContent @join__type(graph: RQL) {
  userContext: reverb_event_UserContext
  articleViewArticleId: String
  type: String
  url: String
  referer: String
  articles: [reverb_event_Article]
  _source: String
}

type reverb_event_AttributeChange @join__type(graph: RQL) {
  name: String
  previousValue: String
  newValue: String
  _source: String
}

type reverb_event_AttributedLanding @join__type(graph: RQL) {
  landingId: String
  landingTime: String
  userId: String
  aid: String
  referer: String
  url: String
  utmCampaign: String
  cookieId: String
  userShippingRegion: String
  landingDevice: String
  landingBucket: String
  orderedAt: String
  productId: String
  orderId: String
  orderDevice: String
  registeredAt: String
  _source: String
}

"""Fingerprint from fingerprintjs2"""
type reverb_event_BrowserFingerprint @join__type(graph: RQL) {
  """Hashed fingerprint"""
  hash: String
  liedLanguages: Boolean
  liedResolution: Boolean
  liedOs: Boolean
  liedBrowser: Boolean
  plugins: Int
  resolution: String
  session: Boolean
  localstorage: Boolean
  _source: String
}

type reverb_event_BumpsReserved @join__type(graph: RQL) {
  userContext: reverb_event_UserContext
  amount: Int
  price: reverb_event_Price
  listing: reverb_event_Listing
  budgetType: String
  _source: String
}

type reverb_event_BundleData @join__type(graph: RQL) {
  paymentGroupsCount: Int
  paymentGroups: [reverb_event_PaymentGroup]
  _source: String
}

type reverb_event_CanonicalProduct @join__type(graph: RQL) {
  id: String
  _source: String
}

type reverb_event_CanonicalProductUpdated @join__type(graph: RQL) {
  userContext: reverb_event_UserContext
  canonicalProduct: reverb_event_CanonicalProduct
  changes: [reverb_event_AttributeChange]
  _source: String
}

type reverb_event_CartBundles @join__type(graph: RQL) {
  userContext: reverb_event_UserContext
  bundleData: reverb_event_BundleData
  _source: String
}

type reverb_event_CartItemBundle @join__type(graph: RQL) {
  cartItemsCount: Int
  paymentMethod: String
  currency: String
  _source: String
}

type reverb_event_CartView @join__type(graph: RQL) {
  userContext: reverb_event_UserContext
  listings: [reverb_event_Listing]
  requestId: String
  _source: String
}

"""includes Cart and Checkout step page views"""
type reverb_event_CheckoutView @join__type(graph: RQL) {
  userContext: reverb_event_UserContext
  paymentMethod: String
  stepName: String
  referer: String
  checkoutId: String
  checkoutUuid: String
  _source: String
}

type reverb_event_ClickStats @join__type(graph: RQL) {
  entityType: String
  entityId: String
  impressions: Int
  clicks: Int
  bumpImpressions: Int
  bumpClicks: Int
  _source: String
}

type reverb_event_ComparisonShoppingPage @join__type(graph: RQL) {
  id: String
  lowestPriceForNew: reverb_event_Price
  lowestPriceForUsed: reverb_event_Price
  usedListingCount: Int
  newListingCount: Int
  _source: String
}

"""Deprecated, use ComponentInteraction"""
type reverb_event_ComparisonShoppingPageClick @join__type(graph: RQL) {
  comparisonShoppingPage: reverb_event_ComparisonShoppingPage
  userContext: reverb_event_UserContext
  url: String
  referer: String
  componentName: String
  _source: String
}

type reverb_event_ComparisonShoppingPageView @join__type(graph: RQL) {
  listings: [reverb_event_Listing]
  canonicalProductIds: [String]
  lowestPriceForNew: reverb_event_Price
  lowestPriceForUsed: reverb_event_Price
  userContext: reverb_event_UserContext
  requestId: String
  buyButtonListingId: String
  buyButtonListingType: String
  comparisonShoppingPageId: String
  buyButtonReason: String
  priceGuideId: String
  condition: String
  referer: String
  url: String
  utmCampaign: String
  utmSource: String
  utmMedium: String
  _source: String
}

type reverb_event_ComparisonShoppingPagesView @join__type(graph: RQL) {
  comparisonShoppingPages: [reverb_event_ComparisonShoppingPage]
  userContext: reverb_event_UserContext
  url: String
  referer: String
  componentName: String
  _source: String
}

type reverb_event_ComponentInteraction @join__type(graph: RQL) {
  componentName: String
  interactionType: String
  url: String
  referer: String
  userContext: reverb_event_UserContext
  context: String
  entityId: String
  entityType: String
  position: Int
  page: Int
  perPage: Int
  totalResults: Int
  targetUrl: String
  pageViewId: String
  impressionUuid: String
  utmSource: String
  utmMedium: String
  utmCampaign: String
  freeTextQuery: String
  bumped: Boolean
  _source: String
}

type reverb_event_ComponentsView @join__type(graph: RQL) {
  componentName: String
  context: String
  url: String
  referer: String
  userContext: reverb_event_UserContext
  entityIds: [String]
  entityType: String
  pageViewId: String
  impressionUuid: String
  algorithmVersion: String
  utmSource: String
  utmMedium: String
  utmCampaign: String
  _source: String
}

type reverb_event_ContestSignUp @join__type(graph: RQL) {
  userContext: reverb_event_UserContext
  referer: String
  aid: String
  utmCampaign: String
  questionResponse: String
  _source: String
}

type reverb_event_ConversationUpdated @join__type(graph: RQL) {
  userContext: reverb_event_UserContext
  id: String
  initialRecipientId: String
  initialAuthorId: String
  listing: reverb_event_Listing
  lastMessageId: String
  requestId: String
  _source: String
}

type reverb_event_CuratedSetView @join__type(graph: RQL) {
  curatedSetId: String
  userContext: reverb_event_UserContext
  listings: [reverb_event_Listing]
  requestId: String
  _source: String
}

type reverb_event_Device @join__type(graph: RQL) {
  """/ DeviceName"""
  name: String
  userAgent: String
  version: String
  appVersion: String
  osVersion: String
  manufacturer: String
  brand: String
  model: String
  _source: String
}

type reverb_event_DigitalListing @join__type(graph: RQL) {
  id: String
  price: reverb_event_Price
  """/ ListingStatus"""
  status: String
  categoryUuids: [String]
  _source: String
}

type reverb_event_DigitalListingDownload @join__type(graph: RQL) {
  userContext: reverb_event_UserContext
  digitalListingId: String
  digitalVariantId: String
  requestId: String
  _source: String
}

type reverb_event_DigitalListingView @join__type(graph: RQL) {
  userContext: reverb_event_UserContext
  digitalListing: reverb_event_DigitalListing
  requestId: String
  _source: String
}

type reverb_event_DiscountCodeApplied @join__type(graph: RQL) {
  userContext: reverb_event_UserContext
  discountCode: String
  success: Boolean
  referer: String
  error: String
  _source: String
}

type reverb_event_EntityUpdated @join__type(graph: RQL) {
  name: String
  id: String
  timestamp: String
  action: reverb_event_EntityUpdated_Action
  _source: String
}

type reverb_event_Error @join__type(graph: RQL) {
  error: String
  userContext: reverb_event_UserContext
  _source: String
}

type reverb_event_Event @join__type(graph: RQL) {
  messageName: String
  payload: String
  level: String
  _source: String
}

type reverb_event_EventRequest @join__type(graph: RQL) {
  events: [reverb_event_Event]
  _source: String
}

type reverb_event_Experiment @join__type(graph: RQL) {
  name: String
  value: String
  useInFrontend: Boolean
  multivariateExperiment: Boolean
  """/ Deprecated in favor of mobile_context"""
  qualifyForMobile: Boolean
  mobileContext: reverb_event_Experiment_MobileContext
  useInMarketplaceListingsSearch: Boolean
  multiClientExperimentContext: String
  _source: String
}

type reverb_event_Experiment_MobileContext @join__type(graph: RQL) {
  value: String
  reportAs: String
  _source: String
}

type reverb_event_FollowAdded @join__type(graph: RQL) {
  userContext: reverb_event_UserContext
  referer: String
  searchableType: String
  searchableId: String
  searchParams: String
  _source: String
}

type reverb_event_FollowUpdated @join__type(graph: RQL) {
  userContext: reverb_event_UserContext
  id: String
  savedSearchId: String
  destroyed: Boolean
  _source: String
}

type reverb_event_GenericMailer @join__type(graph: RQL) {
  userContext: reverb_event_UserContext
  """/ DEPRECATED"""
  emailType: String
  """/ MailerAction"""
  action: String
  """/ Sale"""
  sourceType: String
  """/ sale_id"""
  sourceId: String
  """/ new_user_sale_invitation"""
  utmCampaign: String
  """/ { subject_line: "v2" }.to_json"""
  variations: String
  _source: String
}

type reverb_event_GoogleShoppingClick @join__type(graph: RQL) {
  productId: String
  comparisonShoppingPageId: String
  """/ ISO8601"""
  timestamp: String
  """/ GoogleClickOrigin"""
  origin: String
  _source: String
}

type reverb_event_JsLoad @join__type(graph: RQL) {
  app: String
  userContext: reverb_event_UserContext
  fingerprint: reverb_event_BrowserFingerprint
  _source: String
}

type reverb_event_Listing @join__type(graph: RQL) {
  id: String
  price: reverb_event_Price
  """/ ListingStatus"""
  status: String
  categoryUuids: [String]
  bumped: Boolean
  canonicalProductId: String
  _source: String
}

type reverb_event_ListingMatched @join__type(graph: RQL) {
  userContext: reverb_event_UserContext
  listingId: String
  canonicalProductId: String
  _source: String
}

type reverb_event_ListingUpdated @join__type(graph: RQL) {
  userContext: reverb_event_UserContext
  listing: reverb_event_Listing
  changes: [reverb_event_AttributeChange]
  _source: String
}

type reverb_event_ListingView @join__type(graph: RQL) {
  userContext: reverb_event_UserContext
  listing: reverb_event_Listing
  requestId: String
  url: String
  referer: String
  aid: String
  utmCampaign: String
  _source: String
}

type reverb_event_ListingViewRelatedContent @join__type(graph: RQL) {
  userContext: reverb_event_UserContext
  listingViewListingId: String
  type: String
  url: String
  referer: String
  listings: [reverb_event_Listing]
  articles: [reverb_event_Article]
  _source: String
}

"""
  Reverb Analytics Notes:
Description: Captures views of any listing and parses product_id from url
"""
type reverb_event_ListingsView @join__type(graph: RQL) {
  listings: [reverb_event_Listing]
  query: String
  totalResults: Int
  userContext: reverb_event_UserContext
  viewType: String
  curatedLinkIds: [String]
  curatedSetIds: [String]
  bumpedListings: [reverb_event_Listing]
  featuredListing: reverb_event_Listing
  requestId: String
  bumpAlgorithm: String
  url: String
  referer: String
  utmCampaign: String
  aid: String
  resultCount: Int
  version: Int
  responseTime: Float
  fallbackStrategy: String
  fallbackListings: [reverb_event_Listing]
  totalFallbackListings: Int
  _source: String
}

type reverb_event_MailLinkClick @join__type(graph: RQL) {
  userContext: reverb_event_UserContext
  utmCampaign: String
  url: String
  """/ Sale"""
  sourceType: String
  """/ sale_id"""
  sourceId: String
  """/ { subject_line: "v2" }.to_json"""
  variations: String
  _source: String
}

type reverb_event_MailListSignUp @join__type(graph: RQL) {
  userContext: reverb_event_UserContext
  email: String
  referer: String
  listId: String
  countryCode: String
  source: String
  sourceProductUuid: String
  userId: String
  _source: String
}

type reverb_event_MarketingEmailView @join__type(graph: RQL) {
  userContext: reverb_event_UserContext
  listings: [reverb_event_Listing]
  utmCampaign: String
  upsellOrderId: String
  persona: String
  entityIds: [String]
  entityType: String
  _source: String
}

type reverb_event_Message @join__type(graph: RQL) {
  id: String
  conversationId: String
  _source: String
}

type reverb_event_MessageUpdated @join__type(graph: RQL) {
  userContext: reverb_event_UserContext
  message: reverb_event_Message
  changes: [reverb_event_AttributeChange]
  _source: String
}

type reverb_event_MessagesMailer @join__type(graph: RQL) {
  userContext: reverb_event_UserContext
  messageId: String
  """/ MailerAction"""
  action: String
  _source: String
}

"""/ Deprecated in favor of common ComponentInteraction"""
type reverb_event_MobileInteraction @join__type(graph: RQL) {
  name: String
  action: String
  type: reverb_event_MobileInteraction_InteractionType
  context: String
  userContext: reverb_event_UserContext
  _source: String
}

type reverb_event_NegotiationStarted @join__type(graph: RQL) {
  userContext: reverb_event_UserContext
  id: String
  buyerInitiated: Boolean
  offerId: String
  buyerId: String
  listingIds: [String]
  _source: String
}

type reverb_event_NegotiationUpdated @join__type(graph: RQL) {
  userContext: reverb_event_UserContext
  """/ Status"""
  status: String
  id: String
  lastOfferId: String
  listing: reverb_event_Listing
  _source: String
}

type reverb_event_OrderPaid @join__type(graph: RQL) {
  userContext: reverb_event_UserContext
  id: String
  listingId: String
  buyerId: String
  _source: String
}

type reverb_event_OrderUpdated @join__type(graph: RQL) {
  userContext: reverb_event_UserContext
  id: String
  status: String
  listing: reverb_event_Listing
  buyerId: String
  createdAt: String
  _source: String
}

type reverb_event_PMBView @join__type(graph: RQL) {
  userContext: reverb_event_UserContext
  persona: String
  listings: [reverb_event_Listing]
  utmCampaign: String
  _source: String
}

"""
  Reverb Analytics Notes:
Description: Captures generic catch-all pages viewed by a user on reverb
Warnings:
Includes many backend "views" like API calls and image requests
Any query of events.page_views must reference the partition key dt in the where clause
"""
type reverb_event_PageView @join__type(graph: RQL) {
  userContext: reverb_event_UserContext
  referer: String
  url: String
  aid: String
  utmCampaign: String
  controller: String
  action: String
  remoteAddress: String
  requestId: String
  params: String
  method: String
  viewRuntime: Float
  dbRuntime: Float
  status: String
  duration: Float
  customHeaders: String
  oauthAppId: String
  devTeam: String
  """expectin a JSON serialized hash"""
  pageExperiments: String
  """Client-side pageview ID"""
  id: String
  """params[sku] for debugging and kibana health"""
  sku: String
  """params[id] for debugging and kibana health"""
  paramsId: String
  threadId: String
  utmSource: String
  utmMedium: String
  """_region prefix of requested URL"""
  urlRegion: String
  _source: String
}

type reverb_event_PaymentGroup @join__type(graph: RQL) {
  cartItemBundlesCount: Int
  cartItemBundles: [reverb_event_CartItemBundle]
  _source: String
}

type reverb_event_Price @join__type(graph: RQL) {
  amount: Int
  currency: String
  _source: String
}

type reverb_event_RemovedFromCart @join__type(graph: RQL) {
  userContext: reverb_event_UserContext
  listing: reverb_event_Listing
  cartItemUuid: String
  _source: String
}

type reverb_event_SaleView @join__type(graph: RQL) {
  saleId: String
  userContext: reverb_event_UserContext
  listings: [reverb_event_Listing]
  requestId: String
  _source: String
}

type reverb_event_ScreenView @join__type(graph: RQL) {
  userContext: reverb_event_UserContext
  referer: String
  screenName: String
  context: String
  _source: String
}

type reverb_event_SessionStart @join__type(graph: RQL) {
  userContext: reverb_event_UserContext
  referer: String
  url: String
  aid: String
  utmCampaign: String
  requestId: String
  """session id"""
  id: String
  utmSource: String
  utmMedium: String
  gsPartner: String
  _source: String
}

type reverb_event_ShippingLabelUpdated @join__type(graph: RQL) {
  userContext: reverb_event_UserContext
  id: String
  status: String
  _source: String
}

type reverb_event_ShopEmptied @join__type(graph: RQL) {
  shopId: String
  _source: String
}

"""/ Polymorphic message wrapper"""
type reverb_event_TrackingPixelEvent @join__type(graph: RQL) {
  """/ ex. MessagesMailer"""
  name: String
  data: String
  _source: String
}

type reverb_event_UserContext @join__type(graph: RQL) {
  id: String
  cookieId: String
  distinctId: String
  device: reverb_event_Device
  experiments: [reverb_event_Experiment]
  """/ ISO8601"""
  timestamp: String
  adminId: String
  bot: Boolean
  locale: String
  currency: String
  shippingRegion: String
  lat: Float
  long: Float
  lastGoogleClick: reverb_event_GoogleShoppingClick
  requestId: String
  sellerSitesId: String
  reverbApp: String
  hasLoggedIn: Boolean
  countryCode: String
  sessionId: String
  advertisingId: String
  actingUserId: String
  _source: String
}

type reverb_event_UserSignedIn @join__type(graph: RQL) {
  userContext: reverb_event_UserContext
  referer: String
  userId: String
  signup: Boolean
  _source: String
}

type reverb_event_UserSignedUp @join__type(graph: RQL) {
  """
    Reverb Analytics Notes:
  Description: Captures user registration event
  Known Issues: Currently drops/does not capture user_context_id for majority of events on desktop and mobile web
  """
  newsletterOptIn: Boolean
  userId: String
  registrationSource: String
  referer: String
  aid: String
  utmCampaign: String
  url: String
  countryCode: String
  sourceProductUuid: String
  userContext: reverb_event_UserContext
  _source: String
}

type reverb_event_UserUpdated @join__type(graph: RQL) {
  userContext: reverb_event_UserContext
  id: String
  """/ UserStatus"""
  status: String
  newsletterOptIn: Boolean
  _source: String
}

type reverb_event_WatchAdded @join__type(graph: RQL) {
  userContext: reverb_event_UserContext
  referer: String
  listingId: String
  watchId: String
  _source: String
}

type reverb_event_WatcherListingSoldMailer @join__type(graph: RQL) {
  userContext: reverb_event_UserContext
  """/ MailerAction"""
  action: String
  productId: String
  orderId: String
  similarProductIds: [String]
  comparisonShoppingPageId: String
  _source: String
}

type reverb_feed_AlertableUserWithTz @join__type(graph: RQL) {
  userId: String
  tzRegion: Int
  _source: String
}

type reverb_feed_AlertableUsersInTzStreamRequest @join__type(graph: RQL) {
  chunkSize: Int
  tzRegion: Int
  fromId: Int
  _source: String
}

type reverb_feed_AlertableUsersRequest @join__type(graph: RQL) {
  _: Boolean
  _source: String
}

type reverb_feed_AlertableUsersResponse @join__type(graph: RQL) {
  userIds: [String]
  _source: String
}

type reverb_feed_AlertableUsersStreamRequest @join__type(graph: RQL) {
  chunkSize: Int
  _source: String
}

type reverb_feed_AlertableUsersWithTzResponse @join__type(graph: RQL) {
  users: [reverb_feed_AlertableUserWithTz]
  _source: String
}

type reverb_feed_AlertableUsersWithTzStreamRequest @join__type(graph: RQL) {
  chunkSize: Int
  _source: String
}

type reverb_feed_BackfillSearchDuplicate @join__type(graph: RQL) {
  normalizedParams: String
  searchIds: [Int]
  _source: String
}

type reverb_feed_BatchUpdateSavedSearchRecentListingCountRequest @join__type(graph: RQL) {
  savedSearches: [reverb_feed_BatchUpdateSavedSearchRecentListingCountRequest_SavedSearchInput]
  _source: String
}

type reverb_feed_BatchUpdateSavedSearchRecentListingCountRequest_SavedSearchInput @join__type(graph: RQL) {
  id: String
  recentListingCount: Int
  _source: String
}

type reverb_feed_BatchUpdateSavedSearchRecentListingCountResponse @join__type(graph: RQL) {
  updatedCount: Int
  _source: String
}

type reverb_feed_ClearUserDigestRequest @join__type(graph: RQL) {
  userId: String
  _source: String
}

type reverb_feed_ClearUserDigestResponse @join__type(graph: RQL) {
  _: Boolean
  _source: String
}

type reverb_feed_CreateFollowResponse @join__type(graph: RQL) {
  follow: reverb_feed_Follow
  _source: String
}

type reverb_feed_CreateSavedSearchRequest @join__type(graph: RQL) {
  esQuery: String
  searchableType: reverb_feed_SearchableType
  queryParams: String
  searchableUuid: String
  localizedContents: [reverb_feed_FollowLocalizedContents]
  _source: String
}

type reverb_feed_CreateSavedSearchResponse @join__type(graph: RQL) {
  id: Int
  _source: String
}

type reverb_feed_DataBackfillTopic @join__type(graph: RQL) {
  action: reverb_feed_DataBackfillTopic_Action
  followIds: [Int]
  searchDuplicates: [reverb_feed_BackfillSearchDuplicate]
  _source: String
}

type reverb_feed_DigestFollows @join__type(graph: RQL) {
  follow: reverb_feed_Follow
  entries: [reverb_feed_FeedEntry]
  _source: String
}

type reverb_feed_DigestListings @join__type(graph: RQL) {
  listingIds: [String]
  _source: String
}

type reverb_feed_EntriesRequest @join__type(graph: RQL) {
  userId: String
  perPage: Int
  page: Int
  offset: Int
  locale: String
  limit: Int
  readFromDatabase: Boolean
  _source: String
}

"""
Favorite represents a row in the follows table (a link between a user and a saved search), and is a newer version of the Follow message.
"""
type reverb_feed_Favorite @join__type(graph: RQL) {
  id: String
  title: String
  subtitle: String
  queryParams: String
  searchableType: reverb_feed_SearchableType
  searchableId: String
  feedEnabled: Boolean
  emailEnabled: Boolean
  favorited: Boolean
  userId: String
  savedSearchId: String
  queryText: String
  _source: String
}

type reverb_feed_FeedEntry @join__type(graph: RQL) {
  """
  The `id` field contains a Listing ID. Technically it is the ID of the `EntryType` entity (`entries.entry_id`), but all entries are listings. It does not contain `entries.id`, which is a unique per-user-per-listing value.
  """
  id: Int
  """Currently, all entries are listings."""
  type: reverb_feed_FeedEntry_EntryType
  metadata: reverb_feed_FeedMetadata
  """
  The `uuid` field contains a Listing ID as a string, which is never a UUID. In the past when LP related feed entries were stored, this may have stored a UUID.
  """
  uuid: String
  """Unused by clients, still referenced in feed code & tests."""
  searchableType: reverb_feed_SearchableType @deprecated
  """Unused by clients, still referenced in feed code & tests."""
  searchableId: String @deprecated
  """Unused by clients, still referenced in feed code & tests."""
  queryParams: String @deprecated
  """
  Contains an array of _all_ localized content, 1 per supported locale. This method of handling localization is unusual, and makes client code more complex. The more common pattern is providing a single `FollowLocalizedContents` message (not an array) that is aware of the current user's locale.
  """
  localizedContents: [reverb_feed_FollowLocalizedContents]
  """
  The `deleted` field is for client state management, primarily Apollo Client in frontend.
  """
  deleted: Boolean
  """
  Only relevant for `UserDigestsResponse`, which returns entries for a batch of users.
  """
  userId: String
  entry: FeedEntry
  _source: String
}

type reverb_feed_FeedEntryUpdated @join__type(graph: RQL) {
  action: reverb_feed_FeedEntryUpdated_Action
  entries: [reverb_feed_FeedEntry]
  userId: Int
  sourceId: Int
  sourceType: reverb_feed_FeedSourceType
  sourceIds: [Int]
  """timestamp of first entry in feed pipeline"""
  entityUpdatedAt: Timestamp
  userIds: [Int]
  _source: String
}

"""Metadata for a feed entry."""
type reverb_feed_FeedMetadata @join__type(graph: RQL) {
  """All `source_type` values are `SAVED_SEARCH`."""
  sourceType: reverb_feed_FeedSourceType
  """The id of the saved search this entry was matched from."""
  sourceId: Int
  matchedAt: Timestamp
  """Unused by clients, still referenced in feed code & tests."""
  fromFeedService: Boolean @deprecated
  matchedAtIso: String
  _source: String
}

type reverb_feed_FeedResponse @join__type(graph: RQL) {
  entries: [reverb_feed_FeedEntry]
  page: Int
  perPage: Int
  total: Int
  offset: Int
  limit: Int
  filters: [reverb_search_Filter]
  _source: String
}

type reverb_feed_FeedService @join__type(graph: RQL) {
  GetFeedEntries(input: Input_reverb_feed_EntriesRequest): reverb_feed_FeedResponse
  GetFollows(input: Input_reverb_feed_FollowsRequest): reverb_feed_GetFollowsResponse
  FindFollow(input: Input_reverb_feed_FindFollowRequest): reverb_feed_GetFollowResponse
  FindFollowBySearchable(input: Input_reverb_feed_FindFollowBySearchableRequest): reverb_feed_GetFollowResponse
  FindFollowById(input: Input_reverb_feed_FindFollowByIdRequest): reverb_feed_GetFollowResponse
  FindFollowsBySearchable(input: Input_reverb_feed_FindFollowsBySearchableRequest): reverb_feed_FindFollowsBySearchableResponse
  GetSavedSearch(input: Input_reverb_feed_GetSavedSearchRequest): reverb_feed_GetSavedSearchResponse
  CreateSavedSearch(input: Input_reverb_feed_CreateSavedSearchRequest): reverb_feed_CreateSavedSearchResponse
  UpdateSavedSearch(input: Input_reverb_feed_UpdateSavedSearchRequest): reverb_feed_UpdateSavedSearchResponse
  RemoveFollow(input: Input_reverb_feed_RemoveFollowRequest): reverb_feed_GetFollowsResponse
  RemoveFollowsBySearchable(input: Input_reverb_feed_RemoveFollowsBySearchableRequest): reverb_feed_RemoveFollowsBySearchableResponse
  UpsertFollow(input: Input_reverb_feed_FollowUpdated): reverb_feed_UpsertFollowResponse
  SetFollowDigest(input: Input_reverb_feed_SetFollowDigestRequest): reverb_feed_SetFollowDigestResponse
  SetFollowDigestsByUser(input: Input_reverb_feed_SetFollowDigestsByUserRequest): reverb_feed_SetFollowDigestsByUserResponse
  GetAlertableUsers(input: Input_reverb_feed_AlertableUsersRequest): reverb_feed_AlertableUsersResponse
  GetAlertableUsersStream(input: Input_reverb_feed_AlertableUsersStreamRequest): reverb_feed_AlertableUsersResponse
  GetAlertableUsersInTzStream(input: Input_reverb_feed_AlertableUsersInTzStreamRequest): reverb_feed_AlertableUsersResponse
  GetAlertableUsersWithTzStream(input: Input_reverb_feed_AlertableUsersWithTzStreamRequest): reverb_feed_AlertableUsersWithTzResponse
  SetAlertableUsersTz(input: Input_reverb_feed_SetAlertableUsersTzRequest): reverb_feed_SetAlertableUsersTzResponse
  GetSavedSearchesStream(input: Input_reverb_feed_SavedSearchesStreamRequest): reverb_feed_SavedSearchesStreamResponse
  GetUserDigests(input: Input_reverb_feed_UserDigestsRequest): reverb_feed_UserDigestsResponse
  ClearUserDigest(input: Input_reverb_feed_ClearUserDigestRequest): reverb_feed_ClearUserDigestResponse
  PruneFeed(input: Input_reverb_feed_PruneFeedRequest): reverb_feed_PruneFeedResponse
  RemoveEntry(input: Input_reverb_feed_RemoveEntryRequest): reverb_feed_RemoveEntryResponse
  GetFollowedSavedSearches(input: Input_reverb_feed_GetFollowedSavedSearchesRequest): reverb_feed_GetFollowedSavedSearchesResponse
  GetFavoriteShops(input: Input_reverb_feed_GetFavoriteShopsRequest): reverb_feed_GetFavoriteShopsResponse
  GetFavoriteSavedSearches(input: Input_reverb_feed_GetFavoriteSavedSearchesRequest): reverb_feed_GetFavoriteSavedSearchesResponse
  UpsertFavorite(input: Input_reverb_feed_UpsertFavoriteRequest): reverb_feed_UpsertFavoriteResponse
  RemoveFavorite(input: Input_reverb_feed_RemoveFavoriteRequest): reverb_feed_RemoveFavoriteResponse
  FindFavorite(input: Input_reverb_feed_FindFavoriteRequest): reverb_feed_FindFavoriteResponse
  UndoRemoveFavorite(input: Input_reverb_feed_UndoRemoveFavoriteRequest): reverb_feed_UndoRemoveFavoriteResponse
  ReplaceFollowsSavedSearchId(input: Input_reverb_feed_ReplaceFollowsSavedSearchIdRequest): reverb_feed_ReplaceFollowsSavedSearchIdResponse
  BatchUpdateSavedSearchRecentListingCount(input: Input_reverb_feed_BatchUpdateSavedSearchRecentListingCountRequest): reverb_feed_BatchUpdateSavedSearchRecentListingCountResponse
  PreviewUserDigests(input: Input_reverb_feed_PreviewUserDigestsRequest): reverb_feed_UserDigestsResponse
  _source: String
}

type reverb_feed_FindFavoriteRequest @join__type(graph: RQL) {
  queryParams: String
  userId: String
  _source: String
}

type reverb_feed_FindFavoriteResponse @join__type(graph: RQL) {
  favorite: reverb_feed_Favorite
  _source: String
}

type reverb_feed_FindFollowByIdRequest @join__type(graph: RQL) {
  id: String
  userId: String
  _source: String
}

type reverb_feed_FindFollowBySearchableRequest @join__type(graph: RQL) {
  searchableId: String
  searchableType: reverb_feed_SearchableType
  userId: String
  _source: String
}

type reverb_feed_FindFollowRequest @join__type(graph: RQL) {
  queryParams: String
  userId: String
  _source: String
}

type reverb_feed_FindFollowsBySearchableRequest @join__type(graph: RQL) {
  searchableId: String
  searchableType: reverb_feed_SearchableType
  limit: Int
  offset: Int
  _source: String
}

type reverb_feed_FindFollowsBySearchableResponse @join__type(graph: RQL) {
  follows: [reverb_feed_Follow]
  limit: Int
  offset: Int
  total: Int
  _source: String
}

type reverb_feed_Follow @join__type(graph: RQL) {
  userId: String
  savedSearchId: String
  createdAt: Timestamp
  queryParams: String
  searchableType: reverb_feed_SearchableType
  searchableId: String
  id: String
  localizedContents: [reverb_feed_FollowLocalizedContents]
  digestEnabled: Boolean
  _source: String
}

"""Contains localized content for a saved search."""
type reverb_feed_FollowLocalizedContents @join__type(graph: RQL) {
  locale: String
  title: String
  subtitle: String
  shortDescription: String
  description: String
  _source: String
}

type reverb_feed_FollowUpdated @join__type(graph: RQL) {
  savedSearchId: Int
  userId: Int
  esQuery: String
  searchableType: reverb_feed_SearchableType
  searchableId: Int
  queryParams: String
  searchableUuid: String
  id: String
  localizedContents: [reverb_feed_FollowLocalizedContents]
  digestEnabled: Boolean
  _source: String
}

type reverb_feed_FollowsRequest @join__type(graph: RQL) {
  userId: String
  perPage: Int
  page: Int
  offset: Int
  locale: String
  _source: String
}

type reverb_feed_FollowsTopic @join__type(graph: RQL) {
  action: reverb_feed_FollowsTopic_Action
  followId: Int
  userId: Int
  searchableId: Int
  searchableType: reverb_feed_SearchableType
  followIds: [Int]
  _source: String
}

type reverb_feed_GetFavoriteSavedSearchesRequest @join__type(graph: RQL) {
  userId: String
  offset: Int
  limit: Int
  locale: String
  excludeOutlet: Boolean
  _source: String
}

type reverb_feed_GetFavoriteSavedSearchesResponse @join__type(graph: RQL) {
  favorites: [reverb_feed_Favorite]
  total: Int
  limit: Int
  offset: Int
  excludeOutlet: Boolean
  _source: String
}

type reverb_feed_GetFavoriteShopsRequest @join__type(graph: RQL) {
  userId: String
  offset: Int
  limit: Int
  locale: String
  _source: String
}

type reverb_feed_GetFavoriteShopsResponse @join__type(graph: RQL) {
  favoriteShops: [reverb_feed_Favorite]
  total: Int
  limit: Int
  offset: Int
  _source: String
}

type reverb_feed_GetFollowResponse @join__type(graph: RQL) {
  following: Boolean
  follow: reverb_feed_Follow
  followCount: Int
  _source: String
}

type reverb_feed_GetFollowedSavedSearchesRequest @join__type(graph: RQL) {
  startId: Int
  _source: String
}

type reverb_feed_GetFollowedSavedSearchesResponse @join__type(graph: RQL) {
  savedSearchIds: [Int]
  _source: String
}

type reverb_feed_GetFollowsResponse @join__type(graph: RQL) {
  follows: [reverb_feed_Follow]
  page: Int
  perPage: Int
  total: Int
  _source: String
}

type reverb_feed_GetSavedSearchRequest @join__type(graph: RQL) {
  id: Int
  withMostRecentFollow: Boolean
  _source: String
}

type reverb_feed_GetSavedSearchResponse @join__type(graph: RQL) {
  esQuery: String
  mostRecentFollowedUserId: String
  queryParams: String
  searchableType: reverb_feed_SearchableType
  searchableId: String
  localizedContents: [reverb_feed_FollowLocalizedContents]
  _source: String
}

type reverb_feed_PreviewUserDigestsRequest @join__type(graph: RQL) {
  users: [reverb_feed_User]
  matchedAfter: Timestamp
  normalized: Boolean
  _source: String
}

type reverb_feed_PruneFeedRequest @join__type(graph: RQL) {
  userId: String
  savedSearchId: Int
  fromFeedService: Boolean
  _source: String
}

type reverb_feed_PruneFeedResponse @join__type(graph: RQL) {
  _: Boolean
  _source: String
}

type reverb_feed_RemoveEntryRequest @join__type(graph: RQL) {
  entryId: String
  userId: String
  entryType: reverb_feed_FeedEntry_EntryType
  _source: String
}

type reverb_feed_RemoveEntryResponse @join__type(graph: RQL) {
  entry: reverb_feed_FeedEntry
  _source: String
}

type reverb_feed_RemoveFavoriteRequest @join__type(graph: RQL) {
  id: String
  userId: String
  _source: String
}

type reverb_feed_RemoveFavoriteResponse @join__type(graph: RQL) {
  favorite: reverb_feed_Favorite
  _source: String
}

type reverb_feed_RemoveFollowRequest @join__type(graph: RQL) {
  follow: reverb_feed_Follow
  locale: String
  removeEntries: Boolean
  _source: String
}

type reverb_feed_RemoveFollowsBySearchableRequest @join__type(graph: RQL) {
  searchableId: Int
  searchableType: reverb_feed_SearchableType
  _source: String
}

type reverb_feed_RemoveFollowsBySearchableResponse @join__type(graph: RQL) {
  _: Boolean
  _source: String
}

type reverb_feed_ReplaceFollowsSavedSearchIdRequest @join__type(graph: RQL) {
  oldSavedSearchId: Int
  newSavedSearchId: Int
  _source: String
}

type reverb_feed_ReplaceFollowsSavedSearchIdResponse @join__type(graph: RQL) {
  oldSavedSearchId: Int
  newSavedSearchId: Int
  followsUpdatedCount: Int
  _source: String
}

type reverb_feed_SavedSearchStreamResponse @join__type(graph: RQL) {
  savedSearchId: Int
  queryParams: String
  _source: String
}

type reverb_feed_SavedSearchesStreamRequest @join__type(graph: RQL) {
  chunkSize: Int
  fromId: Int
  _source: String
}

type reverb_feed_SavedSearchesStreamResponse @join__type(graph: RQL) {
  savedSearches: [reverb_feed_SavedSearchStreamResponse]
  _source: String
}

type reverb_feed_SetAlertableUsersTzRequest @join__type(graph: RQL) {
  tzRegion: Int
  userIds: [String]
  _source: String
}

type reverb_feed_SetAlertableUsersTzResponse @join__type(graph: RQL) {
  _: Boolean
  _source: String
}

type reverb_feed_SetFollowDigestRequest @join__type(graph: RQL) {
  id: String
  userId: String
  digestEnabled: Boolean
  locale: String
  _source: String
}

type reverb_feed_SetFollowDigestResponse @join__type(graph: RQL) {
  follow: reverb_feed_Follow
  _source: String
}

type reverb_feed_SetFollowDigestsByUserRequest @join__type(graph: RQL) {
  userId: String
  digestsEnabled: Boolean
  _source: String
}

type reverb_feed_SetFollowDigestsByUserResponse @join__type(graph: RQL) {
  follows: [reverb_feed_Follow]
  _source: String
}

type reverb_feed_UndoRemoveFavoriteRequest @join__type(graph: RQL) {
  id: String
  userId: String
  _source: String
}

type reverb_feed_UndoRemoveFavoriteResponse @join__type(graph: RQL) {
  favorite: reverb_feed_Favorite
  _source: String
}

type reverb_feed_UpdateSavedSearchRequest @join__type(graph: RQL) {
  id: Int
  esQuery: String
  searchableId: String
  searchableType: reverb_feed_SearchableType
  queryParams: String
  localizedContents: [reverb_feed_FollowLocalizedContents]
  _source: String
}

type reverb_feed_UpdateSavedSearchResponse @join__type(graph: RQL) {
  id: Int
  _source: String
}

type reverb_feed_UpsertFavoriteRequest @join__type(graph: RQL) {
  userId: Int
  esQuery: String
  searchableType: reverb_feed_SearchableType
  searchableId: String
  queryParams: String
  emailEnabled: Boolean
  feedEnabled: Boolean
  localizedContents: [reverb_feed_FollowLocalizedContents]
  _source: String
}

type reverb_feed_UpsertFavoriteResponse @join__type(graph: RQL) {
  favorite: reverb_feed_Favorite
  _source: String
}

type reverb_feed_UpsertFollowResponse @join__type(graph: RQL) {
  follow: reverb_feed_Follow
  following: Boolean
  followCount: Int
  _source: String
}

type reverb_feed_User @join__type(graph: RQL) {
  userId: String
  locale: String
  lastActiveAt: Timestamp
  _source: String
}

type reverb_feed_UserDigest @join__type(graph: RQL) {
  userId: String
  digestFollows: [reverb_feed_DigestFollows]
  _source: String
}

type reverb_feed_UserDigestsRequest @join__type(graph: RQL) {
  users: [reverb_feed_User]
  matchedAfter: Timestamp
  _source: String
}

type reverb_feed_UserDigestsResponse @join__type(graph: RQL) {
  userDigests: [reverb_feed_UserDigest]
  _source: String
}

type reverb_feed_Users @join__type(graph: RQL) {
  users: [reverb_feed_User]
  _source: String
}

type reverb_personalization_GetTrendingSearchesRequest @join__type(graph: RQL) {
  nResults: Int
  categoryUuids: [String]
  _source: String
}

type reverb_personalization_GetUserRequest @join__type(graph: RQL) {
  id: String
  version: Int
  _source: String
}

type reverb_personalization_Personalization @join__type(graph: RQL) {
  GetUser(input: Input_reverb_personalization_GetUserRequest): reverb_personalization_User
  RefreshListingRecommendations(input: Input_reverb_personalization_RefreshListingRecommendationsRequest): google_protobuf_Empty
  RefreshListingRecsV2(input: Input_reverb_personalization_RefreshListingRecommendationsRequestV2): google_protobuf_Empty
  RefreshTrendingSearches(input: Input_reverb_personalization_RefreshTrendingSearchesRequest): google_protobuf_Empty
  GetTrendingSearches(input: Input_reverb_personalization_GetTrendingSearchesRequest): reverb_personalization_TrendingSearchesResponse
  GetQuerySuggestions(input: Input_reverb_personalization_QuerySuggestionsRequest): reverb_personalization_QuerySuggestionsResponse
  RefreshQuerySuggestions(input: Input_reverb_personalization_RefreshQuerySuggestionsRequest): google_protobuf_Empty
  _source: String
}

type reverb_personalization_QuerySuggestionResponse @join__type(graph: RQL) {
  query: reverb_personalization_SearchQuery
  suggestions: [reverb_personalization_SearchQuery]
  _source: String
}

type reverb_personalization_QuerySuggestionsRequest @join__type(graph: RQL) {
  queries: [reverb_personalization_SearchQuery]
  limitPerQuery: Int
  _source: String
}

type reverb_personalization_QuerySuggestionsResponse @join__type(graph: RQL) {
  queries: [reverb_personalization_QuerySuggestionResponse]
  _source: String
}

type reverb_personalization_RefreshListingRecommendationsRequest @join__type(graph: RQL) {
  _: Boolean
  _source: String
}

type reverb_personalization_RefreshListingRecommendationsRequestV2 @join__type(graph: RQL) {
  runId: String
  _source: String
}

type reverb_personalization_RefreshQuerySuggestionsRequest @join__type(graph: RQL) {
  _: Boolean
  _source: String
}

type reverb_personalization_RefreshTrendingSearchesRequest @join__type(graph: RQL) {
  _: Boolean
  _source: String
}

type reverb_personalization_SearchQuery @join__type(graph: RQL) {
  query: String
  productType: String
  make: String
  category: String
  listingIds: [Int]
  listings: [Listing]
  _source: String
}

type reverb_personalization_TrendingSearch @join__type(graph: RQL) {
  query: String
  score: Float
  categorySlug: String
  categoryUuid: String
  listingIds: [String]
  listings: [Listing]
  queryParams: String
  _source: String
}

type reverb_personalization_TrendingSearchesResponse @join__type(graph: RQL) {
  trendingSearches: [reverb_personalization_TrendingSearch]
  _source: String
}

type reverb_personalization_User @join__type(graph: RQL) {
  id: String
  recommendedListingIds: [String]
  _source: String
}

type reverb_pricing_CSPPriceRecommendationQuery @join__type(graph: RQL) {
  comparisonShoppingPageId: String
  conditionUuid: String
  currency: String
  countryCode: String
  _source: String
}

type reverb_pricing_CSPPriceRecommendationsRequest @join__type(graph: RQL) {
  cspPriceRecommendationQueries: [reverb_pricing_CSPPriceRecommendationQuery]
  version: Int @deprecated
  modelVersion: reverb_pricing_ModelVersion
  _source: String
}

type reverb_pricing_PriceRecommendationQuery @join__type(graph: RQL) {
  canonicalProductId: String
  conditionUuid: String
  currency: String
  countryCode: String
  _source: String
}

type reverb_pricing_PriceRecommendationsRequest @join__type(graph: RQL) {
  priceRecommendationQueries: [reverb_pricing_PriceRecommendationQuery]
  version: Int @deprecated
  modelVersion: reverb_pricing_ModelVersion
  _source: String
}

type reverb_pricing_PriceRecommendationsResponse @join__type(graph: RQL) {
  priceRecommendations: [reverb_pricing_PriceRecommendation]
  _source: String
}

type reverb_pricing_PriceScore @join__type(graph: RQL) {
  canonicalProductId: String
  conditionUuid: String
  priceScore: Float
  priceMiddle: reverb_pricing_Money
  absResidual: Float
  _source: String
}

type reverb_pricing_PriceScoreQuery @join__type(graph: RQL) {
  canonicalProductId: String
  conditionUuid: String
  price: reverb_pricing_Money
  countryCode: String
  _source: String
}

type reverb_pricing_PriceScoresRequest @join__type(graph: RQL) {
  priceScoreQueries: [reverb_pricing_PriceScoreQuery]
  version: Int @deprecated
  modelVersion: reverb_pricing_ModelVersion
  _source: String
}

type reverb_pricing_PriceScoresResponse @join__type(graph: RQL) {
  priceScores: [reverb_pricing_PriceScore]
  _source: String
}

type reverb_pricing_Pricing @join__type(graph: RQL) {
  GetPriceRecommendations(input: Input_reverb_pricing_PriceRecommendationsRequest): reverb_pricing_PriceRecommendationsResponse
  GetCSPPriceRecommendations(input: Input_reverb_pricing_CSPPriceRecommendationsRequest): reverb_pricing_PriceRecommendationsResponse
  GetPriceScores(input: Input_reverb_pricing_PriceScoresRequest): reverb_pricing_PriceScoresResponse
  _source: String
}

type reverb_reporting_CSPStats @join__type(graph: RQL) {
  liveListingCount: Int
  minListingPriceUsc: reverb_reporting_Int32Value
  orderQuantity: Int
  totalOrderValueUsc: Int
  """total_order_value_usc / order_quantity"""
  avgOrderPriceUsc: reverb_reporting_Int32Value
  _source: String
}

type reverb_reporting_CSPStatsByCSP @join__type(graph: RQL) {
  cspId: String
  cspSlug: String
  brandSlug: String
  liveListingCount: Int
  minListingPriceUsc: reverb_reporting_Int32Value
  orderQuantity: Int
  totalOrderValueUsc: Int
  """total_order_value_usc / order_quantity"""
  avgOrderPriceUsc: reverb_reporting_Int32Value
  csp: CSP
  _source: String
}

type reverb_reporting_CSPStatsByCSPRequest @join__type(graph: RQL) {
  cspIds: [String]
  cspSlugs: [String]
  brandSlugs: [String]
  dateStart: String
  dateEnd: String
  condition: reverb_reporting_Condition
  includeTotal: Boolean
  orderBy: reverb_reporting_CSPStatsMetric
  orderDesc: Boolean
  limit: Int
  offset: Int
  _source: String
}

type reverb_reporting_CSPStatsByCSPResponse @join__type(graph: RQL) {
  byCsp: [reverb_reporting_CSPStatsByCSP]
  totalCount: Int
  _source: String
}

type reverb_reporting_CSPStatsByDate @join__type(graph: RQL) {
  date: String
  liveListingCount: Int
  minListingPriceUsc: reverb_reporting_Int32Value
  orderQuantity: Int
  totalOrderValueUsc: Int
  """total_order_value_usc / order_quantity"""
  avgOrderPriceUsc: reverb_reporting_Int32Value
  _source: String
}

type reverb_reporting_CSPStatsByDateResponse @join__type(graph: RQL) {
  """Agg across csps, 1 row/date"""
  byDate: [reverb_reporting_CSPStatsByDate]
  _source: String
}

type reverb_reporting_CSPStatsRequest @join__type(graph: RQL) {
  cspIds: [String]
  cspSlugs: [String]
  brandSlugs: [String]
  dateStart: String
  dateEnd: String
  condition: reverb_reporting_Condition
  _source: String
}

"""
  To represent a null or an integer. Including in this package instead of using
the google wrapper because we need to implement a Scan method for reading
from db
"""
type reverb_reporting_Int32Value @join__type(graph: RQL) {
  value: Int
  _source: String
}

type reverb_reporting_Reporting @join__type(graph: RQL) {
  CSPStatsTotal(input: Input_reverb_reporting_CSPStatsRequest): reverb_reporting_CSPStats
  CSPStatsByDate(input: Input_reverb_reporting_CSPStatsRequest): reverb_reporting_CSPStatsByDateResponse
  CSPStatsByCSP(input: Input_reverb_reporting_CSPStatsByCSPRequest): reverb_reporting_CSPStatsByCSPResponse
  ShopStats(input: Input_reverb_reporting_ShopStatsRequest): reverb_reporting_ShopStatsResponse
  ShopStatsByDate(input: Input_reverb_reporting_ShopStatsByDateRequest): reverb_reporting_ShopStatsByDateResponse
  ShopStatsCurrencyCount(input: Input_reverb_reporting_ShopStatsRequest): reverb_reporting_ShopStatsCurrencyCountResponse
  CspsCtrByDateRange(input: Input_reverb_reporting_ctr_CspsCtrByDateRangeRequest): reverb_reporting_ctr_CspsCtrByDateRangeResponse
  _source: String
}

type reverb_reporting_ShopStatsByDateRequest @join__type(graph: RQL) {
  shopId: String
  currency: String
  startTime: String
  endTime: String
  timeGrouping: reverb_reporting_TimeGrouping
  timeZone: String
  _source: String
}

type reverb_reporting_ShopStatsByDateResponse @join__type(graph: RQL) {
  buckets: [reverb_reporting_ShopStatsTimeBucket]
  _source: String
}

type reverb_reporting_ShopStatsCurrencyCountResponse @join__type(graph: RQL) {
  currencyCount: Int
  _source: String
}

type reverb_reporting_ShopStatsRequest @join__type(graph: RQL) {
  shopId: String
  currency: String
  startTime: String
  endTime: String
  _source: String
}

type reverb_reporting_ShopStatsResponse @join__type(graph: RQL) {
  salesCents: Int
  watchersCount: Int
  offersCount: Int
  ordersCount: Int
  messagesCount: Int
  _source: String
}

type reverb_reporting_ShopStatsTimeBucket @join__type(graph: RQL) {
  timestamp: String
  salesCents: Int
  _source: String
}

type reverb_reporting_ctr_CspCtr @join__type(graph: RQL) {
  cspId: String
  impressions: Int
  clicks: Int
  _source: String
}

type reverb_reporting_ctr_CspsCtrByDateRangeRequest @join__type(graph: RQL) {
  cspIds: [String]
  datetimeStart: String
  datetimeEnd: String
  _source: String
}

type reverb_reporting_ctr_CspsCtrByDateRangeResponse @join__type(graph: RQL) {
  ctrs: [reverb_reporting_ctr_CspCtr]
  _source: String
}

type reverb_search_AggregationDetails @join__type(graph: RQL) {
  key: String
  count: Int
  displayName: String
  _source: String
}

type reverb_search_AggregationResult @join__type(graph: RQL) {
  name: reverb_search_ListingsSearchRequest_Aggregation
  aggregationDetails: [reverb_search_AggregationDetails]
  displayName: String
  _source: String
}

type reverb_search_AuctionsSearchRequest @join__type(graph: RQL) {
  bidderId: String
  query: String
  offset: Int
  limit: Int
  withAggregations: [reverb_search_AuctionsSearchRequest_Aggregation]
  userBidStatus: reverb_search_AuctionsSearchRequest_UserBidStatus
  merchandisingTypes: [reverb_search_AuctionsSearchRequest_MerchandisingType]
  _source: String
}

type reverb_search_AutocompleteRequest @join__type(graph: RQL) {
  query: String
  locale: String
  shippingRegionCode: String
  currency: String
  limit: reverb_search_AutocompleteRequest_Limit
  _source: String
}

type reverb_search_AutocompleteResponse @join__type(graph: RQL) {
  suggestions: [reverb_search_AutocompleteSuggestion]
  _source: String
}

type reverb_search_AutocompleteSuggestion @join__type(graph: RQL) {
  text: String
  subtext: String
  url: reverb_search_Link
  type: String
  _source: String
}

type reverb_search_AverageMonthlyProductPrice @join__type(graph: RQL) {
  date: String
  averageProductPriceInUsd: reverb_search_Money
  docCount: Int
  averageProductPrice: reverb_search_Money
  _source: String
}

"""
Used for feed related queries to find live listings that match any of a user's saved searches.
"""
type reverb_search_BatchListingsSearchRequest @join__type(graph: RQL) {
  """
  Array of JSON-serialized strings. Each string represents query params for 1 search (saved search filters), such as '[{"query":"sp 1200", "currency": "USD", "price_max": "2000.00" }, {"query": "telecaster", "brand_slugs":["fender"]}]'.
  """
  queryParams: [String]
  """
  Optional top-level filters to apply across all results: ((query_params_1 OR query_params_2) AND (listings_filters)).
  """
  listingsFilters: reverb_search_ListingsSearchRequest
  """
  Optional top-level pagination param, use this instead of `listings_filters.limit`.
  """
  limit: Int
  """
  Optional top-level pagination param, use this instead of `listings_filters.offset`.
  """
  offset: Int
  _source: String
}

"""
Request for feed related queries that check if a batch of searches matched any recently updated listings.
"""
type reverb_search_BatchMatchedListingsSearchRequest @join__type(graph: RQL) {
  searches: [reverb_search_BatchMatchedListingsSearchRequest_SearchInput]
  """ISO-8601 timestamp string"""
  updatedAfter: String
  _source: String
}

type reverb_search_BatchMatchedListingsSearchRequest_SearchInput @join__type(graph: RQL) {
  searchId: String
  queryParams: String
  _source: String
}

"""
Response for feed related queries that check if a batch of searches matched any recently updated listings.
"""
type reverb_search_BatchMatchedListingsSearchResponse @join__type(graph: RQL) {
  matchedListingsSearchResults: [reverb_search_BatchMatchedListingsSearchResponse_SearchResult]
  _source: String
}

type reverb_search_BatchMatchedListingsSearchResponse_SearchResult @join__type(graph: RQL) {
  searchId: String
  total: Int
  result: reverb_search_BatchMatchedListingsSearchResponse_SearchResult_ResultType
  _source: String
}

type reverb_search_BestListing @join__type(graph: RQL) {
  key: String
  id: String
  _source: String
}

type reverb_search_BumpRecommendationsResults @join__type(graph: RQL) {
  bumpRecommendationAmount: Float
  maxBumpRecommendationAmount: Float
  _source: String
}

type reverb_search_BumpedSortedListingsQuery @join__type(graph: RQL) {
  total: Int
  bumpedMax: Int
  condition: String
  itemRegion: String
  _source: String
}

type reverb_search_CMSPagesSearchRequest @join__type(graph: RQL) {
  offset: Int
  limit: Int
  ids: [String]
  fullTextQuery: String
  pageTypes: [String]
  _source: String
}

type reverb_search_CSPInventory @join__type(graph: RQL) {
  usedTotal: Int
  newTotal: Int
  newLowPrice: reverb_search_Money
  usedLowPrice: reverb_search_Money
  _source: String
}

type reverb_search_CSPResponse @join__type(graph: RQL) {
  id: String
  title: String
  webLink: String
  newListingsLink: String @deprecated
  usedListingsLink: String @deprecated
  cardSquareImageUrl: String
  thumbnailImageUrl: String
  inventory: reverb_search_CSPInventory
  reviewsCount: Int
  averageReviewRating: Float
  uuid: String
  slug: String
  _source: String
}

type reverb_search_CSPSearchRequest @join__type(graph: RQL) {
  fullTextQuery: String
  fuzzy: Boolean
  locale: String
  offset: Int
  limit: Int
  withAggregations: [reverb_search_CSPSearchRequest_Aggregation]
  brandNames: [String]
  finishes: [String]
  categoryUuids: [String]
  decades: [String]
  suggestTitle: String
  excludedCategoryUuids: [String]
  curatedSetId: String
  condition: String
  withInventory: Boolean
  listingsThatShipTo: String
  sortByQuality: Boolean
  boostByClicks: Boolean
  withLimitedAggregations: reverb_search_LimitedAggregation
  categorySlugs: [String]
  brandSlugs: [String]
  maxPriceUsdCents: Int
  minPriceUsdCents: Int
  yearMin: Int
  yearMax: Int
  curatedSetSlugs: [String]
  fullTextQueryOperand: reverb_search_FullTextQueryOperand
  sort: reverb_search_CSPSearchRequest_Sort
  slugs: [String]
  includeFields: [String]
  similarListingId: String
  similarCspSlug: String
  currency: String
  ids: [String]
  includeOutOfStock: Boolean
  searchUrlParams: String
  priceMax: String
  priceMin: String
  traitValues: [String]
  uuids: [String]
  traitSlugs: [String]
  es7: Boolean
  hasExpressSaleBid: Boolean
  countryOfOrigin: [String]
  autodirects: reverb_search_Autodirects
  skipAutodirects: Boolean
  contexts: [reverb_search_Context]
  _source: String
}

type reverb_search_Completion @join__type(graph: RQL) {
  text: String
  options: [reverb_search_SuggestOption]
  type: reverb_search_CompletionType
  _source: String
}

type reverb_search_CompletionsRequest @join__type(graph: RQL) {
  query: String
  types: [reverb_search_CompletionType]
  currency: String
  shippingRegionCode: String
  locale: String
  experiments: [String]
  hideStaleListings: Boolean
  _source: String
}

type reverb_search_DateBucket @join__type(graph: RQL) {
  """ISO8601 date"""
  fromDate: String
  """ISO8601 date"""
  toDate: String
  metrics: reverb_search_OrderMetrics
  _source: String
}

type reverb_search_Distance @join__type(graph: RQL) {
  """/ Both whole numbers and decimals are supported."""
  value: String
  unit: reverb_search_Distance_DistanceUnit
  _source: String
}

type reverb_search_Document @join__type(graph: RQL) {
  id: String
  source: String
  type: String
  esCsp: reverb_search_CSPResponse
  esGearCollectionItem: reverb_search_GearCollectionItemResponse
  node: Node
  _source: String
}

type reverb_search_ExperimentData @join__type(graph: RQL) {
  name: String
  groupNum: Int
  group: String
  _source: String
}

type reverb_search_GearCollectionItemResponse @join__type(graph: RQL) {
  id: String
  priceEstimate: reverb_search_PriceEstimate
  _source: String
}

type reverb_search_GearCollectionItemsSearchRequest @join__type(graph: RQL) {
  offset: Int
  limit: Int
  withAggregations: [reverb_search_GearCollectionItemsSearchRequest_Aggregation]
  userUuids: [String]
  categoryUuids: [String]
  categorySlugs: [String]
  ids: [String]
  withCollectionStats: Boolean
  currency: String
  tags: [String]
  canonicalProductIds: [String]
  states: [String]
  _source: String
}

type reverb_search_GearCollectionStats @join__type(graph: RQL) {
  totalCollectionEstimate: reverb_search_GearCollectionTotalEstimate
  _source: String
}

type reverb_search_GearCollectionTotalEstimate @join__type(graph: RQL) {
  totalEstimateLow: reverb_search_Money
  totalEstimateHigh: reverb_search_Money
  _source: String
}

type reverb_search_Inventory @join__type(graph: RQL) {
  listingCount: Int
  listingMinPrice: reverb_search_Money
  _source: String
}

type reverb_search_LPAlbumSearchRequest @join__type(graph: RQL) {
  offset: Int
  limit: Int
  suggest: String
  artistUuid: String
  ids: [String]
  artistSlug: String
  withInventory: Boolean
  slugs: [String]
  _source: String
}

type reverb_search_LPArtistSearchRequest @join__type(graph: RQL) {
  offset: Int
  limit: Int
  suggest: String
  _source: String
}

type reverb_search_LPCompletionsRequest @join__type(graph: RQL) {
  query: String
  _source: String
}

type reverb_search_LPLabelSearchRequest @join__type(graph: RQL) {
  offset: Int
  limit: Int
  suggest: String
  _source: String
}

type reverb_search_LPListingsSearchRequest @join__type(graph: RQL) {
  releaseUuid: String
  offset: Int
  limit: Int
  excludeIds: [String]
  sort: String
  includeBestListings: Boolean
  releaseSlug: String
  albumSlug: String
  shippingRegion: String
  condition: reverb_search_LPListingsSearchRequest_Condition
  format: [String]
  country: [String]
  mediaCondition: [String]
  sleeveCondition: [String]
  releaseDecades: [String]
  lengths: [String]
  acceptsDirectCheckout: Boolean
  acceptsOffers: Boolean
  priceRange: String
  priceMinCents: Int
  priceMaxCents: Int
  currency: String
  sidebarSearch: String
  ids: [String]
  onSale: Boolean
  auctions: Boolean
  itemRegion: String
  storefrontSlug: String
  noAuctions: Boolean
  _source: String
}

type reverb_search_LPReleasesSearchRequest @join__type(graph: RQL) {
  masterUuid: String
  sort: String
  countries: [String]
  formatUuids: [String]
  releaseDecades: [String]
  fullTextQuery: String
  withInventory: Boolean
  withAggregations: [reverb_search_LPReleasesSearchRequest_Aggregation]
  offset: Int
  limit: Int
  withLimitedAggregations: reverb_search_LimitedAggregation
  _source: String
}

type reverb_search_LPTransactionsSearchRequest @join__type(graph: RQL) {
  actionableStatuses: [reverb_search_LPTransactionsSearchRequest_ActionableStatus]
  createdAfter: String
  createdBefore: String
  filterPurchased: Boolean
  releaseUuids: [String]
  withAggregations: [reverb_search_LPTransactionsSearchRequest_Aggregation]
  withLimitedAggregations: reverb_search_LimitedAggregation
  _source: String
}

type reverb_search_LimitedAggregation @join__type(graph: RQL) {
  brandUuids: Int
  categoryUuids: Int
  _source: String
}

type reverb_search_Link @join__type(graph: RQL) {
  href: String
  """rel path for use in web routing"""
  path: String
  _source: String
}

type reverb_search_ListingRecommendationStats @join__type(graph: RQL) {
  totalGreaterThanCompetitivePrice: Int
  totalWithWatchersAndWithoutAutoOffers: Int
  _source: String
}

type reverb_search_ListingRecommendationsRequest @join__type(graph: RQL) {
  mparticleProfileResponse: reverb_search_MparticleProfileResponse @deprecated
  brandCategories: [String]
  _source: String
}

type reverb_search_ListingsAggregationResponse @join__type(graph: RQL) {
  aggregationResults: [reverb_search_AggregationResult]
  topCollections: reverb_search_TopCollectionsResult
  shops: [Shop]
  _source: String
}

type reverb_search_ListingsPercolationQueryRequest @join__type(graph: RQL) {
  savedSearchQueryParams: String
  _source: String
}

type reverb_search_ListingsPercolationQueryResponse @join__type(graph: RQL) {
  esQuery: String
  _source: String
}

type reverb_search_ListingsSearchRequest @join__type(graph: RQL) {
  brandUuids: [String]
  categoryUuids: [String]
  conditionUuids: [String]
  curatedSetId: String
  currency: String
  locale: String
  priceMax: String
  priceMin: String
  query: String
  sort: reverb_search_ListingsSearchRequest_Sort
  statuses: [String]
  yearMax: String
  yearMin: String
  aggregationsOnly: Boolean
  limit: Int
  offset: Int
  withLimitedAggregations: reverb_search_LimitedAggregation
  withAggregations: [reverb_search_ListingsSearchRequest_Aggregation]
  conditionSlugs: [String]
  shippingRegionCodes: [String]
  onSale: Boolean
  saleCuratedSetId: String
  brandSlugs: [String]
  categorySlugs: [String]
  curatedSetSlugs: [String]
  saleSlugs: [String]
  handmade: Boolean
  freeShipping: Boolean
  freeExpeditedShipping: Boolean
  acceptsOffers: Boolean
  acceptsGiftCards: Boolean
  preferredSeller: Boolean
  acceptsPaymentPlans: Boolean
  itemRegion: String
  holidaySale: Boolean
  shopSlug: String
  ids: [String]
  sortSlug: String
  bumpCount: Int
  showOnlySold: Boolean
  decades: [String]
  traitValues: [String]
  cspSlug: String
  showSold: Boolean
  withTopCollections: reverb_search_TopCollectionsRequest
  itemState: [String]
  itemCity: [String]
  bumpedSortedListingsQuery: reverb_search_BumpedSortedListingsQuery
  fallbackToOr: Boolean
  bumpedOnly: Boolean
  filterSuperRegionCode: String
  canonicalFinishes: [String]
  shopId: String
  randomSeed: Int
  """Deprecated"""
  withPageMetadata: reverb_search_PageMetaDataRequest
  shopSlugs: [String]
  searchUrlParams: String
  excludeMerchandisingTypes: [String]
  boostByBumpRate: Boolean
  cspId: String
  notMatchedToCsp: Boolean
  combinedShipping: Boolean
  boostCombinedShippingCategories: [String]
  excludeShopIds: [String]
  collapsible: reverb_search_ListingsSearchRequest_Collapsible
  priceValue: reverb_search_ListingsSearchRequest_PriceValue
  experiments: [String]
  acceptsAffirm: Boolean
  terminateEarly: Boolean
  withProximityFilter: reverb_search_ProximityFilterRequest
  localPickup: Boolean
  querylessBumpBoost: Boolean @deprecated
  proximity: reverb_search_ProximityRequest
  traitSlugs: [String]
  shopUuids: [String]
  es7: Boolean @deprecated
  trackTotalHits: reverb_search_TrackTotalHits
  minSaleDiscountPercent: String
  boostedItemRegionCode: String
  useExperimentalQuery: Boolean @deprecated
  dealsOrWellPriced: Boolean
  similarListingIds: [String]
  useExperimentalBestMatchSignalsV1: Boolean @deprecated
  useExperimentalRecall: Boolean
  bestMatchSignalsV2ExperimentGroup: Int @deprecated
  useExperimentalRegionBoost: Boolean @deprecated
  shipsToMe: Boolean
  priceValueV2: reverb_search_ListingsSearchRequest_PriceValue
  withMyShopAggregations: [reverb_search_ListingsSearchRequest_MyShopAggregation]
  likelihoodToSellExperimentGroup: Int @deprecated
  useTotalPrice: Boolean @deprecated
  mpTotalPriceExperimentGroup: Int @deprecated
  countryOfOrigin: [String]
  itemRegionRelation: reverb_search_ListingItemRegionRelation
  ecsBoostExperimentGroup: Int @deprecated
  autodirects: reverb_search_Autodirects
  skipAutodirects: Boolean
  listingRecommendationsVersion: Int
  canonicalProductIds: [String]
  includeDrafts: Boolean
  contexts: [reverb_search_Context]
  fallbackToEverywhereElse: Boolean
  excludeLocalPickupOnly: Boolean
  includeQuerySpellCorrections: Boolean
  dealsAndSteals: Boolean
  multiClientExperiments: [reverb_search_ExperimentData]
  greatValue: Boolean
  notGreatValue: Boolean
  greatValueForUsedListings: Boolean
  notGreatValueForUsedListings: Boolean
  mpid: String
  showBestPriceListingsSort: Boolean
  excludeCuratedSets: [String]
  showLikelihoodToSellSort: Boolean
  excludeCarrierCalculated: Boolean
  excludePreorders: Boolean
  excludeCategoryUuids: [String]
  excludeBrandSlugs: [String]
  isUserInCspOptimizationExp: Boolean
  outlet: Boolean
  shippingProfileId: String
  calculatedRate: Boolean
  flatRate: Boolean
  shipsInternationally: Boolean
  shopRegionCode: String
  acceptsBuyerOffers: Boolean
  noBuyerOffers: Boolean
  acceptsAutoOffers: Boolean
  noAutoOffers: Boolean
  zeroPercentFinancingEligible: Boolean
  financingCuratedSetId: String
  eligibleForSales: Boolean
  hasWatchers: Boolean
  inBuyerCarts: Boolean
  withListingRecommendationStats: Boolean
  showMostWatchedListingsSort: Boolean
  onlyStale: Boolean
  excludeStale: Boolean
  applyProximityBoost: Boolean
  _source: String
}

type reverb_search_ListingsSearchResult @join__type(graph: RQL) {
  id: String
  fieldKeys: [String]
  fieldValues: [String]
  _source: String
}

type reverb_search_Location @join__type(graph: RQL) {
  type: reverb_search_Location_LocationType
  value: String
  _source: String
}

type reverb_search_MeResponse @join__type(graph: RQL) {
  """users.id"""
  id: String
  uuid: String
  shopUuid: String
  admin: Boolean
  status: reverb_search_UserStatus
  shopId: String
  shopSlug: String
  requireOptIn: Boolean
  _source: String
}

type reverb_search_Money @join__type(graph: RQL) {
  cents: Float
  currency: String
  """
  carries same data as `cents`, but uses field naming expected by frontend/core money helpers
  """
  amountCents: Int
  symbol: String
  display: String
  amount: String
  _source: String
}

type reverb_search_MparticleProfileResponse @join__type(graph: RQL) {
  mpid: String
  topProductType: String
  topProductTypes: [String]
  topCategories: [String]
  topBrands: [String]
  recentlyViewedCsps: [String]
  averageOrderValue: Float
  totalListingsCreated: Int
  totalListingsSold: Int
  totalListingsDraft: Int
  totalListingsSuspended: Int
  totalListingsLive: Int
  cumulativeGmv: Float
  totalPurchases: Int
  buyerLabel: String
  sellerLabel: String
  totalFeedFollows: Int
  totalBuyerOffersCreated: Int
  totalBuyerOffersAccepted: Int
  sellerFeedbackRating: Float
  buyerFeedbackRating: Float
  mostRecentOrderDate: String
  firstOrderDate: String
  topProductTypeUuids: [String]
  topCategoryUuids: [String]
  topBrandCategories: [String]
  brandCategories: [String]
  topMostRecentProductTypes: [String]
  _source: String
}

type reverb_search_NegotiationSearchRequest @join__type(graph: RQL) {
  offset: Int
  limit: Int
  sellerUuids: [String]
  buyerUuids: [String]
  states: [reverb_search_NegotiationSearchRequest_State]
  ids: [String]
  listingIds: [String]
  sort: String
  fullTextQuery: String
  participantUuids: [String]
  negotiationTypes: [reverb_search_NegotiationSearchRequest_Type]
  withAggregations: [reverb_search_NegotiationSearchRequest_Aggregation]
  _source: String
}

type reverb_search_OrderMetrics @join__type(graph: RQL) {
  totalAmountProductCentsUsd: Int
  averageProductPriceCentsUsd: Int
  topCsps: [reverb_search_TopCSP]
  orderCount: Int
  totalAmountProductCentsUsdDouble: Float
  totalSellerRevenueAmount: reverb_search_Money
  totalBumpSpendAmount: reverb_search_Money
  _source: String
}

type reverb_search_OrderSearchRequest @join__type(graph: RQL) {
  offset: Int
  limit: Int
  buyerUuid: String
  sellerUuid: String
  checkoutUuid: String
  actionableStatuses: [String]
  shippingMethods: [String]
  cspSlugs: [String]
  withMetricAggregations: Boolean
  createdBeforeDate: String
  createdAfterDate: String
  brandSlugs: [String]
  aggregationsOnly: Boolean
  listingConditionSlugs: [String]
  listingCategoryUuids: [String]
  listingConditionUuids: [String]
  canonicalProductIds: [String]
  sellerCountries: [String]
  withPriceStatsAggregations: Boolean
  soldWithBumpOnly: Boolean
  soldWithoutBumpOnly: Boolean
  withAggregations: [reverb_search_OrderSearchRequest_Aggregation]
  categorySlugs: [String]
  categoryUuids: [String]
  conditionSlugs: [String]
  shopCurrency: String
  minAmountProductCentsUsd: String
  maxAmountProductCentsUsd: String
  withGearCollectionItemOnly: Boolean
  withoutGearCollectionItemOnly: Boolean
  searchUrlParams: String
  orderType: String
  expressSaleItemEvaluation: String
  listingId: String
  fullTextQuery: String
  actionableStatusGroup: String
  withAverageMonthlyProductPricesAggregations: Boolean
  averageMonthlyProductPricesCurrency: String
  _source: String
}

"""Deprecated"""
type reverb_search_PageMetaDataRequest @join__type(graph: RQL) {
  excludeCategories: Boolean
  excludeBrands: Boolean
  _source: String
}

type reverb_search_Percentile @join__type(graph: RQL) {
  key: String
  count: Int
  p1: Float
  p5: Float
  p25: Float
  p50: Float
  p75: Float
  p95: Float
  p99: Float
  _source: String
}

type reverb_search_PreprocessListingsSearchResponse @join__type(graph: RQL) {
  preprocessedListingsSearchRequest: reverb_search_ListingsSearchRequest
  _source: String
}

type reverb_search_PriceEstimate @join__type(graph: RQL) {
  priceLow: reverb_search_Money
  priceHigh: reverb_search_Money
  _source: String
}

type reverb_search_PriceGuidesSearchRequest @join__type(graph: RQL) {
  fullTextQuery: String
  locale: String
  offset: Int
  limit: Int
  withAggregations: [reverb_search_PriceGuidesSearchRequest_Aggregation]
  brandNames: [String]
  categoryUuids: [String]
  decades: [String]
  categorySlugs: [String]
  withLimitedAggregations: reverb_search_LimitedAggregation
  _source: String
}

type reverb_search_PriceStatsResult @join__type(graph: RQL) {
  middle: reverb_search_Money
  _source: String
}

type reverb_search_PriceStatsResults @join__type(graph: RQL) {
  purchasePrice: reverb_search_PriceStatsResult
  publicPrice: reverb_search_PriceStatsResult
  docCount: Int
  _source: String
}

type reverb_search_ProductReviewsSearchRequest @join__type(graph: RQL) {
  limit: Int
  offset: Int
  sort: reverb_search_ProductReviewsSearchRequest_Sort
  ids: [String]
  comparisonShoppingPageIds: [String]
  canonicalProductIds: [String]
  ratings: [reverb_search_ProductReviewsSearchRequest_Rating]
  fullTextQuery: String
  verified: Boolean
  withAggregations: [reverb_search_ProductReviewsSearchRequest_Aggregation]
  _source: String
}

type reverb_search_ProximityFilterRequest @join__type(graph: RQL) {
  """/ 5 digit US postal code"""
  postalCode: String
  """
  / Distance limit in miles. Both whole numbers and decimals are supported.
  """
  distance: String
  """
  / Whether the "distance from postal code" filter should be activated. `postal_code` is also used for `Sort.PROXIMITY_ASC`. While not mutually exclusive, we may want to sort but not filter.
  """
  proximity: Boolean
  _source: String
}

type reverb_search_ProximityRequest @join__type(graph: RQL) {
  """
  / applies proximity filter.  Both distance and location params are required.
  """
  applyFilter: Boolean
  """/ radius used for filter."""
  distance: reverb_search_Distance
  """/ used for both proximity filter and proximity sort."""
  location: reverb_search_Location
  _source: String
}

type reverb_search_QuerySpellCorrection @join__type(graph: RQL) {
  correction: String
  _source: String
}

type reverb_search_RPCSearch @join__type(graph: RQL) {
  ListingsSearch(input: Input_reverb_search_ListingsSearchRequest): reverb_search_SearchResponse
  ListingRecommendations(input: Input_reverb_search_ListingRecommendationsRequest): reverb_search_SearchResponse
  CMSPagesSearch(input: Input_reverb_search_CMSPagesSearchRequest): reverb_search_SearchResponse
  CSPSearch(input: Input_reverb_search_CSPSearchRequest): reverb_search_SearchResponse
  NegotiationsSearch(input: Input_reverb_search_NegotiationSearchRequest): reverb_search_SearchResponse
  Completions(input: Input_reverb_search_CompletionsRequest): reverb_search_SearchResponse
  LPCompletions(input: Input_reverb_search_LPCompletionsRequest): reverb_search_SearchResponse
  Autocomplete(input: Input_reverb_search_AutocompleteRequest): reverb_search_AutocompleteResponse
  OrdersSearch(input: Input_reverb_search_OrderSearchRequest): reverb_search_SearchResponse
  LPAlbumsSearch(input: Input_reverb_search_LPAlbumSearchRequest): reverb_search_SearchResponse
  LPArtistsSearch(input: Input_reverb_search_LPArtistSearchRequest): reverb_search_SearchResponse
  LPLabelsSearch(input: Input_reverb_search_LPLabelSearchRequest): reverb_search_SearchResponse
  LPTransactionsSearch(input: Input_reverb_search_LPTransactionsSearchRequest): reverb_search_SearchResponse
  LPReleasesSearch(input: Input_reverb_search_LPReleasesSearchRequest): reverb_search_SearchResponse
  PriceGuidesSearch(input: Input_reverb_search_PriceGuidesSearchRequest): reverb_search_SearchResponse
  LPListingsSearch(input: Input_reverb_search_LPListingsSearchRequest): reverb_search_SearchResponse
  AuctionsSearch(input: Input_reverb_search_AuctionsSearchRequest): reverb_search_SearchResponse
  GearCollectionItemsSearch(input: Input_reverb_search_GearCollectionItemsSearchRequest): reverb_search_SearchResponse
  ShippingRegionFilter(input: Input_reverb_search_ShippingRegionFilterRequest): reverb_search_ShippingRegionFilterResponse
  ListingsAggregation(input: Input_reverb_search_ListingsSearchRequest): reverb_search_ListingsAggregationResponse
  ListingsPercolationQuery(input: Input_reverb_search_ListingsPercolationQueryRequest): reverb_search_ListingsPercolationQueryResponse
  SimilarListingsSearch(input: Input_reverb_search_SimilarListingsSearchRequest): reverb_search_SearchResponse
  ProductReviewsSearch(input: Input_reverb_search_ProductReviewsSearchRequest): reverb_search_SearchResponse
  PreprocessListingsSearch(input: Input_reverb_search_ListingsSearchRequest): reverb_search_PreprocessListingsSearchResponse
  BatchListingsSearch(input: Input_reverb_search_BatchListingsSearchRequest): reverb_search_SearchResponse
  BatchMatchedListingsSearch(input: Input_reverb_search_BatchMatchedListingsSearchRequest): reverb_search_BatchMatchedListingsSearchResponse
  _source: String
}

type reverb_search_SearchResponse_Suggestion @join__type(graph: RQL) {
  text: String
  score: Float
  frequency: Int
  _source: String
}

type reverb_search_SearchResponse_TotalHits @join__type(graph: RQL) {
  value: Int
  relation: reverb_search_SearchResponse_TotalHits_Relation
  _source: String
}

type reverb_search_ShadowRerankingRequest @join__type(graph: RQL) {
  listingsSearchRequest: reverb_search_ListingsSearchRequest
  listingsSearchResults: [reverb_search_ListingsSearchResult]
  _source: String
}

type reverb_search_ShippingRegionFilterRequest @join__type(graph: RQL) {
  paramName: String
  selectedValues: [String]
  locale: String
  _source: String
}

type reverb_search_ShippingRegionFilterResponse @join__type(graph: RQL) {
  filter: reverb_search_Filter
  _source: String
}

type reverb_search_SimilarListingsSearchRequest @join__type(graph: RQL) {
  listingId: String
  includeForLiveListings: Boolean
  limit: Int
  offset: Int
  shippingRegionCodes: [String]
  itemRegion: String
  itemRegionRelation: reverb_search_ListingItemRegionRelation
  likelihoodToSellExperimentGroup: Int
  outlet: Boolean
  useFallback: Boolean
  _source: String
}

type reverb_search_SuggestOption @join__type(graph: RQL) {
  text: String
  output: String
  cspPayload: reverb_search_SuggestOption_CSPPayload
  corePayload: reverb_search_SuggestOption_CorePayload
  lpPayload: reverb_search_SuggestOption_LPPayload
  completionPayload: reverb_search_SuggestOption_CompletionPayload
  score: Int
  id: String
  slug: String
  scope: reverb_search_SuggestOptionScope
  scopes: [reverb_search_SuggestOptionScope]
  _source: String
}

type reverb_search_SuggestOptionScope @join__type(graph: RQL) {
  id: String
  slug: String
  output: String
  type: reverb_search_SuggestOptionScope_Type
  _source: String
}

type reverb_search_SuggestOption_CSPPayload @join__type(graph: RQL) {
  title: String
  categories: [String]
  primaryImage: String
  _source: String
}

type reverb_search_SuggestOption_CompletionPayload @join__type(graph: RQL) {
  thumbnailUrl: String
  inventoryNew: reverb_search_Inventory
  inventoryUsed: reverb_search_Inventory
  _source: String
}

type reverb_search_SuggestOption_CoreFilter @join__type(graph: RQL) {
  name: String
  type: String
  count: Int
  params: reverb_search_SuggestOption_CorePayloadParams
  _source: String
}

type reverb_search_SuggestOption_CorePayload @join__type(graph: RQL) {
  type: String
  uuid: String
  filter: String
  filters: [reverb_search_SuggestOption_CoreFilter]
  params: reverb_search_SuggestOption_CorePayloadParams
  _source: String
}

type reverb_search_SuggestOption_CorePayloadParams @join__type(graph: RQL) {
  productType: String
  query: String
  categoryUuid: String
  brandSlug: String
  shop: String
  id: String
  category: String
  curatedSetSlug: String
  _source: String
}

type reverb_search_SuggestOption_LPMetadata @join__type(graph: RQL) {
  primaryImageUuid: String
  artistName: String
  labelName: String
  releaseDate: String
  formatDescriptions: [String]
  _source: String
}

type reverb_search_SuggestOption_LPParams @join__type(graph: RQL) {
  artist: String
  label: String
  album: String
  _source: String
}

type reverb_search_SuggestOption_LPPayload @join__type(graph: RQL) {
  type: String
  params: reverb_search_SuggestOption_LPParams
  metadata: reverb_search_SuggestOption_LPMetadata
  _source: String
}

type reverb_search_TopCSP @join__type(graph: RQL) {
  count: Int
  id: String
  CSP: CSP
  _source: String
}

type reverb_search_TopCollectionsRequest @join__type(graph: RQL) {
  brandUuids: Int
  categoryUuids: Int
  _source: String
}

type reverb_search_TopCollectionsResult @join__type(graph: RQL) {
  brandUuids: [String]
  categoryUuids: [String]
  categories: [Category]
  brands: [Brand]
  _source: String
}

type reverb_signals_SignalRequest @join__type(graph: RQL) {
  groups: [reverb_signals_Signal_Group]
  imageType: reverb_signals_SignalImageType
  _source: String
}

type reverb_updates_Category @join__type(graph: RQL) {
  uuid: String
  _source: String
}

type reverb_updates_CreateMyUpdateRequest @join__type(graph: RQL) {
  entity: reverb_updates_Entity
  _source: String
}

type reverb_updates_DimissMyUpdateResponse @join__type(graph: RQL) {
  updateId: String
  dismissed: Boolean
  _source: String
}

type reverb_updates_DismissMyUpdateRequest @join__type(graph: RQL) {
  userId: String
  updateId: String
  _source: String
}

type reverb_updates_DismissUpdatesByEntityRequest @join__type(graph: RQL) {
  entityIds: [String]
  entityTypes: [String]
  userId: String
  metadata: reverb_updates_Metadata
  _source: String
}

type reverb_updates_Entity @join__type(graph: RQL) {
  """The type of the entity contained within this update"""
  entityType: reverb_updates_Entity_EntityType
  """
  String containing the identifier of the primary piece of content related to this update (i.e. a listing ID)
  """
  entityId: String
  metadata: reverb_updates_Metadata
  entity: rql_UpdateEntity
  _source: String
}

type reverb_updates_Listing @join__type(graph: RQL) {
  id: String
  _source: String
}

type reverb_updates_Metadata @join__type(graph: RQL) {
  priceDrop: reverb_updates_PriceDrop
  listing: reverb_updates_Listing
  siteBanner: reverb_updates_SiteBanner
  categories: [reverb_updates_Category]
  cartCount: Int
  shop: reverb_updates_Shop
  listingsCount: Int
  listings: [reverb_updates_Listing]
  offerCount: Int
  sale: reverb_updates_Sale
  promotion: reverb_updates_Promotion
  offer: reverb_updates_Offer
  _source: String
}

type reverb_updates_MyHomepageNotificationsRequest @join__type(graph: RQL) {
  userId: String
  limit: Int
  includeExperimentalNotifications: Boolean
  _source: String
}

type reverb_updates_MyHomepageNotificationsResponse @join__type(graph: RQL) {
  updates: [reverb_updates_Update]
  _source: String
}

type reverb_updates_MyUpdateResponse @join__type(graph: RQL) {
  update: reverb_updates_Update
  _source: String
}

type reverb_updates_MyUpdatesRequest @join__type(graph: RQL) {
  userId: String
  _source: String
}

type reverb_updates_MyUpdatesResponse @join__type(graph: RQL) {
  updates: [reverb_updates_Update]
  _source: String
}

type reverb_updates_Offer @join__type(graph: RQL) {
  id: String
  typeContext: String
  _source: String
}

type reverb_updates_PriceDrop @join__type(graph: RQL) {
  id: String
  listingId: String
  _source: String
}

type reverb_updates_Promotion @join__type(graph: RQL) {
  id: String
  _source: String
}

type reverb_updates_PruneMyUpdates @join__type(graph: RQL) {
  pruneType: reverb_updates_PruneMyUpdates_PruneType
  userId: Int
  updateId: Int
  _source: String
}

type reverb_updates_Sale @join__type(graph: RQL) {
  id: String
  _source: String
}

type reverb_updates_Shop @join__type(graph: RQL) {
  id: String
  _source: String
}

type reverb_updates_SiteBanner @join__type(graph: RQL) {
  id: String
  _source: String
}

type reverb_updates_Update @join__type(graph: RQL) {
  """
  Describes what the My Updates consumer should do with this message (i.e. an ADD action tells the consumer to write the update to the database)
  """
  action: reverb_updates_Update_Action
  """The underlying content of this update"""
  entity: reverb_updates_Entity
  """
  On write, tells the My Updates consumer which users should receive this update
  """
  userIds: [String]
  """The timestamp of this update"""
  createdAt: String
  updateId: Int
  """The timestamp of this update"""
  updatedAt: String
  _source: String
}

type reverb_updates_UpdatesService @join__type(graph: RQL) {
  GetMyUpdates(input: Input_reverb_updates_MyUpdatesRequest): reverb_updates_MyUpdatesResponse
  CreateMyUpdate(input: Input_reverb_updates_CreateMyUpdateRequest): reverb_updates_MyUpdateResponse
  DismissMyUpdate(input: Input_reverb_updates_DismissMyUpdateRequest): reverb_updates_DimissMyUpdateResponse
  GetMyHomepageNotifications(input: Input_reverb_updates_MyHomepageNotificationsRequest): reverb_updates_MyHomepageNotificationsResponse
  DismissUpdatesByEntity(input: Input_reverb_updates_DismissUpdatesByEntityRequest): reverb_updates_MyUpdatesResponse
  _source: String
}

type rql_AddressSuggestion @join__type(graph: RQL) {
  id: String
  type: rql_AddressSuggestion_Type
  text: String
  _source: String
}

type rql_AuthToken @join__type(graph: RQL) {
  token: String
  _source: String
}

"""Used as input type for mutations that don't have any arguments"""
type rql_Blank @join__type(graph: RQL) {
  _: Boolean
  _source: String
}

type rql_BrandManager @join__type(graph: RQL) {
  slug: String
  id: String
  statsByCSP(input: Input_reverb_reporting_CSPStatsByCSPRequest): reverb_reporting_CSPStatsByCSPResponse
  statsByDate(input: Input_reverb_reporting_CSPStatsRequest): reverb_reporting_CSPStatsByDateResponse
  totalStats(input: Input_reverb_reporting_CSPStatsRequest): reverb_reporting_CSPStats
  _source: String
}

type rql_BrandOrderSearch @join__type(graph: RQL) {
  createdBeforeDate: String
  createdAfterDate: String
  cspSlugs: [String]
  listingConditionSlugs: [String]
  completedOnly: Boolean
  listingCategoryUuids: [String]
  _source: String
}

type rql_BrandStatsSearch @join__type(graph: RQL) {
  dateStart: String
  dateEnd: String
  condition: reverb_reporting_Condition
  orderBy: reverb_reporting_CSPStatsMetric
  orderDesc: Boolean
  limit: Int
  offset: Int
  _source: String
}

type rql_BumpedListingsQuery @join__type(graph: RQL) {
  entityType: String
  count: Int
  _source: String
}

type rql_CPRecommendationsRequest @join__type(graph: RQL) {
  cpIds: [String]
  multiClientExperiments: [rql_ExperimentData]
  listingsSearchRequest: reverb_search_ListingsSearchRequest
  listingIds: [String]
  limit: Int
  _source: String
}

type rql_CSPPriceRecommendation @join__type(graph: RQL) {
  conditionUuids: [String]
  _source: String
}

type rql_CheckoutActionRequestInput @join__type(graph: RQL) {
  reverbApp: String
  _source: String
}

type rql_CheckoutCartEditRequest @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
  order: rql_CheckoutCartEditRequest_OrderEntry
  _source: String
}

type rql_CheckoutCartEditRequest_OrderEntry @join__type(graph: RQL) {
  listingId: String
  quantity: Int
  _source: String
}

type rql_CheckoutCartEditResponse @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
  checkout: Checkout
  _source: String
}

type rql_CollectionQuery @join__type(graph: RQL) {
  ids: [String]
  uuids: [String]
  slugs: [String]
  _source: String
}

type rql_CollectionWithDraftsQuery @join__type(graph: RQL) {
  ids: [String]
  uuids: [String]
  slugs: [String]
  includeDrafts: Boolean
  _source: String
}

type rql_DiscoverEntry @join__type(graph: RQL) {
  id: String
  type: rql_DiscoverEntryType
  localizedContents: [reverb_feed_FollowLocalizedContents]
  update: rql_Update
  ad: core_apimessages_Ad
  articleEntry: rql_DiscoverEntry_ArticleEntry
  video: youtube_Video
  description: String
  listing: Listing
  article: Article
  _source: String
}

type rql_DiscoverEntry_ArticleEntry @join__type(graph: RQL) {
  productTypeName: String
  _source: String
}

type rql_DiscoverRequest @join__type(graph: RQL) {
  limit: Int
  offset: Int
  typesToInclude: [rql_DiscoverInclude]
  _source: String
}

type rql_DiscoverResponse @join__type(graph: RQL) {
  limit: Int
  offset: Int
  entries: [rql_DiscoverEntry]
  _source: String
}

type rql_EmailSubscription @join__type(graph: RQL) {
  id: String
  subscribed: Boolean
  translationKey: rql_EmailSubscription_TranslationKey
  _source: String
}

type rql_ExperimentData @join__type(graph: RQL) {
  name: String
  group: String
  _source: String
}

type rql_ExpressSalePriceEstimate @join__type(graph: RQL) {
  conditionUuid: String
  _source: String
}

type rql_Favorite @join__type(graph: RQL) {
  id: String
  type: rql_FavoriteType
  title: String
  subtitle: String
  favorite: core_apimessages_Favorite
  listingsSearchUrlParams: String
  entity: FavoriteEntity
  _source: String
}

type rql_FavoritesRequest @join__type(graph: RQL) {
  limit: Int
  offset: Int
  type: rql_FavoriteType
  listingState: rql_FavoritesRequest_ListingState
  sortSlug: String
  itemRegion: String
  _source: String
}

type rql_FavoritesResponse @join__type(graph: RQL) {
  favorites: [rql_Favorite]
  limit: Int
  offset: Int
  total: Int
  filters: [reverb_search_Filter]
  _source: String
}

type rql_FeedQuery @join__type(graph: RQL) {
  limit: Int
  offset: Int
  channel: rql_FeedQuery_Channel
  listingsFilter: reverb_search_ListingsSearchRequest
  readFromDatabase: Boolean
  _source: String
}

type rql_FindAddressSuggestionRequest @join__type(graph: RQL) {
  text: String
  container: String
  countryCode: String
  _source: String
}

type rql_FindAddressSuggestionResponse @join__type(graph: RQL) {
  suggestions: [rql_AddressSuggestion]
  _source: String
}

type rql_FollowsQuery @join__type(graph: RQL) {
  limit: Int
  offset: Int
  channel: rql_FollowsQuery_Channel
  _source: String
}

type rql_GearCollectionItemsSearchRequest @join__type(graph: RQL) {
  as: rql_GearCollectionItemsSearchRequest_Party
  searchInput: reverb_search_GearCollectionItemsSearchRequest
  _source: String
}

type rql_HomepageRequest @join__type(graph: RQL) {
  mpid: String
  _source: String
}

type rql_ImageQuery @join__type(graph: RQL) {
  transform: String
  scope: String
  limit: Int
  namedTransform: core_apimessages_NamedImageTransforms
  _source: String
}

type rql_ListingPriceRecommendationRequest @join__type(graph: RQL) {
  countryCode: String
  currency: String
  _source: String
}

type rql_MeProfileRequest @join__type(graph: RQL) {
  mpid: String
  _source: String
}

"""
  *
This monitoring data can be attached to each endpoint to help us better
document and monitor for changes in performance. This allows clients
to be automatically generated fully aware of this contract, which should
allow us to more easily set things like per request timeouts, warning logs,
or automate monitors to hit specific teams.

As of this writing nothing is yet consuming these extensions, but we hope
to extend RQL to use these to increase our visibility (and configurability)
of each endpoint.
"""
type rql_MonitoringData @join__type(graph: RQL) {
  warn: Int
  timeout: Int
  owner: String
  _source: String
}

type rql_MyUpdatesQuery @join__type(graph: RQL) {
  limit: Int
  offset: Int
  _source: String
}

type rql_MyUpdatesResponse @join__type(graph: RQL) {
  updates: [rql_Update]
  limit: Int
  offset: Int
  total: Int
  _source: String
}

type rql_NegotiationQuery @join__type(graph: RQL) {
  as: rql_NegotiationQuery_Party
  state: rql_NegotiationQuery_State
  limit: Int
  offset: Int
  ids: [String]
  listingIds: [String]
  sort: String
  fullTextQuery: String
  _source: String
}

type rql_Node @join__type(graph: RQL) {
  Id: String
  _source: String
}

type rql_NodeError @join__type(graph: RQL) {
  type: rql_NodeError_ErrorType
  message: String
  _source: String
}

type rql_NodeQuery @join__type(graph: RQL) {
  id: String
  uuid: String
  slug: String
  _source: String
}

type rql_OrderQuery @join__type(graph: RQL) {
  limit: Int
  offset: Int
  checkoutUuid: String
  actionableStatuses: [String]
  _source: String
}

type rql_OrdersSearchRequest @join__type(graph: RQL) {
  as: core_apimessages_BulkOrdersRequest_Party
  searchFilters: reverb_search_OrderSearchRequest
  _source: String
}

type rql_PageInfo @join__type(graph: RQL) {
  limit: Int
  offset: Int
  total: Int
  _source: String
}

"""Deprecated"""
type rql_PageMetadata @join__type(graph: RQL) {
  mainClause: String
  prefixClause: String
  hasSubjectClause: Boolean
  fallbackSubject: String
  inPreposition: String
  collectionClause: String
  _source: String
}

type rql_PriceRecordSearchRequest @join__type(graph: RQL) {
  offset: Int
  limit: Int
  actionableStatuses: [String]
  createdBeforeDate: String
  createdAfterDate: String
  listingConditionSlugs: [String]
  listingConditionUuids: [String]
  canonicalProductIds: [String]
  sellerCountries: [String]
  conditionSlugs: [String]
  shopCurrency: String
  minAmountProductCentsUsd: String
  maxAmountProductCentsUsd: String
  orderType: String
  listingId: String
  actionableStatusGroup: String
  withAverageMonthlyProductPricesAggregations: Boolean
  averageMonthlyProductPricesCurrency: String
  _source: String
}

type rql_PublicComponentEntity @join__type(graph: RQL) {
  id: String
  type: String
  entity: PublicComponentEntity
  _source: String
}

type rql_RecommendationsGenericResponse @join__type(graph: RQL) {
  recommendationEngineInputIds: [String]
  recommendationEngineOutputIds: [String]
  searchResponse: reverb_search_SearchResponse
  _source: String
}

type rql_ReflectCollectionQuery @join__type(graph: RQL) {
  keys: [String]
  _source: String
}

type rql_ReflectQuery @join__type(graph: RQL) {
  key: String
  _source: String
}

type rql_SelectAddressSuggestionRequest @join__type(graph: RQL) {
  id: String
  _source: String
}

type rql_SelectAddressSuggestionResponse @join__type(graph: RQL) {
  id: String
  address: core_apimessages_AddressEntry
  _source: String
}

type rql_SellerCheckoutInput @join__type(graph: RQL) {
  id: String
  _source: String
}

type rql_SetGlobalSubscribeRequest @join__type(graph: RQL) {
  state: rql_SubscribeState
  _source: String
}

type rql_ShopsRecommendationsRequest @join__type(graph: RQL) {
  limit: Int
  _source: String
}

type rql_Update @join__type(graph: RQL) {
  """The underlying content of this update"""
  entity: rql_UpdateEntity
  """The timestamp of this update"""
  createdAt: String
  _source: String
}

type rql_UpdateEntity @join__type(graph: RQL) {
  _: Boolean
  id: String
  _id: String
  type: reverb_updates_Entity_EntityType
  """the listing of the update, e.g. the watched listing"""
  listing: Listing
  """the price drop of the update"""
  priceDrop: PriceChange
  """the site banner of the update"""
  siteBanner: SiteBanner
  """up to 12 listings filtered by the user's top categories"""
  affinityListingByCategory: [Listing]
  """
  the user's top affinity categories (presently only the top one is returned, but in the future there may be more than one)
  """
  affinityCategories: [Category]
  """the cart count relevant to this update"""
  cartCount: Int
  """shop related to this update"""
  shop: Shop
  """the listings count relevant to this update"""
  listingsCount: Int
  """
  listings related to this update, e.g. some new listings from a followed shop
  """
  listings: [Listing]
  """the offer count relevant to this update"""
  offerCount: Int
  """sale related to this update"""
  sale: core_apimessages_Sale
  """promotion related to this update"""
  promotion: MyUpdatesPromotion
  _source: String
}

type youtube_PlaylistItem @join__type(graph: RQL) {
  snippet: youtube_PlaylistSnippet
  _source: String
}

type youtube_PlaylistResourceId @join__type(graph: RQL) {
  videoId: String
  _source: String
}

type youtube_PlaylistSnippet @join__type(graph: RQL) {
  title: String
  description: String
  resourceId: youtube_PlaylistResourceId
  _source: String
}

type youtube_Video @join__type(graph: RQL) {
  id: String
  title: String
  description: String
  _source: String
}

type BrowsePage implements INode @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  id: String
  title: String
  url: String
  breadcrumbs: [core_apimessages_BrowsePageBreadcrumb]
  combinedFilters: String
  ownFilters: String
  links: [core_apimessages_BrowsePageLink]
}

type CanonicalProduct implements INode @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  id: String
  name: String
  model: String
  year: String
  finish: String
  countryOfOrigin: String
  packageSizeSuggestion: PackageSizeSuggestion
  estimatedNewListingPrice(input: Input_core_apimessages_NodeRequest_Lookup_Params_EstimatedNewListingPrices): core_apimessages_EstimatedNewListingPrice
}

type EstimatedNewListingPrice implements INode @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  id: String
  price: core_apimessages_Money
}

type CMSPage implements INode @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  id: String
  slug: String
  goLiveAt: String
  title: String
  description: String
  metaTitle: String
  metaDescription: String
  componentIds: [String] @deprecated
  imageAttributionUri: String
  image: cms_PageImage
  authorId: String
  pageType: String
  authorName: String
  albumIds: [String] @deprecated
  channels: [String]
  locale: String
  layoutId: String
  layoutSlug: String
  metaImage: cms_PageImage
  headerStyle: String
  actionText: String
  actionUrl: String
  searchPlaceholder: String
  noIndex: Boolean
  secondaryImage: cms_PageImage
  live: Boolean
  """
  Flag used to thread to the frontend to indicate a cms slug was not found and we should render the not found page.
  """
  pageNotFound: Boolean
  targetLocales: [String]
  breadcrumbs: String
  darkModeReady: Boolean
  components: [PublicComponent]
}

type CollectionHeader implements INode @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  id: String
  title: String
  description: String
  metaTitle: String
  metaDescription: String
  collectionType: core_apimessages_CollectionHeader_CollectionType
  collectionId: String
  fullBleedImage(transform: String): core_apimessages_Image
  searchFilterPresets: [core_apimessages_SearchFilterPreset]
  """sale related to this collection header"""
  sale: core_apimessages_Sale
}

type Checkout implements INode @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  """Checkout UUID"""
  id: String
  """
  Semi-opaque identifier to bundle a checkout, for example RCP-USD-direct_checkout.
  """
  checkoutBundlingId: String
  paymentMethod: core_apimessages_CheckoutPaymentMethod
  shippingAddress: core_apimessages_Address
  billingAddress: core_apimessages_Address
  orders: [core_apimessages_CheckoutOrder]
  lineItems: [core_apimessages_CheckoutLineItem]
  status: core_apimessages_Checkout_Status
  paymentErrorMessage: String
  type: core_apimessages_Checkout_Type
  creditCard: core_apimessages_CreditCard
  guest: core_apimessages_CheckoutGuest
  """A JSON serialized hash"""
  adyenPaymentAction: String
  availablePaymentMethods: [core_apimessages_CheckoutPaymentMethod]
  isAllPaidWithBucks: Boolean
  source: core_apimessages_Checkout_Source
  """
  Amount owed. Use this field to send the displayed amount owed value to a finalize checkout
  """
  total: core_apimessages_Checkout_Total
  orderBundle: OrderBundle
  action(input: Input_rql_CheckoutActionRequestInput): CheckoutAction
}

type CheckoutAction implements INode @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  type: core_apimessages_CheckoutAction_Type
  redirectUrl: String
}

type ExpressSaleCheckout implements INode @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  checkoutId: String
  cspId: String
  status: core_apimessages_ExpressSaleCheckout_Status
  expressSaleItemBid: core_apimessages_CSPExpressSaleItemBid
  csp: CSP
}

type GearCollectionItem implements INode @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  """gear_collection_item.id"""
  id: String
  deleted: Boolean
  title: String
  make: String
  model: String
  finish: String
  year: String
  price: core_apimessages_Money
  description: String
  notes: String
  canonicalProductId: String
  ownerCost: core_apimessages_Money
  serialNumber: String
  created: Boolean
  updated: Boolean
  condition: core_apimessages_Condition
  tags: [core_apimessages_GearCollectionItemTag]
  hideListingPhotos: Boolean
  hideListingDescription: Boolean
  seedId: String
  seedType: core_apimessages_GearCollectionItem_SeedType
  subcategoryUuids: [String]
  state: core_apimessages_GearCollectionItem_State
  categories: [Category]
  listing: Listing
  csp: CSP
  images(input: Input_core_apimessages_ImagesRequest!): [core_apimessages_Image]
  priceGuide: PriceGuide
  esPriceEstimate: reverb_search_PriceEstimate
  dataServicesPriceEstimate: reverb_pricing_PriceRecommendation
  originalListing: Listing
}

type OrderBundle implements INode @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  amountTotal: core_apimessages_Money
  amountProductSubtotal: core_apimessages_Money
  amountShipping: core_apimessages_Money
  amountCredit: core_apimessages_Money
  amountTax: core_apimessages_Money
  bonusBucks: core_apimessages_Money
  paymentMethod: core_apimessages_Payment_PaymentMethod
  """order_bundles.checkout_uuid"""
  uuid: String
  localPickup: Boolean
  """order_bundles.id"""
  id: String
  orderType: String
  checkoutType: core_apimessages_Checkout_Type
  shippingAddress: core_apimessages_Address
  orders: OrderCollection
}

type PackageSizeSuggestion implements INode @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  id: String
  length: core_apimessages_Measurement
  width: core_apimessages_Measurement
  height: core_apimessages_Measurement
  weight: core_apimessages_Measurement
}

type PublicComponent implements INode @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  id: String
  pageId: String
  position: Int
  componentType: String
  data: String
  layoutSection: String
  active: Boolean
  """cms_recently_viewed  cms_used_first"""
  experimentKey: String
  """'default' or 'experiment'"""
  experimentBucket: String
  title: String
  subtitle: String
  searchUrlParams: String
  searchSort: String
  searchType: cms_PublicComponent_SearchType
  entities: [rql_PublicComponentEntity]
  ctaUrl: String
}

type Sale implements INode @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  """sales.id"""
  id: String
  slug: String
  name: String
  code: String
  startsAt: google_protobuf_Timestamp
  endsAt: google_protobuf_Timestamp
  summary: String
  state: core_apimessages_Sale_SaleState
  display: String
  withSalePriceDisplay: String @deprecated
  percent: Int
  buyerIneligibilityReason: String
  saleType: String
  showCode: Boolean @deprecated
  shopSlug: String
  shopName: String
  links: core_apimessages_SaleLinks
  discountValue: String
}

type SellerCheckout implements INode @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  ordersForShipmentSearch(input: Input_rql_OrderQuery): reverb_search_SearchResponse
  verifiedShippingAddress: core_apimessages_OrderVerifyShippingAddressResponse
  flatRateShippingOptions: core_apimessages_OrderFlatRateShippingOptionsResponse
}

type Shipment implements INode @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  toAddress: core_apimessages_Address
  fromAddress: core_apimessages_Address
  package: core_apimessages_ShippingLabelPackage
  shippingProtection: Boolean
  signatureRequired: Boolean
  mediaMailQualified: Boolean
  defaultPaymentMethod: core_apimessages_FeePaymentMethod
  carrierRates: [core_apimessages_CarrierRateGroup]
  shippingMethod: core_apimessages_ShippingMethod
  """shipments.uuid"""
  id: String
  orderUuids: [String]
  shippingProtectionPrice: core_apimessages_Money
  toAddressIsResidential: Boolean
  orders: [Order]
}

type Storefront implements INode @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  channel: String
  slug: String
  name: String
  shopUuid: String
  id: String
  description: String
  shippingPolicy: String
  shop: Shop
  curatedSets: [core_apimessages_CuratedSet]
  returnPolicy: core_apimessages_ReturnPolicy
  banner: core_apimessages_Image
}

type Article implements INode @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  """articles.id"""
  id: String
  title: String
  webLink: core_apimessages_Link
  articleCategories: [core_apimessages_ArticleCategory]
  slug: String
  images(input: Input_core_apimessages_ImagesRequest!): [core_apimessages_Image]
  categories: [core_apimessages_Category]
}

type Watch implements INode @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  listing: Listing
}

type SiteBanner implements INode @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  id: String
  heading: String
  subheading: String
  callToAction: String
  url: core_apimessages_Link
  mobileUrl: core_apimessages_Link
  mobileWebUrl: core_apimessages_Link
  imageUrl: String
  """Deprecated"""
  webOnly: Boolean
  mobileImageUrl: String
  startsAt: Timestamp
  endsAt: Timestamp
  contentSponsorship: core_apimessages_ContentSponsorship
  downtime: Boolean
  hasPhotos: Boolean
  showOnMobile: Boolean
  showOnMyUpdates: Boolean
}

type PriceChange implements INode @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  id: String
  listingId: String
  previousPrice: core_apimessages_Money
  newPrice: core_apimessages_Money
  currentPriceDropPercent: Int
  totalPriceDropPercent: Int
  listing: Listing
}

type MyUpdate implements INode @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
}

type MyUpdatesPromotion implements INode @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  id: String
  title: String
  subtitle: String
  url: core_apimessages_Link
  startsAt: Timestamp
  images(input: Input_core_apimessages_ImagesRequest!): [core_apimessages_Image]
}

type PublicPriceRecord implements INode @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  uuid: String
  listingId: String
  createdAt: google_protobuf_Timestamp
  settlementAmountProductSubtotal: core_apimessages_Money
  orderType: String
  amountProduct: core_apimessages_Money
  amountTotal: core_apimessages_Money
  amountTax: core_apimessages_Money
  amountShipping: core_apimessages_Money
  condition: core_apimessages_Condition
}

type UserShopPermission implements INode @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  id: String
  userId: String
  email: String
  permissionLevel: core_apimessages_UserShopPermission_PermissionLevel
  user: User
}

type Advertiser implements INode @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  uuid: String
  name: String
  brandSlugs: [String]
  shopSlugs: [String]
  adCampaignCollection: AdCampaignCollection
}

type AdCampaign implements INode @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  uuid: String
  name: String
  description: String
  status: core_apimessages_AdCampaign_AdStatus
  startsAt: Timestamp
  endsAt: Timestamp
  advertiserUuid: String
  adGroupCollection: AdGroupCollection
}

type AdGroup implements INode @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  uuid: String
  name: String
  description: String
  status: core_apimessages_AdGroup_AdStatus
  adCampaignUuid: String
  targetedCountryCodes: [String]
  targetedCategoryUuids: [String]
  targetedAdZoneSlugs: [String]
  targetedAdZones: [core_apimessages_AdGroupZone]
  targetedDevices: [String]
  targetedBrandSlugs: [String]
  adGroupKeywords: [core_apimessages_AdGroupKeyword]
  adCollection: AdCollection
  adZoneCollection: AdZoneCollection
}

type Ad implements INode @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  id: Int
  campaignId: Int
  format: core_apimessages_AdFormat
  imageAdCreative: core_apimessages_ImageAdCreative
  uuid: String
  adGroupUuid: String
  adCampaignUuid: String
  advertiserUuid: String
  localizedContents: [core_apimessages_AdLocalizedContent]
  deletedAt: Timestamp
  adGroupName: String
}

type AdZone implements INode @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  uuid: String
  slug: String
  name: String
  status: core_apimessages_AdZone_AdZoneStatus
  description: String
  adGroupCollection: AdGroupCollection
}

type UniversalPromoCampaign implements INode @join__type(graph: RQL, key: "_id") @join__implements(graph: RQL, interface: "INode") {
  _id: ID
  _source: String
  id: String
  name: String
  code: String
  expiresAt: Timestamp
  marketingChannel: String
  newBuyer: Boolean
  redemptionLimit: Int
  hasRedemptionLimit: Boolean
  universalPromoCurrencies: [core_apimessages_UniversalPromoCurrency]
  categories: [core_apimessages_NodesCategory]
  lapsedBuyer: Boolean
  lapsedBuyerLastPurchaseDate: Timestamp
}

type ListingCollection @join__type(graph: RQL) {
  _ids: [ID]
  nodes: [Listing]
  pageInfo: rql_PageInfo
  listings: [Listing]
  _source: String
}

type WatchCollection @join__type(graph: RQL) {
  _ids: [ID]
  nodes: [Watch]
  pageInfo: rql_PageInfo
  _source: String
}

type AdCampaignCollection @join__type(graph: RQL) {
  _ids: [ID]
  nodes: [AdCampaign]
  pageInfo: rql_PageInfo
  adCampaigns: [AdCampaign]
  _source: String
}

type AdGroupCollection @join__type(graph: RQL) {
  _ids: [ID]
  nodes: [AdGroup]
  pageInfo: rql_PageInfo
  adGroups: [AdGroup]
  _source: String
}

type AdCollection @join__type(graph: RQL) {
  _ids: [ID]
  nodes: [Ad]
  pageInfo: rql_PageInfo
  ads: [Ad]
  _source: String
}

type AdZoneCollection @join__type(graph: RQL) {
  _ids: [ID]
  nodes: [AdZone]
  pageInfo: rql_PageInfo
  adZones: [AdZone]
  _source: String
}

type UniversalPromoCampaignCollection @join__type(graph: RQL) {
  _ids: [ID]
  nodes: [UniversalPromoCampaign]
  pageInfo: rql_PageInfo
  _source: String
}

type SearchDocument @join__type(graph: SEARCH_REMIXER) {
  id: ID!
  score: Float
  fields: JSON
  features: JSON
}

type SearchFilterInfo @join__type(graph: SEARCH_REMIXER) {
  filterGroups: [SearchResultFilterGroup!]!
}

type SearchPagination @join__type(graph: SEARCH_REMIXER) {
  page: Int!
  pageSize: Int!
  total: Int!
}

type SearchQueryInfo @join__type(graph: SEARCH_REMIXER) {
  appliedQuery: String!
  originalQuery: String
  suggestedQueries: [String!]
}

type SearchResult @join__type(graph: SEARCH_REMIXER) {
  query: String
  results: [SearchDocument!]!
  pagination: SearchPagination!
  queryInfo: SearchQueryInfo
  filterInfo: SearchFilterInfo
  listings: [Listing!]!
}

type SearchResultFilter @join__type(graph: SEARCH_REMIXER) {
  key: String!
  count: Int
}

type SearchResultFilterGroup @join__type(graph: SEARCH_REMIXER) {
  key: String!
  filters: [SearchResultFilter!]!
}

interface INode @join__type(graph: RQL) {
  _id: ID
  _source: String
}

union FeedEntry @join__type(graph: RQL) @join__unionMember(graph: RQL, member: "Article") @join__unionMember(graph: RQL, member: "Listing") = Article | Listing

union FavoriteEntity @join__type(graph: RQL) @join__unionMember(graph: RQL, member: "Listing") @join__unionMember(graph: RQL, member: "Shop") @join__unionMember(graph: RQL, member: "core_apimessages_Favorite") = Listing | Shop | core_apimessages_Favorite

union Node @join__type(graph: RQL) @join__unionMember(graph: RQL, member: "CSP") @join__unionMember(graph: RQL, member: "Listing") @join__unionMember(graph: RQL, member: "Order") @join__unionMember(graph: RQL, member: "Negotiation") @join__unionMember(graph: RQL, member: "User") @join__unionMember(graph: RQL, member: "Article") @join__unionMember(graph: RQL, member: "PriceGuide") @join__unionMember(graph: RQL, member: "GearCollectionItem") @join__unionMember(graph: RQL, member: "CMSPage") @join__unionMember(graph: RQL, member: "ProductReview") = CSP | Listing | Order | Negotiation | User | Article | PriceGuide | GearCollectionItem | CMSPage | ProductReview

union PublicComponentEntity @join__type(graph: RQL) @join__unionMember(graph: RQL, member: "Listing") @join__unionMember(graph: RQL, member: "CSP") = Listing | CSP

union Reflection @join__type(graph: RQL) @join__unionMember(graph: RQL, member: "BrowsePage") @join__unionMember(graph: RQL, member: "CanonicalProduct") @join__unionMember(graph: RQL, member: "EstimatedNewListingPrice") @join__unionMember(graph: RQL, member: "Category") @join__unionMember(graph: RQL, member: "CMSPage") @join__unionMember(graph: RQL, member: "CollectionHeader") @join__unionMember(graph: RQL, member: "CSP") @join__unionMember(graph: RQL, member: "Checkout") @join__unionMember(graph: RQL, member: "CheckoutAction") @join__unionMember(graph: RQL, member: "CuratedSet") @join__unionMember(graph: RQL, member: "ExpressSaleCheckout") @join__unionMember(graph: RQL, member: "GearCollectionItem") @join__unionMember(graph: RQL, member: "Order") @join__unionMember(graph: RQL, member: "Listing") @join__unionMember(graph: RQL, member: "MyShop") @join__unionMember(graph: RQL, member: "Negotiation") @join__unionMember(graph: RQL, member: "OrderBundle") @join__unionMember(graph: RQL, member: "PackageSizeSuggestion") @join__unionMember(graph: RQL, member: "PriceGuide") @join__unionMember(graph: RQL, member: "PublicComponent") @join__unionMember(graph: RQL, member: "Sale") @join__unionMember(graph: RQL, member: "SellerCheckout") @join__unionMember(graph: RQL, member: "Shipment") @join__unionMember(graph: RQL, member: "Shop") @join__unionMember(graph: RQL, member: "Storefront") @join__unionMember(graph: RQL, member: "User") @join__unionMember(graph: RQL, member: "Article") @join__unionMember(graph: RQL, member: "Brand") @join__unionMember(graph: RQL, member: "Watch") @join__unionMember(graph: RQL, member: "ShopCampaignCoupon") @join__unionMember(graph: RQL, member: "SiteBanner") @join__unionMember(graph: RQL, member: "PriceChange") @join__unionMember(graph: RQL, member: "MyUpdate") @join__unionMember(graph: RQL, member: "MyUpdatesPromotion") @join__unionMember(graph: RQL, member: "ShipmentPackage") @join__unionMember(graph: RQL, member: "PublicPriceRecord") @join__unionMember(graph: RQL, member: "ProductReview") @join__unionMember(graph: RQL, member: "UserShopPermission") @join__unionMember(graph: RQL, member: "Advertiser") @join__unionMember(graph: RQL, member: "AdCampaign") @join__unionMember(graph: RQL, member: "AdGroup") @join__unionMember(graph: RQL, member: "Ad") @join__unionMember(graph: RQL, member: "AdZone") @join__unionMember(graph: RQL, member: "UniversalPromoCampaign") = BrowsePage | CanonicalProduct | EstimatedNewListingPrice | Category | CMSPage | CollectionHeader | CSP | Checkout | CheckoutAction | CuratedSet | ExpressSaleCheckout | GearCollectionItem | Order | Listing | MyShop | Negotiation | OrderBundle | PackageSizeSuggestion | PriceGuide | PublicComponent | Sale | SellerCheckout | Shipment | Shop | Storefront | User | Article | Brand | Watch | ShopCampaignCoupon | SiteBanner | PriceChange | MyUpdate | MyUpdatesPromotion | ShipmentPackage | PublicPriceRecord | ProductReview | UserShopPermission | Advertiser | AdCampaign | AdGroup | Ad | AdZone | UniversalPromoCampaign

enum core_apimessages_AdFormat @join__type(graph: COREQL) @join__type(graph: RQL) {
  IMAGE_AD @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum core_apimessages_AdZone_AdZoneStatus @join__type(graph: COREQL) @join__type(graph: RQL) {
  ACTIVE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  INACTIVE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum core_apimessages_BulkOrdersRequest_Party @join__type(graph: COREQL) @join__type(graph: RQL) {
  BUYER @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  SELLER @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum core_apimessages_BulkOrdersRequest_Relation @join__type(graph: COREQL) @join__type(graph: RQL) {
  """Listing PK"""
  LISTING @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  """OrderBundle pk"""
  ORDER_BUNDLE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  """Order pk"""
  SELF @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  UNKNOWN @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum core_apimessages_Feedback_Type @join__type(graph: COREQL) @join__type(graph: RQL) {
  BUYER @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  RECEIVED @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  SELLER @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum core_apimessages_NamedImageTransforms @join__type(graph: COREQL) @join__type(graph: RQL) {
  BANNER_4_1 @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  BANNER_WIDE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  CARD_SQUARE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  CARD_WIDE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  LARGE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  LARGE_SQUARE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  """
  deprecated but still in use by mobile clients. Use CARD_SQUARE instead.
  """
  MOBILE_SMALL @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  SHOP_BANNER @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  SUPERSIZE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  THUMB @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  USER_AVATAR @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum core_apimessages_MyBuyerCouponsRequest_Context @join__type(graph: COREQL) @join__type(graph: RQL) {
  ALL_UNUSED @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  CART @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  CHECKOUT @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  SHOP @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum core_apimessages_IconImageType @join__type(graph: COREQL) @join__type(graph: RQL) {
  PNG_18_3X @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  SVG @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum core_apimessages_PrimaryKey_Type @join__type(graph: COREQL) @join__type(graph: RQL) {
  ID @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  SLUG @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  UNKNOWN @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  UUID @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum core_apimessages_Channel @join__type(graph: COREQL) @join__type(graph: RQL) {
  LP @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  REVERB @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  SELLER_SITE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum reverb_search_ProductReviewsSearchRequest_Rating @join__type(graph: COREQL) @join__type(graph: RQL) {
  FIVE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  FOUR @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  ONE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  THREE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  TWO @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum reverb_search_ProductReviewsSearchRequest_Sort @join__type(graph: COREQL) @join__type(graph: RQL) {
  CREATED_AT_ASC @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  CREATED_AT_DESC @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  ID_DESC @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  NONE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  RATING_ASC @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  RATING_DESC @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  UPDATED_AT_ASC @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  UPDATED_AT_DESC @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  VOTES_ASC @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  VOTES_DESC @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum reverb_search_ProductReviewsSearchRequest_Aggregation @join__type(graph: COREQL) @join__type(graph: RQL) {
  RATING @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum reverb_search_ListingItemRegionRelation @join__type(graph: COREQL) @join__type(graph: RQL) @join__type(graph: SEARCH_REMIXER) {
  INCLUDE_TRADE_REGIONS @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  ITEM_REGION_ONLY @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
}

enum reverb_signals_Signal_Group @join__type(graph: COREQL) @join__type(graph: RQL) {
  ANDROID_NUDGES @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  ANDROID_WHY_REVERB @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  ANDROID_WHY_TO_BUY @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  CART_PAGE_WHY_TO_BUY @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  EXPERIMENTAL @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  IOS_NUDGES @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  IOS_WHY_REVERB @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  IOS_WHY_TO_BUY @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  ITEM_PAGE_NUDGES @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  ITEM_PAGE_WHY_REVERB @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  ITEM_PAGE_WHY_TO_BUY @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  MP_GRID_CARD @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  MP_GRID_PROX_CARD @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  MP_LIST_CARD @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  MP_LIST_PROX_CARD @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  NUDGE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  RESERVED @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum reverb_signals_SignalImageType @join__type(graph: COREQL) @join__type(graph: RQL) {
  PNG_34_3X @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  SVG @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum rql_NegotiationQuery_Party @join__type(graph: COREQL) @join__type(graph: RQL) {
  BUYER @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  SELLER @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum rql_NegotiationQuery_State @join__type(graph: COREQL) @join__type(graph: RQL) {
  ACCEPTED @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  ACTIVE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  EXPIRED @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  REJECTED @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum core_apimessages_Listing_ListingType @join__type(graph: COREQL) @join__type(graph: RQL) {
  AUCTION @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  BUY_IT_NOW @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  CORE_AUCTION @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  DIGITAL @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  MAKE_AN_OFFER @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum core_apimessages_Listing_SeedType @join__type(graph: COREQL) @join__type(graph: RQL) {
  CanonicalProduct @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  ComparisonShoppingPage @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  GearCollectionItem @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  Order @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  """DEPRECATED, we no longer support PriceGuide seeds"""
  PriceGuide @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  Product @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum core_apimessages_MyShopOnboardingResponse_PaymentMethod @join__type(graph: COREQL) @join__type(graph: RQL) {
  NOT_SETUP @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  PAYPAL @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  REVERB_PAYMENTS @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum core_apimessages_Shop_QuickShipperSpeed @join__type(graph: COREQL) @join__type(graph: RQL) {
  NO_BUCKET @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  UNDER_24 @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  UNDER_48 @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  UNDER_72 @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum core_apimessages_Shop_ShopType @join__type(graph: COREQL) @join__type(graph: RQL) {
  BUSINESS @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  INDIVIDUAL @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  UNKNOWN @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum core_apimessages_Order_Status @join__type(graph: COREQL) @join__type(graph: RQL) {
  CANCELLED @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  LAYAWAY_FORFEITED @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  PAID @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  PARTIALLY_PAID @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  PAYMENT_PENDING @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  PICKED_UP @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  PRESUMED_RECEIVED @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  RECEIVED @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  REFUNDED @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  SHIPPED @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  UNPAID @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum TradeInRejectionReason @join__type(graph: COREQL) {
  CONDITION_NOT_MET @join__enumValue(graph: COREQL)
  LISTING_INELIGIBLE @join__enumValue(graph: COREQL)
  SELLER_REJECTED @join__enumValue(graph: COREQL)
}

enum core_apimessages_ShopCampaignCoupon_Status @join__type(graph: COREQL) @join__type(graph: RQL) {
  APPLIED_AND_ACTIVE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  APPLIED_AND_INACTIVE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  ELIGIBLE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  INELIGIBLE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  NONE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum TradeInStatus @join__type(graph: COREQL) {
  ACCEPTED @join__enumValue(graph: COREQL)
  PENDING @join__enumValue(graph: COREQL)
  REJECTED @join__enumValue(graph: COREQL)
}

enum core_apimessages_AdGroup_AdStatus @join__type(graph: COREQL) @join__type(graph: RQL) {
  ACTIVE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  DRAFT @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  INACTIVE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum core_apimessages_UserActionName @join__type(graph: COREQL) @join__type(graph: RQL) {
  CUSTOMIZE_FEED_EDUCATION_CALLOUT @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  FAVORITES_EDUCATION_CALLOUT @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  QUICK_PRICE_EDIT_CALLOUT @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  SAVE_SEARCH_EDUCATION_CALLOUT @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  SAVE_SHOP_EDUCATION_CALLOUT @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  SELLER_BULK_ACTIONS_CALLOUT @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  SELLER_OPEN_TO_OFFERS_CALLOUT @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  SUBSEQUENT_LISTING_VIEW_CALLOUT @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  VIEW_HOW_TO_WATCH_CALLOUT @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  VIEW_WATCH_HIATUS_CALLOUT @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum core_apimessages_UserActionStatus @join__type(graph: COREQL) @join__type(graph: RQL) {
  AVAILABLE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  UNAVAILABLE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum core_apimessages_CartItem_Alert_Severity @join__type(graph: COREQL) @join__type(graph: RQL) {
  INFO @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  WARNING @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum core_apimessages_CartItem_Alert_Type @join__type(graph: COREQL) @join__type(graph: RQL) {
  INTERNATIONAL_SHIPPING @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  REGION_NOT_SUPPORTED @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  REPURCHASED_PRICE_CHANGE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum core_apimessages_CartItem_ListingTotal_Discount_Type @join__type(graph: COREQL) @join__type(graph: RQL) {
  OFFER @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  SALE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum core_apimessages_CheckoutPaymentMethod_Type @join__type(graph: COREQL) @join__type(graph: RQL) {
  AFFIRM @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  """Currently known as Google Pay"""
  ANDROID_PAY @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  APPLE_PAY @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  DC_VIA_PAYPAL @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  """Card or scheme payments"""
  DIRECT_CHECKOUT @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  """Klarna Pay Over Time"""
  KLARNA_ACCOUNT @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  PAYPAL @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  PAYPAL_PAY_LATER @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  SOFORT @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum core_apimessages_CartItem_ShippingTotal_Discount_Type @join__type(graph: COREQL) @join__type(graph: RQL) {
  COMBINED_CHILD @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  COMBINED_PARENT @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  FREE_SHIPPING_THRESHOLD @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum core_apimessages_CheckoutGooglePayDetails_CardNetwork @join__type(graph: COREQL) @join__type(graph: RQL) {
  AMEX @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  DISCOVER @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  MASTERCARD @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  VISA @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum core_apimessages_Image_FallbackType @join__type(graph: COREQL) @join__type(graph: RQL) {
  """either the release or the album"""
  LP_CANONICAL @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  NONE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum core_apimessages_Offer_OfferStatus @join__type(graph: COREQL) @join__type(graph: RQL) {
  ACCEPTED @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  ACTIVE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  COUNTERED @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  EXPIRED @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  REJECTED @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum core_apimessages_ProductSpec_Type @join__type(graph: COREQL) @join__type(graph: RQL) {
  BRAND @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  CATEGORY @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  CONDITION @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  COUNTRY_OF_ORIGIN @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  FINISH @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  MODEL @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  TRAIT @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  YEAR @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum core_apimessages_Ribbon_Reason @join__type(graph: COREQL) @join__type(graph: RQL) {
  PRICE_DROP @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  SALE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum core_apimessages_Sale_SaleState @join__type(graph: COREQL) @join__type(graph: RQL) {
  ENDED @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  LIVE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  UPCOMING @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum core_apimessages_ShippingMethod @join__type(graph: COREQL) @join__type(graph: RQL) {
  COMBINED_SHIPPING @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  DIGITAL_DELIVERY @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  EMAIL_DELIVERY @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  EXPEDITED_SHIPPING @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  LOCAL @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  SHIPPED @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  UNKNOWN @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum core_apimessages_ShippingRates_RegionType @join__type(graph: COREQL) @join__type(graph: RQL) {
  COUNTRY @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  EVERYWHERE_ELSE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  SUBREGION @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  SUPERREGION @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum core_apimessages_ShopTaxPolicy_PolicyType @join__type(graph: COREQL) @join__type(graph: RQL) {
  AUTO_CALCULATED @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  MARKETPLACE_REGION @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  SELLER @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum core_apimessages_TaxProfile_TaxProfileVerificationStatus @join__type(graph: COREQL) @join__type(graph: RQL) {
  FAILED_VERIFICATION @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  PENDING_VERIFICATION @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  VERIFIED @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum core_apimessages_UserStatus @join__type(graph: COREQL) @join__type(graph: RQL) {
  IN_GOOD_STANDING @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  LOCKED_VACATION_MODE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  NOT_SET @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  REQUIRES_EMAIL_VERIFICATION @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  SUSPENDED @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  SUSPENDED_OUTSTANDING_INVOICE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  UNDER_REVIEW @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum reverb_search_Filter_WidgetType @join__type(graph: COREQL) @join__type(graph: RQL) {
  CHECKBOX @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  NESTED_SELECT @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  NONE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  RADIO @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  RANGE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  REGION_SELECT @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  SORT @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  TEXT @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum reverb_signals_Signal_Name @join__type(graph: COREQL) @join__type(graph: RQL) {
  AVAILABLE_FOR_PICKUP @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  AVAILABLE_NEARBY_FOR_PICKUP @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  BUY_WITH_CONFIDENCE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  EXPEDITED_SHIPPING_AVAILABLE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  FREE_EXPEDITED_SHIPPING @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  FREE_STANDARD_SHIPPING @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  GREAT_VALUE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  IN_OTHER_CARTS @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  LOCAL_PICKUP_ONLY @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  LOW_STOCK @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  NEW_LISTING @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  ON_SALE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  PAYMENT_PLAN @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  PREDICTED_TO_SELL_SOON @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  PRICE_DROP @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  RARE_GEAR @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  RETURN_POLICY @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  SECURE_CHECKOUT @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  """deprecated"""
  SHIPS_SOON @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum reverb_signals_Signal_Slot @join__type(graph: COREQL) @join__type(graph: RQL) {
  CHECKOUT_TRUST @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  EXCLUSIVE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  FINANCING @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  LOCAL @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  RECENCY @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  REVERB_TRUST @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  SELLER_TRUST @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  SHIPPING_CHARGE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  SPEED @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  URGENCY @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
  VALUE @join__enumValue(graph: COREQL) @join__enumValue(graph: RQL)
}

enum arbiter_AuctionType @join__type(graph: RQL) {
  CSP @join__enumValue(graph: RQL)
  ALL_INCLUSIVE @join__enumValue(graph: RQL)
  CONDITION_INCLUSIVE @join__enumValue(graph: RQL)
  EXPERIMENTAL_CSP @join__enumValue(graph: RQL)
  EXPERIMENTAL_FEATURED_LISTING @join__enumValue(graph: RQL)
}

enum arbiter_Interaction_InteractionType @join__type(graph: RQL) {
  CLICK @join__enumValue(graph: RQL)
  ADD_TO_WATCHLIST @join__enumValue(graph: RQL)
  ADD_TO_CART @join__enumValue(graph: RQL)
  MAKE_AN_OFFER @join__enumValue(graph: RQL)
  MESSAGE_SELLER @join__enumValue(graph: RQL)
}

enum cms_PublicComponent_SearchType @join__type(graph: RQL) {
  NONE @join__enumValue(graph: RQL)
  LISTING @join__enumValue(graph: RQL)
  CSP @join__enumValue(graph: RQL)
}

enum core_apimessages_AcceptedPaymentMethodsRequest_PaymentMethodsType @join__type(graph: RQL) {
  PRODUCT @join__enumValue(graph: RQL)
  SHOP @join__enumValue(graph: RQL)
}

enum core_apimessages_AdCampaign_AdStatus @join__type(graph: RQL) {
  DRAFT @join__enumValue(graph: RQL)
  ACTIVE @join__enumValue(graph: RQL)
  INACTIVE @join__enumValue(graph: RQL)
}

enum core_apimessages_AdCampaignsSearchRequest_Status @join__type(graph: RQL) {
  ANY @join__enumValue(graph: RQL)
  DRAFT @join__enumValue(graph: RQL)
  ACTIVE @join__enumValue(graph: RQL)
  INACTIVE @join__enumValue(graph: RQL)
}

enum core_apimessages_MyAddressType @join__type(graph: RQL) {
  SHIPPING @join__enumValue(graph: RQL)
  SHOP @join__enumValue(graph: RQL)
  EU_ODR_PLATFORM @join__enumValue(graph: RQL)
}

enum core_apimessages_AdminUserSearchRequest_ActivatedFilter @join__type(graph: RQL) {
  NONE @join__enumValue(graph: RQL)
  ACTIVATED @join__enumValue(graph: RQL)
  NOT_ACTIVATED @join__enumValue(graph: RQL)
}

enum core_apimessages_AdyenPaymentResult_PaymentStatus @join__type(graph: RQL) {
  SUCCESS @join__enumValue(graph: RQL)
  IDENTIFY_SHOPPER_REQUIRED @join__enumValue(graph: RQL)
  CHALLENGE_SHOPPER_REQUIRED @join__enumValue(graph: RQL)
  FAILED @join__enumValue(graph: RQL)
  REDIRECT_SHOPPER_REQUIRED @join__enumValue(graph: RQL)
}

enum core_apimessages_BearerV2TokenRequest_Client @join__type(graph: RQL) {
  UNKNOWN @join__enumValue(graph: RQL)
  MOBILE @join__enumValue(graph: RQL)
  LISTING_PHOTO_UPLOADER @join__enumValue(graph: RQL)
}

enum core_apimessages_BrowsePageLink_MatchType @join__type(graph: RQL) {
  OPTION_VALUE @join__enumValue(graph: RQL)
  PARAM_NAME @join__enumValue(graph: RQL)
  REMOVE_SELF @join__enumValue(graph: RQL)
  REMOVE_OPTION_VALUE @join__enumValue(graph: RQL)
  MULTIPLE_OPTION_VALUES @join__enumValue(graph: RQL)
}

enum core_apimessages_BulkAddressesRequest_Relation @join__type(graph: RQL) {
  UNKNOWN @join__enumValue(graph: RQL)
  """no pk"""
  MY_SHIPPING @join__enumValue(graph: RQL)
  """no pk"""
  MY_SHOP @join__enumValue(graph: RQL)
  """Order pk"""
  ORDER_SHIPPING @join__enumValue(graph: RQL)
  """OrderBundle pk"""
  ORDER_BUNDLE_SHIPPING @join__enumValue(graph: RQL)
  EU_ODR_PLATFORM @join__enumValue(graph: RQL)
}

enum core_apimessages_BulkCuratedSetsRequest_Relation @join__type(graph: RQL) {
  SELF @join__enumValue(graph: RQL)
  STOREFRONT @join__enumValue(graph: RQL)
}

enum core_apimessages_CuratedSet_SetType @join__type(graph: RQL) {
  NONE @join__enumValue(graph: RQL)
  LP_SELLER_PICKS @join__enumValue(graph: RQL)
}

enum core_apimessages_BulkExportListingsRequest_ListingState @join__type(graph: RQL) {
  ALL @join__enumValue(graph: RQL)
  DRAFT @join__enumValue(graph: RQL)
  ENDED @join__enumValue(graph: RQL)
  LIVE @join__enumValue(graph: RQL)
  ORDERED @join__enumValue(graph: RQL)
  SOLD_OUT @join__enumValue(graph: RQL)
  SUSPENDED @join__enumValue(graph: RQL)
  VACATION @join__enumValue(graph: RQL)
}

enum core_apimessages_BumpKeyContents_OffsiteSource @join__type(graph: RQL) {
  NONE @join__enumValue(graph: RQL)
  EMAIL @join__enumValue(graph: RQL)
}

enum core_apimessages_CancelOrderRequest_CancellationReason @join__type(graph: RQL) {
  UNKNOWN @join__enumValue(graph: RQL)
  ALREADY_SOLD_REASON @join__enumValue(graph: RQL)
  BUYER_ABANDONED_REASON @join__enumValue(graph: RQL)
  PAYMENT_ARRANGEMENT_REASON @join__enumValue(graph: RQL)
}

enum core_apimessages_FeePaymentMethod @join__type(graph: RQL) {
  PAYOUT_DEDUCTION @join__enumValue(graph: RQL)
  STATEMENT_BILLING @join__enumValue(graph: RQL)
}

enum core_apimessages_CartItemBundle_LineItem_Type @join__type(graph: RQL) {
  AMOUNT_LISTING_SUBTOTAL @join__enumValue(graph: RQL)
  AMOUNT_SHIPPING @join__enumValue(graph: RQL)
  AMOUNT_TAX @join__enumValue(graph: RQL)
}

enum core_apimessages_CategoryRequest_CategoryType @join__type(graph: RQL) {
  UNKNOWN @join__enumValue(graph: RQL)
  CATEGORY @join__enumValue(graph: RQL)
  ARTICLE @join__enumValue(graph: RQL)
  ALL_FLAT @join__enumValue(graph: RQL)
}

enum core_apimessages_Checkout_Status @join__type(graph: RQL) {
  """Initial status"""
  AWAITING_PAYMENT @join__enumValue(graph: RQL)
  PAYMENT_IN_PROGRESS @join__enumValue(graph: RQL)
  """User needs to enter SCA/3DS"""
  REQUIRES_3DS_AUTHENTICATION @join__enumValue(graph: RQL)
  PAYMENT_SUCCESS @join__enumValue(graph: RQL)
  DUPLICATE_PAYMENT @join__enumValue(graph: RQL)
  """Payment processor failure. Return to payment"""
  CHECKOUT_PROCESSING_FAILURE @join__enumValue(graph: RQL)
  """
  Checkout info such as tax or sales are no longer valid, return to payment
  """
  CHECKOUT_INFORMATION_FAILURE @join__enumValue(graph: RQL)
  """User's shipping details were incorrect. Return to shipping"""
  INVALID_SHIPPING_ADDRESS_FAILURE @join__enumValue(graph: RQL)
  """User's payment method was incorrect. Return to payment"""
  PAYMENT_INFORMATION_FAILURE @join__enumValue(graph: RQL)
  """User cannot proceed with current region. Return to cart"""
  USER_IN_SANCTIONED_REGION_FAILURE @join__enumValue(graph: RQL)
  """Return to cart"""
  LISTING_AVAILABILITY_FAILURE @join__enumValue(graph: RQL)
  """Return to shipping"""
  STANDARD_USER_ATTEMPTED_GUEST_CHECKOUT_FAILURE @join__enumValue(graph: RQL)
  """Return to cart"""
  LISTING_PURCHASE_RATE_LIMIT_FAILURE @join__enumValue(graph: RQL)
  """
  Express Sale only, retryable if EP was down, otherwise indicates the shipment cannot be created for this seller
  """
  SHIPMENT_CREATION_FAILURE @join__enumValue(graph: RQL)
  """
  Express Sale only, seller must wait for pending ES orders to be evaluated by warehouse team before processing another ES checkout
  """
  PENDING_EXPRESS_SALE_ORDERS_LIMIT_FAILURE @join__enumValue(graph: RQL)
}

enum core_apimessages_Checkout_Type @join__type(graph: RQL) {
  STANDARD @join__enumValue(graph: RQL)
  GUEST @join__enumValue(graph: RQL)
}

enum core_apimessages_Checkout_Source @join__type(graph: RQL) {
  CART @join__enumValue(graph: RQL)
  BUY_NOW @join__enumValue(graph: RQL)
}

enum core_apimessages_CheckoutAction_Type @join__type(graph: RQL) {
  AWAITING_PAYMENT @join__enumValue(graph: RQL)
  PROCESSING_PAYMENT @join__enumValue(graph: RQL)
  PAYMENT_FAILURE @join__enumValue(graph: RQL)
  CHECKOUT_FAILURE @join__enumValue(graph: RQL)
  REQUIRES_AUTHENTICATION @join__enumValue(graph: RQL)
  CHECKOUT_SUCCESS @join__enumValue(graph: RQL)
}

enum core_apimessages_CheckoutFinalizeDigitalWalletPaymentRequest_ResultConfirmation @join__type(graph: RQL) {
  """
  Default for all web browser-based flows. Confirmation will be available via the Checkout endpoint.
  """
  ASYNC @join__enumValue(graph: RQL)
  """
  Intended for native apps only. Confirmation will be available synchronously in the response body.
  """
  SYNC @join__enumValue(graph: RQL)
}

enum core_apimessages_CheckoutLineItem_Type @join__type(graph: RQL) {
  AMOUNT_LISTING_SUBTOTAL @join__enumValue(graph: RQL)
  AMOUNT_SHIPPING @join__enumValue(graph: RQL)
  AMOUNT_TAX @join__enumValue(graph: RQL)
  AMOUNT_CREDIT @join__enumValue(graph: RQL)
}

enum core_apimessages_CheckoutOrder_Note_Severity @join__type(graph: RQL) {
  INFO @join__enumValue(graph: RQL)
  WARNING @join__enumValue(graph: RQL)
}

enum core_apimessages_CheckoutOrder_ShippingTotalDiscount_Type @join__type(graph: RQL) {
  COMBINED_PARENT @join__enumValue(graph: RQL)
  COMBINED_CHILD @join__enumValue(graph: RQL)
  FREE_SHIPPING_THRESHOLD @join__enumValue(graph: RQL)
}

enum core_apimessages_CheckoutOrder_SubtotalDiscount_Type @join__type(graph: RQL) {
  SALE @join__enumValue(graph: RQL)
  OFFER @join__enumValue(graph: RQL)
  SHOP_CAMPAIGN @join__enumValue(graph: RQL)
}

enum core_apimessages_CollectionHeader_CollectionType @join__type(graph: RQL) {
  Category @join__enumValue(graph: RQL)
  Brand @join__enumValue(graph: RQL)
  CuratedSearch @join__enumValue(graph: RQL)
  CuratedSet @join__enumValue(graph: RQL)
  ProductType @join__enumValue(graph: RQL)
}

enum core_apimessages_ContentSponsorship_SponsorshipType @join__type(graph: RQL) {
  AD @join__enumValue(graph: RQL)
  PARTNERSHIP @join__enumValue(graph: RQL)
}

enum core_apimessages_ConversationMessageFlag_Reason_Type @join__type(graph: RQL) {
  FRAUD @join__enumValue(graph: RQL)
  OFFSITE @join__enumValue(graph: RQL)
  ABUSE @join__enumValue(graph: RQL)
}

enum core_apimessages_CreateShipmentErrorType @join__type(graph: RQL) {
  SHIPMENT_FORM_BASE_ERROR @join__enumValue(graph: RQL)
  SHIPMENT_FORM_CUSTOMS_ERROR @join__enumValue(graph: RQL)
  SHIPMENT_FORM_CUSTOMS_SIGNER_ERROR @join__enumValue(graph: RQL)
  SHIPMENT_FORM_SHIPPING_ZONE_CHANGED_ERROR @join__enumValue(graph: RQL)
  SHIPMENT_FORM_CARRIER_CALCULATED_UPS_PO_BOX_ERROR @join__enumValue(graph: RQL)
}

enum core_apimessages_Shipment_ShipmentType @join__type(graph: RQL) {
  STANDARD @join__enumValue(graph: RQL)
  ADDITIONAL @join__enumValue(graph: RQL)
}

enum core_apimessages_UserShopPermission_PermissionLevel @join__type(graph: RQL) {
  UNKNOWN @join__enumValue(graph: RQL)
  ADMINISTRATOR @join__enumValue(graph: RQL)
  MANAGER @join__enumValue(graph: RQL)
}

enum core_apimessages_CreditCard_Brand_Type @join__type(graph: RQL) {
  """Default if brand is not registered"""
  UNKNOWN @join__enumValue(graph: RQL)
  VISA @join__enumValue(graph: RQL)
  MASTERCARD @join__enumValue(graph: RQL)
  AMEX @join__enumValue(graph: RQL)
  DISCOVER @join__enumValue(graph: RQL)
  JCB @join__enumValue(graph: RQL)
}

enum core_apimessages_CrossPlatformListingStatusResponse_SessionStatus @join__type(graph: RQL) {
  NONE @join__enumValue(graph: RQL)
  ACTIVE @join__enumValue(graph: RQL)
  COMPLETED @join__enumValue(graph: RQL)
  BUSY @join__enumValue(graph: RQL)
}

enum core_apimessages_UserService_Provider @join__type(graph: RQL) {
  UNKNOWN @join__enumValue(graph: RQL)
  APPLE @join__enumValue(graph: RQL)
  FACEBOOK @join__enumValue(graph: RQL)
  GOOGLE @join__enumValue(graph: RQL)
}

enum core_apimessages_ExpressSaleCheckout_Status @join__type(graph: RQL) {
  AWAITING_PAYMENT @join__enumValue(graph: RQL)
  PAYMENT_IN_PROGRESS @join__enumValue(graph: RQL)
  COMPLETED @join__enumValue(graph: RQL)
  INACTIVE_BID @join__enumValue(graph: RQL)
}

enum reverb_feed_SearchableType @join__type(graph: RQL) {
  FILTERED_QUERY @join__enumValue(graph: RQL)
  COMPARISON_SHOPPING_PAGE @join__enumValue(graph: RQL)
  CURATED_SET @join__enumValue(graph: RQL)
  SHOP @join__enumValue(graph: RQL)
  BRAND @join__enumValue(graph: RQL)
  CATEGORY @join__enumValue(graph: RQL)
  PRODUCT_TYPE @join__enumValue(graph: RQL)
  CURATED_SEARCH @join__enumValue(graph: RQL)
  PROFILE @join__enumValue(graph: RQL)
  ALBUM @join__enumValue(graph: RQL)
  RELEASE @join__enumValue(graph: RQL)
  LABEL @join__enumValue(graph: RQL)
  ARTIST @join__enumValue(graph: RQL)
  FAVORITE_SHOP @join__enumValue(graph: RQL)
}

enum core_apimessages_FavoriteType @join__type(graph: RQL) {
  LISTING @join__enumValue(graph: RQL)
  SAVED_SEARCH @join__enumValue(graph: RQL)
  FAVORITE_SHOP @join__enumValue(graph: RQL)
}

enum core_apimessages_FeedResult_EntityType @join__type(graph: RQL) {
  LISTING @join__enumValue(graph: RQL)
}

enum core_apimessages_FeedResult_Source @join__type(graph: RQL) {
  SAVED_SEARCH @join__enumValue(graph: RQL)
  RECOMMENDATION @join__enumValue(graph: RQL)
}

enum core_apimessages_FinalizePaypalCheckoutPaymentRequest_ResultConfirmation @join__type(graph: RQL) {
  """
  Default for all web browser-based flows. Confirmation will be available via the Checkout endpoint.
  """
  ASYNC @join__enumValue(graph: RQL)
  """
  Intended for native apps only. Confirmation will be available synchronously in the response body.
  """
  SYNC @join__enumValue(graph: RQL)
}

enum core_apimessages_FindAddressAutocompleteSuggestionsResponse_SuggestionType @join__type(graph: RQL) {
  ADDRESS @join__enumValue(graph: RQL)
  CONTAINER @join__enumValue(graph: RQL)
}

enum core_apimessages_FlagProductReviewRequest_Reason @join__type(graph: RQL) {
  NOT_RELEVANT @join__enumValue(graph: RQL)
  SPAM @join__enumValue(graph: RQL)
  OFFENSIVE @join__enumValue(graph: RQL)
}

enum core_apimessages_FormSelectCategoriesRequest_FormSelectEntityType @join__type(graph: RQL) {
  UNKNOWN @join__enumValue(graph: RQL)
  PRODUCT @join__enumValue(graph: RQL)
  GEAR_COLLECTION_ITEM @join__enumValue(graph: RQL)
}

enum core_apimessages_GearCollectionItem_SeedType @join__type(graph: RQL) {
  Unknown @join__enumValue(graph: RQL)
  None @join__enumValue(graph: RQL)
  Order @join__enumValue(graph: RQL)
  Product @join__enumValue(graph: RQL)
  CanonicalProduct @join__enumValue(graph: RQL)
}

enum core_apimessages_GearCollectionItem_State @join__type(graph: RQL) {
  ACTIVE @join__enumValue(graph: RQL)
  ARCHIVED @join__enumValue(graph: RQL)
}

enum core_apimessages_GearCollectionItemEntry_Source @join__type(graph: RQL) {
  NONE @join__enumValue(graph: RQL)
  BLANK_FORM @join__enumValue(graph: RQL)
  SEEDED_FORM @join__enumValue(graph: RQL)
  PAST_PURCHASE @join__enumValue(graph: RQL)
  EMAIL @join__enumValue(graph: RQL)
  CREATED_BY_REVERB @join__enumValue(graph: RQL)
  ADMIN_CSV_IMPORT @join__enumValue(graph: RQL)
  PRICE_GUIDE_TOOL @join__enumValue(graph: RQL)
}

enum core_apimessages_HomepageComponent_ComponentType @join__type(graph: RQL) {
  PLACEHOLDER @join__enumValue(graph: RQL)
  LISTINGS_GRID @join__enumValue(graph: RQL)
  PRODUCTS_GRID @join__enumValue(graph: RQL)
  CMS_BANNER @join__enumValue(graph: RQL)
  IMAGE_MOSAIC @join__enumValue(graph: RQL)
  ROUNDED_GRID @join__enumValue(graph: RQL)
}

enum core_apimessages_HomepageComponent_ComponentIdentifier @join__type(graph: RQL) {
  NONE @join__enumValue(graph: RQL)
  FEED @join__enumValue(graph: RQL)
  WATCHLIST @join__enumValue(graph: RQL)
  BANNER_TOP @join__enumValue(graph: RQL)
  BANNER_MID_1 @join__enumValue(graph: RQL)
  BANNER_MID_2 @join__enumValue(graph: RQL)
  RECENTLY_VIEWED_LISTINGS @join__enumValue(graph: RQL)
  REGIONAL_LISTINGS @join__enumValue(graph: RQL)
  RECENT_SEARCH @join__enumValue(graph: RQL)
  JUST_LISTED @join__enumValue(graph: RQL)
  NEW_TO_YOU @join__enumValue(graph: RQL)
  RECOMMENDED_LISTINGS @join__enumValue(graph: RQL)
  DEALS_STEALS @join__enumValue(graph: RQL)
  SUB_CATEGORY @join__enumValue(graph: RQL)
  RECENTLY_VIEWED_PRODUCTS @join__enumValue(graph: RQL)
  NOTIFICATIONS @join__enumValue(graph: RQL)
  EMPTY_WATCHLIST @join__enumValue(graph: RQL)
  MOST_WATCHED_LISTINGS @join__enumValue(graph: RQL)
  RECENT_CATEGORY @join__enumValue(graph: RQL)
  BEST_SELLERS @join__enumValue(graph: RQL)
  BASED_ON_RECENTLY_VIEWED_LISTINGS @join__enumValue(graph: RQL)
  TRENDING_SEARCHES @join__enumValue(graph: RQL)
}

enum core_apimessages_NotificationColor @join__type(graph: RQL) {
  DEFAULT @join__enumValue(graph: RQL)
  RED @join__enumValue(graph: RQL)
  GREEN @join__enumValue(graph: RQL)
  BLUE @join__enumValue(graph: RQL)
}

enum core_apimessages_ListingData_Disruptor @join__type(graph: RQL) {
  NONE @join__enumValue(graph: RQL)
  BUMPED @join__enumValue(graph: RQL)
  SALE @join__enumValue(graph: RQL)
  PRICE_DROP @join__enumValue(graph: RQL)
  OUTLET @join__enumValue(graph: RQL)
}

enum core_apimessages_MosaicTilePosition @join__type(graph: RQL) {
  LEFT @join__enumValue(graph: RQL)
  CENTER @join__enumValue(graph: RQL)
  RIGHT @join__enumValue(graph: RQL)
}

enum core_apimessages_MyShopCampaign_CampaignType @join__type(graph: RQL) {
  UNKNOWN @join__enumValue(graph: RQL)
  REPEAT_BUYER_COUPON @join__enumValue(graph: RQL)
  AD_HOC @join__enumValue(graph: RQL)
}

enum core_apimessages_MyShopOnboardingResponse_BillingMethodStatus @join__type(graph: RQL) {
  NOT_REQUIRED @join__enumValue(graph: RQL)
  REQUIRED @join__enumValue(graph: RQL)
  COMPLETED @join__enumValue(graph: RQL)
}

enum core_apimessages_MyShopOnboardingResponse_PaypalSetupStatus @join__type(graph: RQL) {
  PAYPAL_NOT_COMPLETED @join__enumValue(graph: RQL)
  PAYPAL_COMPLETED @join__enumValue(graph: RQL)
}

enum core_apimessages_NegotiationState @join__type(graph: RQL) {
  ACTIVE @join__enumValue(graph: RQL)
  ACCEPTED @join__enumValue(graph: RQL)
  REJECTED @join__enumValue(graph: RQL)
  EXPIRED @join__enumValue(graph: RQL)
}

enum core_apimessages_NegotiationType @join__type(graph: RQL) {
  STANDARD @join__enumValue(graph: RQL)
  AUTO_PUSH_OFFER @join__enumValue(graph: RQL)
  EMAIL @join__enumValue(graph: RQL)
}

enum core_apimessages_Image_Scope @join__type(graph: RQL) {
  ALL @join__enumValue(graph: RQL)
  PHOTOS @join__enumValue(graph: RQL)
  SMALL_HEADER_IMAGE @join__enumValue(graph: RQL)
  HEADER_IMAGE @join__enumValue(graph: RQL)
  FACEBOOK_IMAGE @join__enumValue(graph: RQL)
  PRODUCT_MANUAL @join__enumValue(graph: RQL)
  APP_STORE_BANNER @join__enumValue(graph: RQL)
  HOMEPAGE_IMAGE @join__enumValue(graph: RQL)
  HERO_IMAGE @join__enumValue(graph: RQL)
  VERTICAL_MOSAIC_IMAGE @join__enumValue(graph: RQL)
  SHOP_BANNER_960 @join__enumValue(graph: RQL)
  DESKTOP_IMAGE @join__enumValue(graph: RQL)
  SQUARE_MOSAIC_IMAGE @join__enumValue(graph: RQL)
  FULL_BLEED_HOMEPAGE_IMAGE @join__enumValue(graph: RQL)
  APP_STORE_ICON @join__enumValue(graph: RQL)
  STOREFRONT_BANNER_1500 @join__enumValue(graph: RQL)
  FULL_BLEED_IMAGE @join__enumValue(graph: RQL)
  SHOP_BANNER @join__enumValue(graph: RQL)
  AVATAR @join__enumValue(graph: RQL)
  FULL_BLEED_BRAND @join__enumValue(graph: RQL)
  MOBILE_IMAGE @join__enumValue(graph: RQL)
  IMAGE @join__enumValue(graph: RQL)
}

enum core_apimessages_NodeRequest_Lookup_Params_TruliooOnboardingRecords_RecordType @join__type(graph: RQL) {
  ALL @join__enumValue(graph: RQL)
  PARENT @join__enumValue(graph: RQL)
  CHILDREN @join__enumValue(graph: RQL)
}

enum core_apimessages_NegotiationParty @join__type(graph: RQL) {
  BUYER @join__enumValue(graph: RQL)
  SELLER @join__enumValue(graph: RQL)
}

enum core_apimessages_OfferAlert_Level @join__type(graph: RQL) {
  SUCCESS @join__enumValue(graph: RQL)
}

enum core_apimessages_Payment_PaymentMethod @join__type(graph: RQL) {
  DIRECT_CHECKOUT @join__enumValue(graph: RQL)
  PAYPAL @join__enumValue(graph: RQL)
  AFFIRM @join__enumValue(graph: RQL)
  OTHER @join__enumValue(graph: RQL)
  DC_VIA_PAYPAL @join__enumValue(graph: RQL)
  PAYPAL_MANUAL @join__enumValue(graph: RQL)
  ANDROID_PAY @join__enumValue(graph: RQL)
  APPLE_PAY @join__enumValue(graph: RQL)
  SOFORT @join__enumValue(graph: RQL)
  BANK_WIRE @join__enumValue(graph: RQL)
  CASH @join__enumValue(graph: RQL)
  CHECK @join__enumValue(graph: RQL)
  CREDIT_CARD @join__enumValue(graph: RQL)
  MONEY_ORDER @join__enumValue(graph: RQL)
  ESCROW_COM @join__enumValue(graph: RQL)
  KLARNA_ACCOUNT @join__enumValue(graph: RQL)
  PAYPAL_PAY_LATER @join__enumValue(graph: RQL)
}

enum core_apimessages_OrderRefunds_RefundableState @join__type(graph: RQL) {
  REFUNDABLE @join__enumValue(graph: RQL)
  SELLER_REFUNDABLE @join__enumValue(graph: RQL)
  NON_REFUNDABLE @join__enumValue(graph: RQL)
}

enum core_apimessages_AddressVerificationStatus @join__type(graph: RQL) {
  VERIFIED @join__enumValue(graph: RQL)
  NOT_VERIFIED @join__enumValue(graph: RQL)
}

enum core_apimessages_PacklinkAccount_Status @join__type(graph: RQL) {
  PENDING @join__enumValue(graph: RQL)
  COMPLETED @join__enumValue(graph: RQL)
  FAILED @join__enumValue(graph: RQL)
}

enum core_apimessages_PacklinkShipment_Status @join__type(graph: RQL) {
  PENDING @join__enumValue(graph: RQL)
  SUCCESS @join__enumValue(graph: RQL)
  FAILED @join__enumValue(graph: RQL)
}

enum core_apimessages_Payment_PaymentStatus @join__type(graph: RQL) {
  REFUNDED @join__enumValue(graph: RQL)
  COMPLETED @join__enumValue(graph: RQL)
  PENDING @join__enumValue(graph: RQL)
  FAILED @join__enumValue(graph: RQL)
  NONE @join__enumValue(graph: RQL)
  CANCELLED @join__enumValue(graph: RQL)
  AUTHORIZED @join__enumValue(graph: RQL)
}

enum core_apimessages_PreorderInfoEntry_TimeType @join__type(graph: RQL) {
  SHIP_DATE @join__enumValue(graph: RQL)
  LEAD_TIME @join__enumValue(graph: RQL)
}

enum core_apimessages_PreorderInfoEntry_LeadTimeUnit @join__type(graph: RQL) {
  DAYS @join__enumValue(graph: RQL)
  WEEKS @join__enumValue(graph: RQL)
}

enum core_apimessages_PrepublishStatusResponse_PrepublishStatus @join__type(graph: RQL) {
  UNKNOWN @join__enumValue(graph: RQL)
  PROGRESSIVE_ONBOARDING_REQUIRED @join__enumValue(graph: RQL)
  PAYMENT_POLICY_REQUIRED @join__enumValue(graph: RQL)
  SELLER_VERIFICATION_REQUIRED @join__enumValue(graph: RQL)
  RETURN_POLICY_REQUIRED @join__enumValue(graph: RQL)
  BILLING_METHOD_REQUIRED @join__enumValue(graph: RQL)
  READY_FOR_PUBLISH @join__enumValue(graph: RQL)
}

enum core_apimessages_Recommendation_RecommendationType @join__type(graph: RQL) {
  CANONICAL_PRODUCT @join__enumValue(graph: RQL)
}

enum core_apimessages_RefundRequest_RefundType @join__type(graph: RQL) {
  FULL @join__enumValue(graph: RQL)
  PARTIAL @join__enumValue(graph: RQL)
}

enum core_apimessages_RefundRequest_RefundState @join__type(graph: RQL) {
  APPROVED @join__enumValue(graph: RQL)
  CONDITIONALLY_APPROVED @join__enumValue(graph: RQL)
  CANCELLED @join__enumValue(graph: RQL)
  DENIED @join__enumValue(graph: RQL)
  PENDING @join__enumValue(graph: RQL)
  PENDING_SELLER_RESPONSE @join__enumValue(graph: RQL)
}

enum core_apimessages_SellerOrder_TaxResponsibleParty @join__type(graph: RQL) {
  REVERB @join__enumValue(graph: RQL)
  SELLER @join__enumValue(graph: RQL)
}

enum core_apimessages_AdyenLegalEntity @join__type(graph: RQL) {
  INDIVIDUAL @join__enumValue(graph: RQL)
  BUSINESS @join__enumValue(graph: RQL)
}

enum core_apimessages_ShippingProtectionStatus @join__type(graph: RQL) {
  PROTECTION_OPTIONAL @join__enumValue(graph: RQL)
  PROTECTION_REQUIRED @join__enumValue(graph: RQL)
  PROTECTION_NOT_SUPPORTED @join__enumValue(graph: RQL)
}

enum core_apimessages_SignatureRequiredStatus @join__type(graph: RQL) {
  SIGNATURE_OPTIONAL @join__enumValue(graph: RQL)
  SIGNATURE_REQUIRED @join__enumValue(graph: RQL)
  SIGNATURE_NOT_SUPPORTED @join__enumValue(graph: RQL)
  SIGNATURE_REQUIRED_WITH_INSURANCE @join__enumValue(graph: RQL)
}

enum core_apimessages_SiteBannerRequest_VisibilityScope @join__type(graph: RQL) {
  NONE @join__enumValue(graph: RQL)
  MOBILE @join__enumValue(graph: RQL)
  MY_UPDATES @join__enumValue(graph: RQL)
}

enum core_apimessages_StartPaypalCheckoutRequest_PaymentMethodType @join__type(graph: RQL) {
  PAYPAL @join__enumValue(graph: RQL)
  DC_VIA_PAYPAL @join__enumValue(graph: RQL)
}

enum core_apimessages_TaxFormDownload_Status @join__type(graph: RQL) {
  PENDING @join__enumValue(graph: RQL)
  COMPLETE @join__enumValue(graph: RQL)
  FAILED @join__enumValue(graph: RQL)
}

enum core_apimessages_TaxIdentification_Status @join__type(graph: RQL) {
  PENDING_VERIFICATION @join__enumValue(graph: RQL)
  FAILED_VERIFICATION @join__enumValue(graph: RQL)
  VERIFIED @join__enumValue(graph: RQL)
}

enum core_apimessages_TaxIdentification_TaxType @join__type(graph: RQL) {
  VAT @join__enumValue(graph: RQL)
  GST @join__enumValue(graph: RQL)
  SALES_TAX @join__enumValue(graph: RQL)
  EPR @join__enumValue(graph: RQL)
  QST @join__enumValue(graph: RQL)
}

enum core_apimessages_TaxPoliciesRequest_TaxPoliciesType @join__type(graph: RQL) {
  SHOP @join__enumValue(graph: RQL)
  PRODUCT @join__enumValue(graph: RQL)
}

enum core_apimessages_TraitsRequest_TraitableType @join__type(graph: RQL) {
  Product @join__enumValue(graph: RQL)
}

enum core_apimessages_TruliooOnboarding_VerificationStatus @join__type(graph: RQL) {
  NOT_STARTED @join__enumValue(graph: RQL)
  STARTED @join__enumValue(graph: RQL)
  ACCEPTED @join__enumValue(graph: RQL)
  REJECTED @join__enumValue(graph: RQL)
  ERROR @join__enumValue(graph: RQL)
}

enum core_apimessages_TruliooOnboardingRecord_EntityType @join__type(graph: RQL) {
  INDIVIDUAL @join__enumValue(graph: RQL)
  BUSINESS @join__enumValue(graph: RQL)
}

enum core_apimessages_TruliooOnboardingRecord_Status @join__type(graph: RQL) {
  NOT_STARTED @join__enumValue(graph: RQL)
  STARTED @join__enumValue(graph: RQL)
  PENDING_REVIEW @join__enumValue(graph: RQL)
  ACCEPTED @join__enumValue(graph: RQL)
  REJECTED @join__enumValue(graph: RQL)
  ERROR @join__enumValue(graph: RQL)
  NOT_APPLICABLE @join__enumValue(graph: RQL)
  REJECTED_BUT_AWAITING_NOTE @join__enumValue(graph: RQL)
  ADDED_SUSPENDED_NOTE_BUT_AWAITING_REJECT @join__enumValue(graph: RQL)
  ADDED_PENDING_OUTCOME_NOTE_BUT_AWAITING_REJECT @join__enumValue(graph: RQL)
}

enum core_apimessages_UpdateCrossPlatformListingSessionRequest_Action @join__type(graph: RQL) {
  START @join__enumValue(graph: RQL)
  CANCEL @join__enumValue(graph: RQL)
}

enum core_apimessages_UpdateListingRequest_UpdateType @join__type(graph: RQL) {
  DEFAULT @join__enumValue(graph: RQL)
  CROSS_PLATFORM_PHOTOS @join__enumValue(graph: RQL)
  SPECIFIC_FIELDS @join__enumValue(graph: RQL)
}

enum core_apimessages_ListingStateUpdate @join__type(graph: RQL) {
  ENDED @join__enumValue(graph: RQL)
  LIVE @join__enumValue(graph: RQL)
}

enum core_apimessages_NegotiationAction @join__type(graph: RQL) {
  CREATE @join__enumValue(graph: RQL)
  ACCEPT @join__enumValue(graph: RQL)
  REJECT @join__enumValue(graph: RQL)
  COUNTER @join__enumValue(graph: RQL)
}

enum core_apimessages_UserNotificationType @join__type(graph: RQL) {
  UNKNOWN_USER_NOTIFICATION_TYPE @join__enumValue(graph: RQL)
  NEW_FEATURE_ALERT @join__enumValue(graph: RQL)
  ACTION_NEEDED @join__enumValue(graph: RQL)
}

enum core_apimessages_UserNotification_UserNotificationKey @join__type(graph: RQL) {
  UNKNOWN @join__enumValue(graph: RQL)
  COMBINE_AND_SAVE @join__enumValue(graph: RQL)
  FREE_SHIPPING_THRESHOLD @join__enumValue(graph: RQL)
  NEW_AD_DASH @join__enumValue(graph: RQL) @deprecated
  PACKLINK @join__enumValue(graph: RQL)
  GEAR_COLLECTIONS @join__enumValue(graph: RQL)
  WITHHOLD_PAYOUTS @join__enumValue(graph: RQL)
  INFORM_ACT_LOCKED_MODE @join__enumValue(graph: RQL)
  UPDATE_ADDRESS @join__enumValue(graph: RQL)
  SELLER_SHOP_COUPONS @join__enumValue(graph: RQL)
  PAYPAL_LOCKED_MODE @join__enumValue(graph: RQL)
  HAS_ABOVE_AVERAGE_PRICED_LISTINGS @join__enumValue(graph: RQL)
  CANADA_POST_STRIKE_BUYER @join__enumValue(graph: RQL) @deprecated
}

enum core_apimessages_UserWatchesRequest_ListingState @join__type(graph: RQL) {
  ALL @join__enumValue(graph: RQL)
  LIVE @join__enumValue(graph: RQL)
  NOT_LIVE @join__enumValue(graph: RQL)
}

enum core_apimessages_VideosRequest_VideolinkableType @join__type(graph: RQL) {
  PRODUCT @join__enumValue(graph: RQL)
  SHOP @join__enumValue(graph: RQL)
}

enum core_apimessages_WatchesRequest_ListingState @join__type(graph: RQL) {
  ALL @join__enumValue(graph: RQL)
  LIVE @join__enumValue(graph: RQL)
  NOT_LIVE @join__enumValue(graph: RQL)
}

enum google_protobuf_FieldDescriptorProto_Label @join__type(graph: RQL) {
  """0 is reserved for errors"""
  LABEL_OPTIONAL @join__enumValue(graph: RQL)
  LABEL_REQUIRED @join__enumValue(graph: RQL)
  LABEL_REPEATED @join__enumValue(graph: RQL)
}

enum google_protobuf_FieldDescriptorProto_Type @join__type(graph: RQL) {
  """
    0 is reserved for errors.
  Order is weird for historical reasons.
  """
  TYPE_DOUBLE @join__enumValue(graph: RQL)
  TYPE_FLOAT @join__enumValue(graph: RQL)
  """
    Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if
  negative values are likely.
  """
  TYPE_INT64 @join__enumValue(graph: RQL)
  TYPE_UINT64 @join__enumValue(graph: RQL)
  """
    Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if
  negative values are likely.
  """
  TYPE_INT32 @join__enumValue(graph: RQL)
  TYPE_FIXED64 @join__enumValue(graph: RQL)
  TYPE_FIXED32 @join__enumValue(graph: RQL)
  TYPE_BOOL @join__enumValue(graph: RQL)
  TYPE_STRING @join__enumValue(graph: RQL)
  """
    Tag-delimited aggregate.
  Group type is deprecated and not supported in proto3. However, Proto3
  implementations should still be able to parse the group wire format and
  treat group fields as unknown fields.
  """
  TYPE_GROUP @join__enumValue(graph: RQL)
  """Length-delimited aggregate."""
  TYPE_MESSAGE @join__enumValue(graph: RQL)
  """New in version 2."""
  TYPE_BYTES @join__enumValue(graph: RQL)
  TYPE_UINT32 @join__enumValue(graph: RQL)
  TYPE_ENUM @join__enumValue(graph: RQL)
  TYPE_SFIXED32 @join__enumValue(graph: RQL)
  TYPE_SFIXED64 @join__enumValue(graph: RQL)
  """Uses ZigZag encoding."""
  TYPE_SINT32 @join__enumValue(graph: RQL)
  """Uses ZigZag encoding."""
  TYPE_SINT64 @join__enumValue(graph: RQL)
}

enum google_protobuf_FieldOptions_CType @join__type(graph: RQL) {
  """Default mode."""
  STRING @join__enumValue(graph: RQL)
  CORD @join__enumValue(graph: RQL)
  STRING_PIECE @join__enumValue(graph: RQL)
}

enum google_protobuf_FieldOptions_JSType @join__type(graph: RQL) {
  """Use the default type."""
  JS_NORMAL @join__enumValue(graph: RQL)
  """Use JavaScript strings."""
  JS_STRING @join__enumValue(graph: RQL)
  """Use JavaScript numbers."""
  JS_NUMBER @join__enumValue(graph: RQL)
}

enum google_protobuf_FileOptions_OptimizeMode @join__type(graph: RQL) {
  """Generate complete code for parsing, serialization,"""
  SPEED @join__enumValue(graph: RQL)
  """
    etc.
  
  Use ReflectionOps to implement these methods.
  """
  CODE_SIZE @join__enumValue(graph: RQL)
  """Generate code using MessageLite and the lite runtime."""
  LITE_RUNTIME @join__enumValue(graph: RQL)
}

enum google_protobuf_MethodOptions_IdempotencyLevel @join__type(graph: RQL) {
  IDEMPOTENCY_UNKNOWN @join__enumValue(graph: RQL)
  """implies idempotent"""
  NO_SIDE_EFFECTS @join__enumValue(graph: RQL)
  """idempotent, but may have side effects"""
  IDEMPOTENT @join__enumValue(graph: RQL)
}

enum loqate_AddressCaptureFindResponse_Item_ItemType @join__type(graph: RQL) {
  ADDRESS @join__enumValue(graph: RQL)
  CONTAINER @join__enumValue(graph: RQL)
}

enum reverb_config_cache_SearchRedirect_Type @join__type(graph: RQL) {
  Brand @join__enumValue(graph: RQL)
  BrandModel @join__enumValue(graph: RQL)
  ProductFamily @join__enumValue(graph: RQL)
}

enum reverb_event_EntityUpdated_Action @join__type(graph: RQL) {
  UPDATED @join__enumValue(graph: RQL)
  DELETED @join__enumValue(graph: RQL)
}

enum reverb_event_MobileInteraction_InteractionType @join__type(graph: RQL) {
  TAP @join__enumValue(graph: RQL)
  DRAG @join__enumValue(graph: RQL)
  FORCE_TAP @join__enumValue(graph: RQL)
}

enum reverb_feed_DataBackfillTopic_Action @join__type(graph: RQL) {
  BACKFILL_EVERYWHERE_ITEM_REGION_CLEANUP @join__enumValue(graph: RQL)
  BACKFILL_DUPLICATE_SAVED_SEARCHES_CLEANUP @join__enumValue(graph: RQL)
}

enum reverb_feed_FeedEntry_EntryType @join__type(graph: RQL) {
  """The only entry type that is actively in use."""
  LISTING @join__enumValue(graph: RQL)
  """Deprecated, but still referenced in reverb core."""
  CSP @join__enumValue(graph: RQL) @deprecated
  """
  Deprecated, but there are still some article entries in the feed DB, and references in reverb core and feed.
  """
  ARTICLE @join__enumValue(graph: RQL) @deprecated
  """Deprecated, but still referenced in reverb core."""
  SHOP @join__enumValue(graph: RQL) @deprecated
  """Deprecated, but still referenced in reverb core."""
  FILTERED_QUERY @join__enumValue(graph: RQL) @deprecated
  """Deprecated, but still referenced in reverb core code."""
  PROFILE @join__enumValue(graph: RQL) @deprecated
  """Deprecated, but still referenced in reverb core and feed code."""
  ALBUM @join__enumValue(graph: RQL) @deprecated
  """Deprecated, but still referenced in reverb core."""
  RELEASE @join__enumValue(graph: RQL) @deprecated
  """Deprecated, but still referenced in reverb core."""
  PAGE @join__enumValue(graph: RQL) @deprecated
  """Deprecated, but still referenced in reverb core."""
  LABEL @join__enumValue(graph: RQL) @deprecated
  """Deprecated, but still referenced in reverb core."""
  ARTIST @join__enumValue(graph: RQL) @deprecated
  """Deprecated, but still referenced in reverb core and feed code."""
  REMOVE @join__enumValue(graph: RQL) @deprecated
}

enum reverb_feed_FeedEntryUpdated_Action @join__type(graph: RQL) {
  ADD @join__enumValue(graph: RQL)
  REMOVE @join__enumValue(graph: RQL)
  REMOVE_ALL @join__enumValue(graph: RQL)
  REMOVE_BY_SOURCE @join__enumValue(graph: RQL)
  ADD_BY_SOURCE @join__enumValue(graph: RQL)
  REMOVE_DIGEST @join__enumValue(graph: RQL)
}

enum reverb_feed_FeedSourceType @join__type(graph: RQL) {
  NONE @join__enumValue(graph: RQL)
  SAVED_SEARCH @join__enumValue(graph: RQL)
  WATCH @join__enumValue(graph: RQL)
}

enum reverb_feed_FollowsTopic_Action @join__type(graph: RQL) {
  REMOVE @join__enumValue(graph: RQL)
  REMOVE_BY_SEARCHABLE @join__enumValue(graph: RQL)
  BACKFILL_FEED_ENABLED @join__enumValue(graph: RQL)
  BACKFILL_FAVORITE_SHOPS @join__enumValue(graph: RQL)
}

enum reverb_pricing_ModelVersion @join__type(graph: RQL) {
  MACHINE_LEARNING @join__enumValue(graph: RQL)
  DESCRIPTIVE @join__enumValue(graph: RQL)
}

enum reverb_reporting_Condition @join__type(graph: RQL) {
  ALL @join__enumValue(graph: RQL)
  NEW @join__enumValue(graph: RQL)
  USED @join__enumValue(graph: RQL)
}

enum reverb_reporting_CSPStatsMetric @join__type(graph: RQL) {
  TOTAL_ORDER_VALUE_USC @join__enumValue(graph: RQL)
  ORDER_QUANTITY @join__enumValue(graph: RQL)
  AVG_ORDER_PRICE_USC @join__enumValue(graph: RQL)
  LIVE_LISTING_COUNT @join__enumValue(graph: RQL)
  MIN_LISTING_PRICE_USC @join__enumValue(graph: RQL)
}

enum reverb_reporting_TimeGrouping @join__type(graph: RQL) {
  DAY @join__enumValue(graph: RQL)
  MONTH @join__enumValue(graph: RQL)
}

enum reverb_search_ListingsSearchRequest_Aggregation @join__type(graph: RQL) @join__type(graph: SEARCH_REMIXER) {
  CATEGORY_UUIDS @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  BRAND_UUIDS @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  BRAND_SLUGS @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  CATEGORY_SLUGS @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  CONDITION_SLUGS @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  DECADES @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  CURATED_SETS @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  TRAITS @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  CANONICAL_FINISH @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  """
  deprecating this in favor of the more generic BUMP_RATE_RECOMMENDATIONS
  """
  BUMP_RATE_PERCENTILES @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  BUMP_RATE_RECOMMENDATIONS @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  SALE_DISCOUNT_PERCENT @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  SHOP_ID @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  COUNTRY_OF_ORIGIN @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  FIND_A_DEAL @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
}

enum reverb_search_AuctionsSearchRequest_Aggregation @join__type(graph: RQL) {
  USER_BID_STATUS @join__enumValue(graph: RQL)
}

enum reverb_search_AuctionsSearchRequest_UserBidStatus @join__type(graph: RQL) {
  ACTIVE @join__enumValue(graph: RQL)
  ALL @join__enumValue(graph: RQL)
  WON @join__enumValue(graph: RQL)
  LOST @join__enumValue(graph: RQL)
}

enum reverb_search_AuctionsSearchRequest_MerchandisingType @join__type(graph: RQL) {
  LP @join__enumValue(graph: RQL)
  DIGITAL @join__enumValue(graph: RQL)
}

enum reverb_search_AutocompleteRequest_Limit @join__type(graph: RQL) {
  DEFAULT @join__enumValue(graph: RQL)
  COMPACT @join__enumValue(graph: RQL)
}

enum reverb_search_BatchMatchedListingsSearchResponse_SearchResult_ResultType @join__type(graph: RQL) {
  SUCCESS @join__enumValue(graph: RQL)
  ERROR @join__enumValue(graph: RQL)
  TIMEOUT @join__enumValue(graph: RQL)
}

enum reverb_search_CSPSearchRequest_Aggregation @join__type(graph: RQL) {
  BRAND_NAMES @join__enumValue(graph: RQL)
  FINISHES @join__enumValue(graph: RQL)
  CATEGORY_UUIDS @join__enumValue(graph: RQL)
  DECADES @join__enumValue(graph: RQL)
}

enum reverb_search_FullTextQueryOperand @join__type(graph: RQL) {
  OR @join__enumValue(graph: RQL)
  AND @join__enumValue(graph: RQL)
}

enum reverb_search_CSPSearchRequest_Sort @join__type(graph: RQL) {
  NONE @join__enumValue(graph: RQL)
  QUALITY_DESC @join__enumValue(graph: RQL)
  LISTING_COUNT_DESC @join__enumValue(graph: RQL)
  TITLE_RAW_ASC @join__enumValue(graph: RQL)
  CREATED_AT_ASC @join__enumValue(graph: RQL)
  RECENT_ORDERS_COUNT_DESC @join__enumValue(graph: RQL)
  TRENDING_DESC @join__enumValue(graph: RQL)
  RECENT_ORDERS_COUNT_ASC @join__enumValue(graph: RQL)
  RECENT_ORDERS_COUNT_USED_DESC @join__enumValue(graph: RQL)
  RECENT_ORDERS_COUNT_NEW_DESC @join__enumValue(graph: RQL)
  RECENT_ORDERS_COUNT_USED_ASC @join__enumValue(graph: RQL)
  RECENT_ORDERS_COUNT_NEW_ASC @join__enumValue(graph: RQL)
  LISTING_MIN_PRICE_USED_DESC @join__enumValue(graph: RQL)
  LISTING_MIN_PRICE_NEW_DESC @join__enumValue(graph: RQL)
  LISTING_MIN_PRICE_USED_ASC @join__enumValue(graph: RQL)
  LISTING_MIN_PRICE_NEW_ASC @join__enumValue(graph: RQL)
  AVERAGE_ORDER_PRICE_USED_ASC @join__enumValue(graph: RQL)
  AVERAGE_ORDER_PRICE_USED_DESC @join__enumValue(graph: RQL)
  AVERAGE_ORDER_PRICE_NEW_ASC @join__enumValue(graph: RQL)
  AVERAGE_ORDER_PRICE_NEW_DESC @join__enumValue(graph: RQL)
  AVERAGE_ORDER_PRICE_ASC @join__enumValue(graph: RQL)
  AVERAGE_ORDER_PRICE_DESC @join__enumValue(graph: RQL)
  LIVE_LISTINGS_USED_ASC @join__enumValue(graph: RQL)
  LIVE_LISTINGS_NEW_ASC @join__enumValue(graph: RQL)
  LIVE_LISTINGS_USED_DESC @join__enumValue(graph: RQL)
  LIVE_LISTINGS_NEW_DESC @join__enumValue(graph: RQL)
  LIVE_LISTINGS_ASC @join__enumValue(graph: RQL)
  LIVE_LISTINGS_DESC @join__enumValue(graph: RQL)
  IMPRESSIONS_ASC @join__enumValue(graph: RQL)
  IMPRESSIONS_DESC @join__enumValue(graph: RQL)
}

enum reverb_search_Autodirects @join__type(graph: RQL) @join__type(graph: SEARCH_REMIXER) {
  DEFAULT @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  STANDARDIZED @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  IMPROVED_DATA @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  NEVER @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
}

enum reverb_search_Context @join__type(graph: RQL) @join__type(graph: SEARCH_REMIXER) {
  INITIAL_QUERY @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
}

enum reverb_search_CompletionType @join__type(graph: RQL) {
  ALL @join__enumValue(graph: RQL)
  CSP @join__enumValue(graph: RQL)
  BRAND @join__enumValue(graph: RQL)
  BRAND_MODEL @join__enumValue(graph: RQL)
  FREE_TEXT @join__enumValue(graph: RQL)
  PRODUCT_TYPE @join__enumValue(graph: RQL)
  SUB_CATEGORY @join__enumValue(graph: RQL)
  SHOP @join__enumValue(graph: RQL)
  PRODUCT_FAMILY @join__enumValue(graph: RQL)
}

enum reverb_search_Distance_DistanceUnit @join__type(graph: RQL) @join__type(graph: SEARCH_REMIXER) {
  MI @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
}

enum reverb_search_GearCollectionItemsSearchRequest_Aggregation @join__type(graph: RQL) {
  CATEGORY_UUIDS @join__enumValue(graph: RQL)
  TAGS @join__enumValue(graph: RQL)
}

enum reverb_search_LPListingsSearchRequest_Condition @join__type(graph: RQL) {
  NONE @join__enumValue(graph: RQL)
  NEW @join__enumValue(graph: RQL)
  USED @join__enumValue(graph: RQL)
}

enum reverb_search_LPReleasesSearchRequest_Aggregation @join__type(graph: RQL) {
  COUNTRIES @join__enumValue(graph: RQL)
  FORMATS @join__enumValue(graph: RQL)
  INVENTORY @join__enumValue(graph: RQL)
}

enum reverb_search_LPTransactionsSearchRequest_ActionableStatus @join__type(graph: RQL) {
  AWAITING_PICKUP @join__enumValue(graph: RQL)
  AWAITING_SHIPMENT @join__enumValue(graph: RQL)
  CANCELLED @join__enumValue(graph: RQL)
  LAYAWAY @join__enumValue(graph: RQL)
  LAYAWAY_FORFEITED @join__enumValue(graph: RQL)
  PAYMENT_PENDING @join__enumValue(graph: RQL)
  PICKED_UP @join__enumValue(graph: RQL)
  PREORDER @join__enumValue(graph: RQL)
  RECEIVED @join__enumValue(graph: RQL)
  REFUNDED @join__enumValue(graph: RQL)
  REFUND_APPROVED @join__enumValue(graph: RQL)
  REFUND_REQUESTED @join__enumValue(graph: RQL)
  SHIPPED @join__enumValue(graph: RQL)
  UNPAID @join__enumValue(graph: RQL)
}

enum reverb_search_LPTransactionsSearchRequest_Aggregation @join__type(graph: RQL) {
  ACTIONABLE_STATUSES @join__enumValue(graph: RQL)
  PRICE_PERCENTILES @join__enumValue(graph: RQL)
  PRICE_PERCENTILES_BY_MEDIA_CONDITION @join__enumValue(graph: RQL)
}

enum reverb_search_ListingsSearchRequest_Sort @join__type(graph: RQL) @join__type(graph: SEARCH_REMIXER) {
  NONE @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  PUBLISHED_AT_ASC @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  PUBLISHED_AT_DESC @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  PRICE_ASC @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  PRICE_DESC @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  BUMPED_FIRST @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  CURATED @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  CURATED_DATE_ADDED @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  LQS_DESCENDING @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER) @deprecated
  RANDOM @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  WATCHERS_COUNT_ASC @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  WATCHERS_COUNT_DESC @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  FILTERED_IDS @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  PRICING_SCORE @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER) @deprecated
  PRICE_IN_COUNTRY @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  """not an actual sort, used as pivot point in RQL"""
  BUMP_SCORE @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  EXPERIMENTAL_BUMP_RANKING @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER) @deprecated
  PROXIMITY_ASC @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  RETURN_WINDOW @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  RETURN_WINDOW_PRICE_DESC @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER) @deprecated
  PRICE_VALUE_SCORE_ASC @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  LIKELIHOOD_TO_SELL @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  PRICE_WITH_SALE_ASC @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  PRICE_WITH_SALE_DESC @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  CREATED_AT_ASC @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  CREATED_AT_DESC @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  RECENT_WATCHERS_COUNT_DESC @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
}

enum reverb_search_ListingsSearchRequest_Collapsible @join__type(graph: RQL) @join__type(graph: SEARCH_REMIXER) {
  COLLAPSIBLE_NONE @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  CSP_NEW_CONDITION @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  CSP_NEW_CONDITION_SINGLE_FINISH @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  CANONICAL_PRODUCT_ID @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
}

enum reverb_search_ListingsSearchRequest_PriceValue @join__type(graph: RQL) @join__type(graph: SEARCH_REMIXER) {
  PRICE_VALUE_NONE @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  GOOD @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  GREAT @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
}

enum reverb_search_TrackTotalHits @join__type(graph: RQL) @join__type(graph: SEARCH_REMIXER) {
  EXACT @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  NONE @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
  FUZZ @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
}

enum reverb_search_ListingsSearchRequest_MyShopAggregation @join__type(graph: RQL) @join__type(graph: SEARCH_REMIXER) {
  STATES @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
}

enum reverb_search_Location_LocationType @join__type(graph: RQL) @join__type(graph: SEARCH_REMIXER) {
  POSTAL_CODE @join__enumValue(graph: RQL) @join__enumValue(graph: SEARCH_REMIXER)
}

enum reverb_search_UserStatus @join__type(graph: RQL) {
  NOT_SET @join__enumValue(graph: RQL)
  IN_GOOD_STANDING @join__enumValue(graph: RQL)
  SUSPENDED @join__enumValue(graph: RQL)
  UNDER_REVIEW @join__enumValue(graph: RQL)
  SUSPENDED_OUTSTANDING_INVOICE @join__enumValue(graph: RQL)
  REQUIRES_EMAIL_VERIFICATION @join__enumValue(graph: RQL)
  LOCKED_VACATION_MODE @join__enumValue(graph: RQL)
}

enum reverb_search_NegotiationSearchRequest_State @join__type(graph: RQL) {
  ACTIVE @join__enumValue(graph: RQL)
  ACCEPTED @join__enumValue(graph: RQL)
  REJECTED @join__enumValue(graph: RQL)
  EXPIRED @join__enumValue(graph: RQL)
}

enum reverb_search_NegotiationSearchRequest_Type @join__type(graph: RQL) {
  AUTO_PUSH_OFFER @join__enumValue(graph: RQL)
  EMAIL @join__enumValue(graph: RQL)
  STANDARD @join__enumValue(graph: RQL)
}

enum reverb_search_NegotiationSearchRequest_Aggregation @join__type(graph: RQL) {
  STATES @join__enumValue(graph: RQL)
  CHANNELS @join__enumValue(graph: RQL)
  SELLER_CHANNELS @join__enumValue(graph: RQL)
  ACTIVE_SELLER_ACTION_REQUIRED @join__enumValue(graph: RQL)
  NEGOTIATION_TYPES @join__enumValue(graph: RQL)
}

enum reverb_search_OrderSearchRequest_Aggregation @join__type(graph: RQL) {
  BRAND_SLUGS @join__enumValue(graph: RQL)
  CATEGORY_SLUGS @join__enumValue(graph: RQL)
  CONDITION_SLUGS @join__enumValue(graph: RQL)
  SHIPPING_METHODS @join__enumValue(graph: RQL)
  ACTIONABLE_STATUS_GROUPS @join__enumValue(graph: RQL)
}

enum reverb_search_PriceGuidesSearchRequest_Aggregation @join__type(graph: RQL) {
  BRAND_NAMES @join__enumValue(graph: RQL)
  CATEGORY_UUIDS @join__enumValue(graph: RQL)
  DECADES @join__enumValue(graph: RQL)
}

enum reverb_search_SearchResponse_TotalHits_Relation @join__type(graph: RQL) {
  EQ @join__enumValue(graph: RQL)
  GTE @join__enumValue(graph: RQL)
}

enum reverb_search_SuggestOptionScope_Type @join__type(graph: RQL) {
  NONE @join__enumValue(graph: RQL)
  PRODUCT_TYPE @join__enumValue(graph: RQL)
  BRAND @join__enumValue(graph: RQL)
}

enum reverb_updates_Entity_EntityType @join__type(graph: RQL) {
  """
  if you add a type to be used in My Updates, they must be added to dao/updates/updates.go
  """
  UNKNOWN @join__enumValue(graph: RQL)
  """used for my updates & homepage notifications"""
  PRICE_DROP_ON_WATCHED @join__enumValue(graph: RQL)
  """used for my updates & homepage notifications"""
  PRICE_DROP_ON_ITEM_IN_CART @join__enumValue(graph: RQL)
  SITE_BANNER @join__enumValue(graph: RQL)
  WATCHED_ITEM_SOLD @join__enumValue(graph: RQL)
  CATEGORY_AFFINITY @join__enumValue(graph: RQL)
  PREDICTED_TO_SELL_SOON @join__enumValue(graph: RQL)
  NEW_LISTINGS_FROM_FOLLOWED_SHOP @join__enumValue(graph: RQL)
  NEW_OFFER_ON_WATCHED_ITEM @join__enumValue(graph: RQL)
  NEW_SALE_FROM_FOLLOWED_SHOP @join__enumValue(graph: RQL)
  RECOMMENDED_LISTING @join__enumValue(graph: RQL)
  PROMOTION @join__enumValue(graph: RQL)
  """used for homepage notifications"""
  NEW_OFFER @join__enumValue(graph: RQL)
  """used for homepage notifications"""
  OFFER_ACCEPTED @join__enumValue(graph: RQL)
  """used for homepage notifications"""
  OFFER_COUNTERED @join__enumValue(graph: RQL)
  """used for homepage notifications"""
  WATCHER_ON_SALE @join__enumValue(graph: RQL)
}

enum reverb_updates_PruneMyUpdates_PruneType @join__type(graph: RQL) {
  UNKNOWN @join__enumValue(graph: RQL)
  USER @join__enumValue(graph: RQL)
  UPDATE @join__enumValue(graph: RQL)
}

enum reverb_updates_Update_Action @join__type(graph: RQL) {
  UNKNOWN @join__enumValue(graph: RQL)
  ADD @join__enumValue(graph: RQL)
  ADD_USERS @join__enumValue(graph: RQL)
}

enum rql_AddressSuggestion_Type @join__type(graph: RQL) {
  ADDRESS @join__enumValue(graph: RQL)
  CONTAINER @join__enumValue(graph: RQL)
}

enum rql_DiscoverEntryType @join__type(graph: RQL) {
  WATCH @join__enumValue(graph: RQL)
  ITEM_RECOMMENDATION @join__enumValue(graph: RQL)
  SAVED_SEARCH_FEED @join__enumValue(graph: RQL)
  CP_TO_LISTING_RECOMMENDATION @join__enumValue(graph: RQL)
  ARTICLE_RECOMMENDATION @join__enumValue(graph: RQL)
  SHOP_RECOMMENDATION @join__enumValue(graph: RQL)
  UPDATE @join__enumValue(graph: RQL)
  AD @join__enumValue(graph: RQL)
  VIDEO @join__enumValue(graph: RQL)
}

enum rql_DiscoverInclude @join__type(graph: RQL) {
  WATCHLIST @join__enumValue(graph: RQL)
  RECOMMENDATIONS @join__enumValue(graph: RQL)
  SAVED_SEARCHES @join__enumValue(graph: RQL)
  ARTICLES @join__enumValue(graph: RQL)
  SHOPS @join__enumValue(graph: RQL)
  UPDATES @join__enumValue(graph: RQL)
  VIDEOS @join__enumValue(graph: RQL)
}

enum rql_EmailSubscription_TranslationKey @join__type(graph: RQL) {
  DEALS_AND_STEALS @join__enumValue(graph: RQL)
  FEED @join__enumValue(graph: RQL)
  NEWSLETTER @join__enumValue(graph: RQL)
  SALE_ALERTS @join__enumValue(graph: RQL)
  SELLER_NEWSLETTER @join__enumValue(graph: RQL)
  SPECIAL_EVENTS @join__enumValue(graph: RQL)
  WATCH @join__enumValue(graph: RQL)
  OFFERS_AND_PROMOTIONS @join__enumValue(graph: RQL)
}

enum rql_FavoriteType @join__type(graph: RQL) {
  LISTING @join__enumValue(graph: RQL)
  SAVED_SEARCH @join__enumValue(graph: RQL)
  SHOP @join__enumValue(graph: RQL)
}

enum rql_FavoritesRequest_ListingState @join__type(graph: RQL) {
  ALL @join__enumValue(graph: RQL)
  LIVE @join__enumValue(graph: RQL)
  NOT_LIVE @join__enumValue(graph: RQL)
}

enum rql_FeedQuery_Channel @join__type(graph: RQL) {
  REVERB @join__enumValue(graph: RQL)
  LP @join__enumValue(graph: RQL)
}

enum rql_FollowsQuery_Channel @join__type(graph: RQL) {
  REVERB @join__enumValue(graph: RQL)
  LP @join__enumValue(graph: RQL)
}

enum rql_GearCollectionItemsSearchRequest_Party @join__type(graph: RQL) {
  OWNER @join__enumValue(graph: RQL)
}

enum rql_NodeError_ErrorType @join__type(graph: RQL) {
  UNKNOWN @join__enumValue(graph: RQL)
  NOT_FOUND @join__enumValue(graph: RQL)
}

enum rql_SubscribeState @join__type(graph: RQL) {
  UNSUBSCRIBED @join__enumValue(graph: RQL)
  SUBSCRIBED @join__enumValue(graph: RQL)
  OPTED_IN @join__enumValue(graph: RQL)
}

enum reverb_event_ArticleViewRelatedContent_RelatedContentType @join__type(graph: RQL) {
  ARTICLES @join__enumValue(graph: RQL)
}

enum reverb_event_CheckoutView_StepName @join__type(graph: RQL) {
  CART @join__enumValue(graph: RQL)
  SHIPPING_REGISTRATION @join__enumValue(graph: RQL)
  BILLING @join__enumValue(graph: RQL)
  PLACE_ORDER @join__enumValue(graph: RQL)
  CONFIRMATION @join__enumValue(graph: RQL)
  ASYNC_PAYMENT_IN_PROGRESS @join__enumValue(graph: RQL)
  ASYNC_PAYPAL_TOKEN_FETCH_IN_PROGRESS @join__enumValue(graph: RQL)
}

enum reverb_event_CollectionView @join__type(graph: RQL) {
  HYDRA @join__enumValue(graph: RQL)
  SALE @join__enumValue(graph: RQL)
  CURATED_SET @join__enumValue(graph: RQL)
  FEED @join__enumValue(graph: RQL)
  HOMEPAGE @join__enumValue(graph: RQL)
  PRICE_GUIDE @join__enumValue(graph: RQL)
  SEARCH @join__enumValue(graph: RQL)
}

enum reverb_event_ComponentInteraction_InteractionType @join__type(graph: RQL) {
  CLICK @join__enumValue(graph: RQL)
  HOVER @join__enumValue(graph: RQL)
  SWIPE @join__enumValue(graph: RQL)
  FORCE_TAP @join__enumValue(graph: RQL)
}

enum reverb_event_DeviceName @join__type(graph: RQL) {
  IOS @join__enumValue(graph: RQL)
  ANDROID @join__enumValue(graph: RQL)
  TOUCH @join__enumValue(graph: RQL)
  WEB @join__enumValue(graph: RQL)
}

enum reverb_event_GoogleClickOrigin @join__type(graph: RQL) {
  REVERB @join__enumValue(graph: RQL)
  SELLERSITES @join__enumValue(graph: RQL)
}

enum reverb_event_ListingStatus @join__type(graph: RQL) {
  DRAFT @join__enumValue(graph: RQL)
  LIVE @join__enumValue(graph: RQL)
  DRAFTS @join__enumValue(graph: RQL)
  SOLD_OUT @join__enumValue(graph: RQL)
  ORDERED @join__enumValue(graph: RQL)
  NOT_DRAFTS @join__enumValue(graph: RQL)
  SUSPENDED @join__enumValue(graph: RQL)
  VACATION @join__enumValue(graph: RQL)
  ENDED @join__enumValue(graph: RQL)
}

enum reverb_event_ListingsView_ViewType @join__type(graph: RQL) {
  SEARCHING @join__enumValue(graph: RQL)
  BROWSING @join__enumValue(graph: RQL)
  HOMEPAGE @join__enumValue(graph: RQL)
  BRAND @join__enumValue(graph: RQL)
  CURATED_SEARCH @join__enumValue(graph: RQL)
  SHOP @join__enumValue(graph: RQL)
  CURATED_SET @join__enumValue(graph: RQL)
}

enum reverb_event_MailerAction @join__type(graph: RQL) {
  SENT @join__enumValue(graph: RQL)
  OPENED @join__enumValue(graph: RQL)
}

enum reverb_event_NegotiationUpdated_Status @join__type(graph: RQL) {
  REJECTED @join__enumValue(graph: RQL)
  ACCEPTED @join__enumValue(graph: RQL)
  EXPIRED @join__enumValue(graph: RQL)
}

enum reverb_event_OrderUpdated_Status @join__type(graph: RQL) {
  UNPAID @join__enumValue(graph: RQL)
  PAYMENT_PENDING @join__enumValue(graph: RQL)
  PARTIALLY_PAID @join__enumValue(graph: RQL)
  PAID @join__enumValue(graph: RQL)
  SHIPPED @join__enumValue(graph: RQL)
  PICKED_UP @join__enumValue(graph: RQL)
  RECEIVED @join__enumValue(graph: RQL)
  PRESUMED_RECEIVED @join__enumValue(graph: RQL)
  CANCELLED @join__enumValue(graph: RQL)
  REFUNDED @join__enumValue(graph: RQL)
  LAYAWAY_FORFEITED @join__enumValue(graph: RQL)
}

enum reverb_event_UserUpdated_UserStatus @join__type(graph: RQL) {
  IN_GOOD_STANDING @join__enumValue(graph: RQL)
  UNDER_REVIEW @join__enumValue(graph: RQL)
  SUSPENDED @join__enumValue(graph: RQL)
  SUSPENDED_OUTSTANDING_INVOICE @join__enumValue(graph: RQL)
  LOCKED_VACATION_MODE @join__enumValue(graph: RQL)
}

enum rql_PublicComponentEntity_EntityType @join__type(graph: RQL) {
  LISTING @join__enumValue(graph: RQL)
  CSP @join__enumValue(graph: RQL)
}

enum Sort @join__type(graph: SEARCH_REMIXER) {
  BEST_MATCH @join__enumValue(graph: SEARCH_REMIXER)
  MOST_RECENT_FIRST @join__enumValue(graph: SEARCH_REMIXER)
  PRICE_HIGHEST_FIRST @join__enumValue(graph: SEARCH_REMIXER)
  PRICE_LOWEST_FIRST @join__enumValue(graph: SEARCH_REMIXER)
  PROXIMITY @join__enumValue(graph: SEARCH_REMIXER)
}

input AcceptTradeInInput @join__type(graph: COREQL) {
  conditionUuid: String!
  tradeInId: String!
}

input CreateTradeInInput @join__type(graph: COREQL) {
  canonicalProductId: String!
  shopId: String!
}

input Input_core_apimessages_AdPlacementRequest @join__type(graph: COREQL) @join__type(graph: RQL) {
  adTypes: [Input_core_apimessages_AdType]
  adZones: [Input_core_apimessages_AdZone]
}

input Input_core_apimessages_AdServeRequest @join__type(graph: COREQL) @join__type(graph: RQL) {
  includeDrafts: Boolean
  placements: [Input_core_apimessages_AdPlacementRequest]
  targeting: Input_core_apimessages_TargetingContext
  userContext: Input_core_apimessages_AdUserContext
}

input Input_core_apimessages_AdType @join__type(graph: COREQL) @join__type(graph: RQL) {
  format: core_apimessages_AdFormat
}

input Input_core_apimessages_AdUserContext @join__type(graph: COREQL) @join__type(graph: RQL) {
  mparticleProfileResponse: Input_core_apimessages_MparticleProfileResponse
}

input Input_core_apimessages_AdZone @join__type(graph: COREQL) @join__type(graph: RQL) {
  description: String
  name: String
  slug: String
  status: core_apimessages_AdZone_AdZoneStatus
  uuid: String
}

input Input_core_apimessages_BulkOrdersRequest_Query @join__type(graph: COREQL) @join__type(graph: RQL) {
  as: core_apimessages_BulkOrdersRequest_Party
  primaryKey: Input_core_apimessages_PrimaryKey
  relation: core_apimessages_BulkOrdersRequest_Relation
}

"""this is the encoded bump key sent as a response"""
input Input_core_apimessages_BumpKey @join__type(graph: COREQL) @join__type(graph: RQL) {
  key: String
}

"""Input type for feedback"""
input Input_core_apimessages_FeedbacksRequest @join__type(graph: COREQL) @join__type(graph: RQL) {
  limit: Int
  offset: Int
  type: core_apimessages_Feedback_Type
  userUuid: String
}

"""Input type for fetching images"""
input Input_core_apimessages_ImagesRequest @join__type(graph: COREQL) @join__type(graph: RQL) {
  count: Int
  """postgres id for corresponding table denoted by 'type'"""
  ids: [String]
  namedTransform: core_apimessages_NamedImageTransforms
  scope: String
  slugs: [String]
  transform: String
  type: String
  uuids: [String]
}

"""duplicate of the Mparticle ProfileResponse defined in rql"""
input Input_core_apimessages_MparticleProfileResponse @join__type(graph: COREQL) @join__type(graph: RQL) {
  averageOrderValue: Float
  brandCategories: [String]
  buyerFeedbackRating: Float
  buyerLabel: String
  cumulativeGmv: Float
  firstOrderDate: String
  mostRecentOrderDate: String
  mpid: String
  recentlyViewedCsps: [String]
  sellerFeedbackRating: Float
  sellerLabel: String
  topBrandCategories: [String]
  topBrands: [String]
  topCategories: [String]
  topCategoryUuids: [String]
  topMostRecentProductTypes: [String]
  topProductType: String
  topProductTypeUuids: [String]
  topProductTypes: [String]
  totalBuyerOffersAccepted: Int
  totalBuyerOffersCreated: Int
  totalFeedFollows: Int
  totalListingsCreated: Int
  totalListingsDraft: Int
  totalListingsLive: Int
  totalListingsSold: Int
  totalListingsSuspended: Int
  totalPurchases: Int
}

input Input_core_apimessages_MyAvailableActionsIndexRequest @join__type(graph: COREQL) @join__type(graph: RQL) {
  listingId: String
}

input Input_core_apimessages_MyBuyerCouponsRequest @join__type(graph: COREQL) @join__type(graph: RQL) {
  checkoutUuid: String
  context: core_apimessages_MyBuyerCouponsRequest_Context
  shopSlug: String
}

input Input_core_apimessages_NodeRequest_Lookup_Params_ListingsCertifiedPreOwned @join__type(graph: COREQL) @join__type(graph: RQL) {
  imageType: core_apimessages_IconImageType
}

input Input_core_apimessages_NodeRequest_Lookup_Params_ListingsPricings @join__type(graph: COREQL) @join__type(graph: RQL) {
  ribbonPercent: String
  ruleOfOneHundred: Boolean
}

input Input_core_apimessages_NodeRequest_Lookup_Params_ShippingRates @join__type(graph: COREQL) @join__type(graph: RQL) {
  inOriginalCurrency: Boolean
}

input Input_core_apimessages_NodeRequest_Lookup_Params_ShopsCertifiedPreOwned @join__type(graph: COREQL) @join__type(graph: RQL) {
  imageType: core_apimessages_IconImageType
}

input Input_core_apimessages_PrimaryKey @join__type(graph: COREQL) @join__type(graph: RQL) {
  type: core_apimessages_PrimaryKey_Type
  value: String
}

input Input_core_apimessages_ShippingPricesRequest @join__type(graph: COREQL) @join__type(graph: RQL) {
  listingIds: [String]
  postalCode: String
  returnAllShippingPrices: Boolean
  shippingRegionCode: String
  usePrimaryShippingAddress: Boolean
}

input Input_core_apimessages_ShopsRequest @join__type(graph: COREQL) @join__type(graph: RQL) {
  channel: core_apimessages_Channel
  slugs: [String]
  uuids: [String]
}

input Input_core_apimessages_TargetingContext @join__type(graph: COREQL) @join__type(graph: RQL) {
  categories: [String]
  keywords: [String]
}

input Input_core_apimessages_WatchesCreateRequest @join__type(graph: COREQL) @join__type(graph: RQL) {
  bumpKey: Input_core_apimessages_BumpKey
  channel: core_apimessages_Channel
  listingId: String
}

input Input_core_apimessages_WatchesDeleteRequest @join__type(graph: COREQL) @join__type(graph: RQL) {
  listingId: String
}

input Input_reverb_search_ProductReviewsSearchRequest @join__type(graph: COREQL) @join__type(graph: RQL) {
  canonicalProductIds: [String]
  comparisonShoppingPageIds: [String]
  fullTextQuery: String
  ids: [String]
  limit: Int
  offset: Int
  ratings: [reverb_search_ProductReviewsSearchRequest_Rating]
  sort: reverb_search_ProductReviewsSearchRequest_Sort
  verified: Boolean
  withAggregations: [reverb_search_ProductReviewsSearchRequest_Aggregation]
}

input Input_reverb_search_SimilarListingsSearchRequest @join__type(graph: COREQL) @join__type(graph: RQL) {
  includeForLiveListings: Boolean
  itemRegion: String
  itemRegionRelation: reverb_search_ListingItemRegionRelation
  likelihoodToSellExperimentGroup: Int
  limit: Int
  listingId: String
  offset: Int
  outlet: Boolean
  shippingRegionCodes: [String]
  useFallback: Boolean
}

input Input_reverb_signals_SignalRequest @join__type(graph: COREQL) @join__type(graph: RQL) {
  groups: [reverb_signals_Signal_Group]
  imageType: reverb_signals_SignalImageType
}

"""Input type for bulk fetching objects by ID/UUID/slug"""
input Input_rql_CollectionQuery @join__type(graph: COREQL) @join__type(graph: RQL) {
  ids: [String]
  slugs: [String]
  uuids: [String]
}

"""Input type for fetching listing price recommendations"""
input Input_rql_ListingPriceRecommendationRequest @join__type(graph: COREQL) @join__type(graph: RQL) {
  countryCode: String
  currency: String
}

input Input_rql_NegotiationQuery @join__type(graph: COREQL) @join__type(graph: RQL) {
  as: rql_NegotiationQuery_Party
  fullTextQuery: String
  ids: [String]
  limit: Int
  listingIds: [String]
  offset: Int
  sort: String
  state: rql_NegotiationQuery_State
}

"""Input type for fetching objects by ID/UUID/slug"""
input Input_rql_NodeQuery @join__type(graph: COREQL) @join__type(graph: RQL) {
  id: String
  slug: String
  uuid: String
}

input RejectTradeInInput @join__type(graph: COREQL) {
  rejectionMessage: String
  rejectionReason: TradeInRejectionReason!
  tradeInId: String!
}

input TradeInEligibilityInput @join__type(graph: COREQL) {
  canonicalProductId: String
  cspId: String
}

input Input_arbiter_APIError @join__type(graph: RQL) {
  message: String
}

input Input_arbiter_APIErrorResponse @join__type(graph: RQL) {
  errors: [Input_arbiter_APIError]
}

input Input_arbiter_BulkBumpInteractionCountsRequest @join__type(graph: RQL) {
  requests: [Input_arbiter_BumpInteractionCountsRequest]
}

input Input_arbiter_BulkBumpInteractionCountsResponse @join__type(graph: RQL) {
  responses: [Input_arbiter_BumpInteractionCountsResponse]
}

input Input_arbiter_BulkFeaturedListingRequest @join__type(graph: RQL) {
  requests: [Input_arbiter_FeaturedListingRequest]
}

input Input_arbiter_BulkFeaturedListingResponse @join__type(graph: RQL) {
  responses: [Input_arbiter_FeaturedListingResponse]
}

input Input_arbiter_BulkTrackImpressionsRequest @join__type(graph: RQL) {
  listingIds: [String]
}

input Input_arbiter_BulkTrackImpressionsResponse @join__type(graph: RQL) {
  listingIds: [String]
}

input Input_arbiter_BumpInteractionCountsRequest @join__type(graph: RQL) {
  sellerId: String
  listingId: String
}

input Input_arbiter_BumpInteractionCountsResponse @join__type(graph: RQL) {
  listingId: String
  click: Int
  addToWatchlist: Int
  addToCart: Int
  makeAnOffer: Int
  total: Int
  messageSeller: Int
}

input Input_arbiter_BumpedSortedListingResponseListing @join__type(graph: RQL) {
  productId: String
  bumped: Boolean
  rank: Float
  bid: Float
  qualityScore: Float
  discountPercent: Int
}

input Input_arbiter_BumpedSortedListingsRequest @join__type(graph: RQL) {
  userShippingRegion: String
  listingIds: [String]
  condition: String
  total: Int
  bumpedMax: Int
  itemRegion: String
  auctionType: arbiter_AuctionType
}

input Input_arbiter_BumpedSortedListingsResponse @join__type(graph: RQL) {
  products: [Input_arbiter_BumpedSortedListingResponseListing]
  resultIds: [String]
}

input Input_arbiter_CreateInteractionRequest @join__type(graph: RQL) {
  interaction: Input_arbiter_Interaction
}

input Input_arbiter_FeaturedListingRequest @join__type(graph: RQL) {
  cspSlug: String
  canonicalFinish: String
  userShippingRegion: String
  cspId: String
  traitValues: [String]
  categoryUuids: [String]
  deterministic: Boolean
  itemRegion: String
  conditionUuids: [String]
  auctionType: arbiter_AuctionType
  userCurrency: String
  listingIds: [String]
  includeListingsOutsideLowestPriceWindow: Boolean
  isUserInCspOptimizationExp: Boolean
  applyProximityBoost: Boolean
}

input Input_arbiter_FeaturedListingResponse @join__type(graph: RQL) {
  productId: String
  bumped: Boolean
  rank: Float
  bid: Float
  qualityScore: Float
  runnerUp: Input_arbiter_FeaturedListingResponse
}

input Input_arbiter_FindInteractionRequest @join__type(graph: RQL) {
  productId: String
  userId: String
  cookieId: String
  orderedAt: Timestamp
}

input Input_arbiter_FindInteractionResponse @join__type(graph: RQL) {
  interaction: Input_arbiter_Interaction
}

input Input_arbiter_Interaction @join__type(graph: RQL) {
  uuid: String
  userId: String
  sessionId: String
  cookieId: String
  productId: String
  bumpRate: String
  referrerUrl: String
  sellerId: String
  componentName: String
  position: Int
  issuedAt: Timestamp
  createdAt: Timestamp
  interactionType: arbiter_Interaction_InteractionType
  offsiteSource: String
  currentUrl: String
  userExperimentsJson: String
  userDeviceName: String
}

input Input_arbiter_InteractionTimeSeriesMetric @join__type(graph: RQL) {
  date: String
  click: Int
  addToWatchlist: Int
  addToCart: Int
  makeAnOffer: Int
  total: Int
  messageSeller: Int
}

input Input_arbiter_Listing @join__type(graph: RQL) {
  id: String
}

input Input_arbiter_SellerInteractionTimeSeriesRequest @join__type(graph: RQL) {
  sellerId: String
  startDate: String
  endDate: String
}

input Input_arbiter_SellerInteractionTimeSeriesResponse @join__type(graph: RQL) {
  data: [Input_arbiter_InteractionTimeSeriesMetric]
  click: Int
  addToWatchlist: Int
  addToCart: Int
  makeAnOffer: Int
  total: Int
  messageSeller: Int
}

input Input_braze_BrazeUser @join__type(graph: RQL) {
  externalId: String
  email: String
  pushSubscribe: String
  emailSubscribe: String
}

input Input_braze_GetSubscriptionGroupsRequest @join__type(graph: RQL) {
  externalId: [String]
  email: [String]
}

input Input_braze_GetSubscriptionGroupsResponse @join__type(graph: RQL) {
  users: [Input_braze_SubscriptionUser]
  totalCount: Int
  message: String
}

input Input_braze_GetUserDataRequest @join__type(graph: RQL) {
  externalIds: [String]
  fieldsToExport: [String]
}

input Input_braze_GetUserDataResponse @join__type(graph: RQL) {
  message: String
  users: [Input_braze_BrazeUser]
  invalidUserIds: [String]
}

input Input_braze_OptInRecipient @join__type(graph: RQL) {
  externalUserId: String
}

input Input_braze_SetSubscriptionGroupsRequest @join__type(graph: RQL) {
  subscriptionGroupId: String
  subscriptionState: String
  externalId: String
  email: String
}

input Input_braze_SetSubscriptionGroupsResponse @join__type(graph: RQL) {
  message: String
}

input Input_braze_SubscriptionGroupConfig @join__type(graph: RQL) {
  id: String
  name: String
  channel: String
  status: String
}

input Input_braze_SubscriptionUser @join__type(graph: RQL) {
  email: String
  phone: String
  externalId: String
  subscriptionGroups: [Input_braze_SubscriptionGroupConfig]
}

input Input_braze_TriggerCampaignSendRequest @join__type(graph: RQL) {
  campaignId: String
  recipients: [Input_braze_OptInRecipient]
}

input Input_braze_TriggerCampaignSendResponse @join__type(graph: RQL) {
  dispatchId: String
  message: String
}

input Input_braze_UserAttributes @join__type(graph: RQL) {
  externalId: String
  brazeId: String
  UpdateExistingOnly: Boolean
  emailSubscribe: String
  pushSubscribe: String
}

input Input_braze_UserTrackRequest @join__type(graph: RQL) {
  attributes: [Input_braze_UserAttributes]
}

input Input_braze_UserTrackResponse @join__type(graph: RQL) {
  message: String
}

input Input_cms_AdminClonePageRequest @join__type(graph: RQL) {
  slug: String
}

input Input_cms_AdminClonePageResponse @join__type(graph: RQL) {
  clonedPageSlug: String
}

input Input_cms_AdminComponentsResponse @join__type(graph: RQL) {
  components: [Input_cms_Component]
}

input Input_cms_AdminCreatePage @join__type(graph: RQL) {
  id: String
  goLiveAt: String
  imageAttributionUri: String
  authorId: String
  pageType: String
  imageKey: String
  slug: String
  channels: [String]
  componentIds: [String]
  localizedContents: [Input_cms_PageLocalizedContent]
  layoutId: String
  metaImageKey: String
  headerStyle: String
  noIndex: Boolean
  secondaryImageKey: String
  pageTemplateId: String
  darkModeReady: Boolean
}

input Input_cms_AdminCreatePageTemplate @join__type(graph: RQL) {
  id: String
  name: String
  layoutId: String
  customVariables: [String]
}

input Input_cms_AdminCreatePageTemplateRequest @join__type(graph: RQL) {
  pageTemplate: Input_cms_AdminCreatePageTemplate
}

input Input_cms_AdminDeletePageRequest @join__type(graph: RQL) {
  id: String
}

input Input_cms_AdminPageCreateRequest @join__type(graph: RQL) {
  page: Input_cms_AdminCreatePage
}

input Input_cms_AdminPageIndexRequest @join__type(graph: RQL) {
  page: String
  perPage: String
  q: String
  ids: [String]
  pageType: String
  channels: [String]
}

input Input_cms_AdminPageTemplateIndexRequest @join__type(graph: RQL) {
  page: String
  perPage: String
  q: String
  ids: [String]
}

input Input_cms_AdminPagesResponse @join__type(graph: RQL) {
  pages: [Input_cms_Page]
  meta: Input_cms_Pagination
}

input Input_cms_AdminTakeSlugRequest @join__type(graph: RQL) {
  currentSlug: String
  desiredSlug: String
}

input Input_cms_AdminTakeSlugResponse @join__type(graph: RQL) {
  updatedSlug: String
  legacySlug: String
}

input Input_cms_Author @join__type(graph: RQL) {
  id: String
  slug: String
  name: String
}

input Input_cms_AuthorIndexResponse @join__type(graph: RQL) {
  authors: [Input_cms_Author]
}

input Input_cms_AuthorRequest @join__type(graph: RQL) {
  author: Input_cms_Author
}

input Input_cms_AuthorResponse @join__type(graph: RQL) {
  author: Input_cms_Author
}

input Input_cms_BulkComponentRequest @join__type(graph: RQL) {
  components: [Input_cms_Component]
}

input Input_cms_BulkComponentResponse @join__type(graph: RQL) {
  components: [Input_cms_Component]
}

input Input_cms_BulkPagination @join__type(graph: RQL) {
  total: Int
  offset: Int
  limit: Int
}

input Input_cms_Component @join__type(graph: RQL) {
  id: String
  pageId: String
  position: Int
  componentType: String
  localizedContents: [Input_cms_ComponentLocalizedContent]
  layoutSection: String
  targetCountries: [String]
  blacklistCountries: [String]
  active: Boolean
  experimentKey: String
  """'default' or 'experiment'"""
  experimentBucket: String
  type: String
  pageTemplateId: String
}

input Input_cms_ComponentDeleteRequest @join__type(graph: RQL) {
  id: String
}

input Input_cms_ComponentLocalizedContent @join__type(graph: RQL) {
  locale: String
  data: String
}

input Input_cms_ComponentRequest @join__type(graph: RQL) {
  component: Input_cms_Component
}

input Input_cms_ComponentResponse @join__type(graph: RQL) {
  component: Input_cms_Component
}

input Input_cms_ComponentTemplatesRequest @join__type(graph: RQL) {
  pageTemplateId: String
  layoutSection: String
}

input Input_cms_ComponentsRequest @join__type(graph: RQL) {
  ids: [String]
  layoutSection: String
  pageId: String
}

input Input_cms_Layout @join__type(graph: RQL) {
  id: String
  name: String
  sections: [String]
}

input Input_cms_LayoutsIndexRequest @join__type(graph: RQL) {
  ids: [String]
  q: String
}

input Input_cms_LayoutsResponse @join__type(graph: RQL) {
  layouts: [Input_cms_Layout]
}

input Input_cms_NodeRequest @join__type(graph: RQL) {
  lookups: [Input_cms_NodeRequest_Lookup]
}

input Input_cms_NodeRequest_Lookup @join__type(graph: RQL) {
  lid: String
  rel: String
}

input Input_cms_NodeResponse @join__type(graph: RQL) {
  results: [Input_cms_NodeResponse_Result]
}

input Input_cms_NodeResponse_Result @join__type(graph: RQL) {
  lookup: Input_cms_NodeRequest_Lookup
  meta: Input_cms_NodeResponse_Result_Meta
  publicComponents: [Input_cms_PublicComponent]
}

input Input_cms_NodeResponse_Result_Meta @join__type(graph: RQL) {
  total: Int
}

input Input_cms_Page @join__type(graph: RQL) {
  id: String
  slug: String
  goLiveAt: String
  componentIds: [String]
  imageAttributionUri: String
  imageKey: String
  authorId: String
  pageType: String
  channels: [String]
  localizedContents: [Input_cms_PageLocalizedContent]
  layoutId: String
  metaImageKey: String
  headerStyle: String
  noIndex: Boolean
  secondaryImageKey: String
  pageTemplateId: String
  darkModeReady: Boolean
}

input Input_cms_PageImage @join__type(graph: RQL) {
  imageUrl: String
}

input Input_cms_PageLocalizedContent @join__type(graph: RQL) {
  locale: String
  title: String
  description: String
  metaTitle: String
  metaDescription: String
  actionText: String
  actionUrl: String
  searchPlaceholder: String
  customVariableData: String
  breadcrumbs: String
}

input Input_cms_PageRequest @join__type(graph: RQL) {
  page: Input_cms_PublicPage
}

input Input_cms_PageResponse @join__type(graph: RQL) {
  page: Input_cms_Page
}

input Input_cms_PageTemplate @join__type(graph: RQL) {
  id: String
  name: String
  layoutId: String
  customVariables: [String]
}

input Input_cms_PageTemplateIndexResponse @join__type(graph: RQL) {
  pageTemplates: [Input_cms_PageTemplate]
  meta: Input_cms_Pagination
}

input Input_cms_PageTemplatePageInfo @join__type(graph: RQL) {
  pageTemplateId: String
  pageCount: Int
  pageTitles: [String]
}

input Input_cms_PageTemplatePageInfoResponse @join__type(graph: RQL) {
  pageTemplatePageInfo: [Input_cms_PageTemplatePageInfo]
}

input Input_cms_PageTemplateResponse @join__type(graph: RQL) {
  pageTemplate: Input_cms_PageTemplate
}

input Input_cms_PagesRequest @join__type(graph: RQL) {
  ids: [String]
  slugs: [String]
  includeDrafts: String
  pageType: String
  limit: String
  offset: String
  channels: [String]
  excludeBlacklistedEmbeds: Boolean
  pageTypes: [String]
  query: String
}

input Input_cms_PagesResponse @join__type(graph: RQL) {
  pages: [Input_cms_PublicPage]
  meta: Input_cms_BulkPagination
}

input Input_cms_Pagination @join__type(graph: RQL) {
  total: Int
  currentPage: Int
  perPage: Int
}

input Input_cms_PublicComponent @join__type(graph: RQL) {
  id: String
  pageId: String
  position: Int
  componentType: String
  data: String
  layoutSection: String
  active: Boolean
  """cms_recently_viewed  cms_used_first"""
  experimentKey: String
  """'default' or 'experiment'"""
  experimentBucket: String
  title: String
  subtitle: String
  searchUrlParams: String
  searchSort: String
  searchType: cms_PublicComponent_SearchType
}

input Input_cms_PublicPage @join__type(graph: RQL) {
  id: String
  slug: String
  goLiveAt: String
  title: String
  description: String
  metaTitle: String
  metaDescription: String
  componentIds: [String]
  imageAttributionUri: String
  image: Input_cms_PageImage
  authorId: String
  pageType: String
  authorName: String
  albumIds: [String]
  channels: [String]
  locale: String
  layoutId: String
  layoutSlug: String
  metaImage: Input_cms_PageImage
  headerStyle: String
  actionText: String
  actionUrl: String
  searchPlaceholder: String
  noIndex: Boolean
  secondaryImage: Input_cms_PageImage
  live: Boolean
  """
  Flag used to thread to the frontend to indicate a cms slug was not found and we should render the not found page.
  """
  pageNotFound: Boolean
  targetLocales: [String]
  breadcrumbs: String
  darkModeReady: Boolean
}

input Input_core_apimessages_AcceptAddressSuggestionRequest @join__type(graph: RQL) {
  suggestionId: String
}

input Input_core_apimessages_AcceptAddressSuggestionResponse @join__type(graph: RQL) {
  """address uuid"""
  id: String
}

input Input_core_apimessages_AcceptedPaymentMethodsRequest @join__type(graph: RQL) {
  """either shops.uuid or products.id"""
  ids: [String]
  type: core_apimessages_AcceptedPaymentMethodsRequest_PaymentMethodsType
}

input Input_core_apimessages_AcceptedPaymentMethodsResponse @join__type(graph: RQL) {
  paymentMethods: [Input_core_apimessages_PaymentMethods]
}

input Input_core_apimessages_AccertifyDeviceInfo @join__type(graph: RQL) {
  transactionId: String
  ubaId: String
  ubaEvents: String
  pageId: String
  ubaSessionId: String
}

input Input_core_apimessages_AccountAlertsResponse @join__type(graph: RQL) {
  alerts: [Input_core_apimessages_Alert]
}

input Input_core_apimessages_ActionSourceAttributes @join__type(graph: RQL) {
  device: String
}

input Input_core_apimessages_Ad @join__type(graph: RQL) {
  id: Int
  campaignId: Int
  format: core_apimessages_AdFormat
  imageAdCreative: Input_core_apimessages_ImageAdCreative
  uuid: String
  adGroupUuid: String
  adCampaignUuid: String
  advertiserUuid: String
  localizedContents: [Input_core_apimessages_AdLocalizedContent]
  deletedAt: Timestamp
  adGroupName: String
}

input Input_core_apimessages_AdCampaign @join__type(graph: RQL) {
  uuid: String
  name: String
  description: String
  status: core_apimessages_AdCampaign_AdStatus
  startsAt: Timestamp
  endsAt: Timestamp
  advertiserUuid: String
}

input Input_core_apimessages_AdCampaignsSearchRequest @join__type(graph: RQL) {
  offset: Int
  limit: Int
  status: core_apimessages_AdCampaignsSearchRequest_Status
  withinDate: String
  advertiserUuids: [String]
  adZoneSlugs: [String]
}

input Input_core_apimessages_AdCampaignsSearchResponse @join__type(graph: RQL) {
  resultUuids: [String]
  offset: Int
  limit: Int
  total: Int
}

input Input_core_apimessages_AdGroup @join__type(graph: RQL) {
  uuid: String
  name: String
  description: String
  status: core_apimessages_AdGroup_AdStatus
  adCampaignUuid: String
  targetedCountryCodes: [String]
  targetedCategoryUuids: [String]
  targetedAdZoneSlugs: [String]
  targetedAdZones: [Input_core_apimessages_AdGroupZone]
  targetedDevices: [String]
  targetedBrandSlugs: [String]
}

input Input_core_apimessages_AdGroupKeyword @join__type(graph: RQL) {
  id: String
  keyword: String
}

input Input_core_apimessages_AdGroupZone @join__type(graph: RQL) {
  adGroup: Input_core_apimessages_AdGroup
  adZone: Input_core_apimessages_AdZone
  startsAt: Timestamp
  endsAt: Timestamp
}

input Input_core_apimessages_AdGroupsSearchRequest @join__type(graph: RQL) {
  offset: Int
  limit: Int
  adCampaignUuids: [String]
}

input Input_core_apimessages_AdGroupsSearchResponse @join__type(graph: RQL) {
  resultUuids: [String]
  offset: Int
  limit: Int
  total: Int
}

input Input_core_apimessages_AdLocalizedContent @join__type(graph: RQL) {
  locale: String
  imageAdCreative: Input_core_apimessages_ImageAdCreative
}

input Input_core_apimessages_AdPlacement @join__type(graph: RQL) {
  format: core_apimessages_AdFormat
}

input Input_core_apimessages_AdPlacementResponse @join__type(graph: RQL) {
  ad: Input_core_apimessages_Ad
  adZones: [Input_core_apimessages_AdZone]
  candidates: [Input_core_apimessages_Candidate]
}

input Input_core_apimessages_AdServeResponse @join__type(graph: RQL) {
  ad: Input_core_apimessages_Ad
  placements: [Input_core_apimessages_AdPlacementResponse]
}

input Input_core_apimessages_AdZonesSearchRequest @join__type(graph: RQL) {
  offset: Int
  limit: Int
}

input Input_core_apimessages_AdZonesSearchResponse @join__type(graph: RQL) {
  resultUuids: [String]
}

input Input_core_apimessages_AdaChatTokenResponse @join__type(graph: RQL) {
  token: String
}

"""For API response"""
input Input_core_apimessages_Address @join__type(graph: RQL) {
  name: String
  streetAddress: String
  extendedAddress: String
  postalCode: String
  phone: String
  region: String
  locality: String
  countryCode: String
  displayLocation: String
  """addresses.uuid. deprecated, use uuid"""
  id: String
  primary: Boolean
  """addresses.id"""
  legacyId: String
  uuid: String
  addressPresent: Boolean
  email: String
  country: Input_core_apimessages_Country
  """
  Localized based on region field. Example: a region code of CA in the US will have a name of "California."
  """
  regionName: String
  """True if the address has all required fields."""
  isComplete: Boolean
  """True if primary address fields match address details in Loqate"""
  verified: Boolean
}

input Input_core_apimessages_AddressDeleteRequest @join__type(graph: RQL) {
  """deprecated, use uuid"""
  id: String
  uuid: String
  addressType: core_apimessages_MyAddressType
}

"""For POST/PUT API requests"""
input Input_core_apimessages_AddressEntry @join__type(graph: RQL) {
  name: String
  streetAddress: String
  extendedAddress: String
  postalCode: String
  phone: String
  region: String
  locality: String
  countryCode: String
  email: String
}

input Input_core_apimessages_AddressVerifyRequest @join__type(graph: RQL) {
  """address uuid"""
  id: String
}

input Input_core_apimessages_AddressVerifyResponse @join__type(graph: RQL) {
  """The verified address, null if no suggestion is found."""
  suggestion: Input_core_apimessages_Address
  address: Input_core_apimessages_Address
}

input Input_core_apimessages_AdminBlockProductReviewRequest @join__type(graph: RQL) {
  productReviewId: String
}

input Input_core_apimessages_AdminBlockProductReviewResponse @join__type(graph: RQL) {
  """Blocked Product Review ID"""
  id: String
}

input Input_core_apimessages_AdminCuratedSetsCurateRequest @join__type(graph: RQL) {
  curatedSetSlug: String
  listingId: String
  featuredInSet: Boolean
}

input Input_core_apimessages_AdminCuratedSetsCurateResponse @join__type(graph: RQL) {
  curatedSetSlug: String
  listingId: String
  featuredInSet: Boolean
}

input Input_core_apimessages_AdminNote @join__type(graph: RQL) {
  id: String
  body: String
  linkHtml: String
  createdByName: String
  createdAt: Timestamp
  isPinned: Boolean
  userCanEdit: Boolean
  updatedAt: Timestamp
  lastEditedByName: String
  versions: [Input_core_apimessages_AdminNoteVersion]
}

input Input_core_apimessages_AdminNoteCreateRequest @join__type(graph: RQL) {
  notableType: String
  notableId: String
  body: String
  pinned: Boolean
}

input Input_core_apimessages_AdminNoteUpdateRequest @join__type(graph: RQL) {
  id: String
  body: String
  pinned: Boolean
}

input Input_core_apimessages_AdminNoteVersion @join__type(graph: RQL) {
  id: String
  editedAt: Timestamp
  editedByName: String
  body: String
}

input Input_core_apimessages_AdminNotesSearchRequest @join__type(graph: RQL) {
  bodyText: String
  notableId: String
  notableType: String
  offset: String
  limit: String
  sortOrder: String
  linkableId: String
  linkableType: String
  ignorePinned: Boolean
}

input Input_core_apimessages_AdminNotesSearchResponse @join__type(graph: RQL) {
  totalResults: String
  offset: String
  limit: String
  adminNotes: [Input_core_apimessages_AdminNote]
}

input Input_core_apimessages_AdminTax1099kReportingThresholdCreateRequest @join__type(graph: RQL) {
  year: String
  region: String
  salesAmountCents: String
  transactionCount: String
}

input Input_core_apimessages_AdminTax1099kReportingThresholdCreateResponse @join__type(graph: RQL) {
  id: String
  year: String
  region: String
  salesAmountCents: String
  transactionCount: String
}

input Input_core_apimessages_AdminTax1099kReportingThresholdDeleteRequest @join__type(graph: RQL) {
  id: String
}

input Input_core_apimessages_AdminTax1099kReportingThresholdDeleteResponse @join__type(graph: RQL) {
  id: String
}

input Input_core_apimessages_AdminTax1099kReportingThresholdSearchRequest @join__type(graph: RQL) {
  year: String
  region: String
  offset: String
  limit: String
}

input Input_core_apimessages_AdminTax1099kReportingThresholdSearchResponse @join__type(graph: RQL) {
  totalResults: String
  offset: String
  limit: String
  taxReportingThresholds: [Input_core_apimessages_Tax1099kReportingThresholdSearchResult]
}

input Input_core_apimessages_AdminTax1099kReportingThresholdUpdateRequest @join__type(graph: RQL) {
  id: String
  year: String
  region: String
  salesAmountCents: String
  transactionCount: String
}

input Input_core_apimessages_AdminTax1099kReportingThresholdUpdateResponse @join__type(graph: RQL) {
  id: String
  year: String
  region: String
  salesAmountCents: String
  transactionCount: String
}

input Input_core_apimessages_AdminUserDatadogErrorsSearchRequest @join__type(graph: RQL) {
  userId: String
}

input Input_core_apimessages_AdminUserDatadogErrorsSearchResponse @join__type(graph: RQL) {
  datadogErrors: [Input_core_apimessages_DatadogError]
}

input Input_core_apimessages_AdminUserSearchRequest @join__type(graph: RQL) {
  search: String
  activated: core_apimessages_AdminUserSearchRequest_ActivatedFilter
  userFilter: String
  page: String
  perPage: String
}

input Input_core_apimessages_AdminUserSearchResponse @join__type(graph: RQL) {
  totalResults: String
  page: String
  perPage: String
  users: [Input_core_apimessages_UserSearchResult]
}

input Input_core_apimessages_AdsSearchRequest @join__type(graph: RQL) {
  offset: Int
  limit: Int
  adGroupUuids: [String]
}

input Input_core_apimessages_AdsSearchResponse @join__type(graph: RQL) {
  resultUuids: [String]
  offset: Int
  limit: Int
  total: Int
}

input Input_core_apimessages_Advertiser @join__type(graph: RQL) {
  uuid: String
  name: String
  brandSlugs: [String]
  shopSlugs: [String]
}

input Input_core_apimessages_AdvertisersSearchRequest @join__type(graph: RQL) {
  offset: Int
  limit: Int
}

input Input_core_apimessages_AdvertisersSearchResponse @join__type(graph: RQL) {
  resultUuids: [String]
  offset: Int
  limit: Int
  total: Int
}

input Input_core_apimessages_AdyenBalanceOnboardingResponse @join__type(graph: RQL) {
  accountHolderId: String
  legalEntityId: String
  balanceAccountId: String
  transferInstrumentId: String
}

input Input_core_apimessages_AdyenBalancePlatformNotification @join__type(graph: RQL) {
  id: String
  createdAt: Timestamp
  rawBody: String
}

input Input_core_apimessages_AdyenChallengeShopperResults @join__type(graph: RQL) {
  threeds2ChallengeResult: String
  paymentData: String
}

input Input_core_apimessages_AdyenCheckoutPaymentMethods @join__type(graph: RQL) {
  """JSON-encoded Adyen response to parse client-side"""
  adyenCheckoutPaymentMethodsConfig: String
}

input Input_core_apimessages_AdyenCreditCardEntry @join__type(graph: RQL) {
  """
    JSON-encoded string for creating a new credit card, generated by secured fields (Adyen's new SDK).
  Each key is the name of an individual credit card field (ex: "encryptedExpiryYear"),
  and each value is an encrypted string. Core parses the JSON string, then passes the fully parsed
  object to Adyen without modifying any individual keys or values. Adyen decrypts each field when it reaches their server.
  """
  tokenizedFields: String
  """
    When creating a new credit card with adyen_tokenized_fields, for some
  reason Adyen does not have an "encryptedCardholderName" field so this
  needs to be passed separately as an unencrypted field.
  """
  cardholderName: String
}

input Input_core_apimessages_AdyenIdentifyShopperResults @join__type(graph: RQL) {
  threeds2FingerprintResult: String
  paymentData: String
}

input Input_core_apimessages_AdyenOnboardingLinkRequest @join__type(graph: RQL) {
  redirectUrl: String
}

input Input_core_apimessages_AdyenOnboardingLinkResponse @join__type(graph: RQL) {
  url: String
}

input Input_core_apimessages_AdyenPaymentResult @join__type(graph: RQL) {
  paymentStatus: core_apimessages_AdyenPaymentResult_PaymentStatus
  paymentData: String
  fingerprintToken: String
  challengeToken: String
  action: String
  threeDsOneRedirectUrl: String
  threeDsOneData: Input_core_apimessages_ThreeDSOneData
}

input Input_core_apimessages_AdyenThreeDSBillingMethodEntry @join__type(graph: RQL) {
  billingCardEntry: Input_core_apimessages_BillingCreditCardEntry
  paymentData: String
}

input Input_core_apimessages_AdyenVerifyShopperResults @join__type(graph: RQL) {
  threeds2Result: String
}

input Input_core_apimessages_AffirmFinancingPromotion @join__type(graph: RQL) {
  """affirm_financing_promotions.id"""
  id: String
  financingPlan: String
  startsAt: Input_core_apimessages_LegacyTimestamp
  endsAt: Input_core_apimessages_LegacyTimestamp
  availableTermMonths: [Int]
  maxTermMonth: Int
  zeroPercentFinancing: Boolean
  links: Input_core_apimessages_AffirmFinancingPromotionLinks
}

input Input_core_apimessages_AffirmFinancingPromotionLinks @join__type(graph: RQL) {
  curatedSet: Input_core_apimessages_Link
}

input Input_core_apimessages_AffirmFinancingPromotionsRequest @join__type(graph: RQL) {
  """products.id"""
  ids: [String]
}

input Input_core_apimessages_AffirmFinancingPromotionsResponse @join__type(graph: RQL) {
  affirmFinancingPromotions: [Input_core_apimessages_AffirmFinancingPromotion]
}

input Input_core_apimessages_Alert @join__type(graph: RQL) {
  title: String
  description: String
  url: String
}

input Input_core_apimessages_ApplyCheckoutDiscountCodeRequest @join__type(graph: RQL) {
  """checkout UUID"""
  id: String
  discountCode: String
}

input Input_core_apimessages_ApplyCheckoutDiscountCodeResponse @join__type(graph: RQL) {
  """checkout UUID"""
  id: String
}

input Input_core_apimessages_Article @join__type(graph: RQL) {
  """articles.id"""
  id: String
  title: String
  webLink: Input_core_apimessages_Link
  articleCategories: [Input_core_apimessages_ArticleCategory]
  slug: String
}

input Input_core_apimessages_ArticleCategories @join__type(graph: RQL) {
  categories: [Input_core_apimessages_ArticleCategory]
}

input Input_core_apimessages_ArticleCategoriesResponse @join__type(graph: RQL) {
  articleCategories: Input_core_apimessages_ArticleCategories
}

input Input_core_apimessages_ArticleCategory @join__type(graph: RQL) {
  """categories.id"""
  id: String
  name: String
  slug: String
}

input Input_core_apimessages_ArticlesRequest @join__type(graph: RQL) {
  """articles.id"""
  ids: [String]
  slugs: [String]
}

input Input_core_apimessages_ArticlesResponse @join__type(graph: RQL) {
  articles: [Input_core_apimessages_Article]
}

input Input_core_apimessages_AutoOffer @join__type(graph: RQL) {
  id: String
  listingId: String
  message: String
  price: Input_core_apimessages_Money
  pushToExisting: Boolean
  percentage: Int
  instantOffersEnabled: Boolean
  shippingPriceOverride: Input_core_apimessages_Money
}

input Input_core_apimessages_AutoOffersRequest @join__type(graph: RQL) {
  listingIds: [String]
}

input Input_core_apimessages_AutoOffersResponse @join__type(graph: RQL) {
  autoOffers: [Input_core_apimessages_AutoOffer]
}

input Input_core_apimessages_AutomatchingCanonicalProduct @join__type(graph: RQL) {
  id: String
  model: String
  year: String
  finish: String
  upc: String
  brand: Input_core_apimessages_Brand
  primaryImage: Input_core_apimessages_Image
}

input Input_core_apimessages_AvailableAction @join__type(graph: RQL) {
  name: core_apimessages_UserActionName
  """Same value as name, but calling it id helps with frontend apollo cache"""
  id: core_apimessages_UserActionName
  status: core_apimessages_UserActionStatus
}

input Input_core_apimessages_AvailableForPickupSignal @join__type(graph: RQL) {
  translations: Input_core_apimessages_SignalTranslation
  isValid: Boolean
}

input Input_core_apimessages_AvailableNearbyForPickupSignal @join__type(graph: RQL) {
  translations: Input_core_apimessages_SignalTranslation
  isValid: Boolean
}

input Input_core_apimessages_BearerV2TokenRequest @join__type(graph: RQL) {
  client: core_apimessages_BearerV2TokenRequest_Client
}

input Input_core_apimessages_BearerV2TokenResponse @join__type(graph: RQL) {
  token: String
}

input Input_core_apimessages_BillingCreditCardEntry @join__type(graph: RQL) {
  """credit_cards.id for selecting an already created credit card"""
  creditCardId: String
  """
    string token for creating a new credit card, generated by Adyen's Client-Side Encryption.
  Adyen decrypts ths into an object containing key/value pairs of raw credit card fields.
  """
  adyenToken: String
  adyenCreditCard: Input_core_apimessages_AdyenCreditCardEntry
  address: Input_core_apimessages_AddressEntry
}

input Input_core_apimessages_BillingMethodChallengeShopperRequest @join__type(graph: RQL) {
  results: Input_core_apimessages_AdyenChallengeShopperResults
  billingMethodUuid: String
}

input Input_core_apimessages_BillingMethodChallengeShopperResponse @join__type(graph: RQL) {
  errors: [Input_core_apimessages_Error]
  creditCard: Input_core_apimessages_CreditCard
  adyenPaymentResult: Input_core_apimessages_AdyenPaymentResult
  billingMethodUuid: String
}

input Input_core_apimessages_BillingMethodIdentifyShopperRequest @join__type(graph: RQL) {
  results: Input_core_apimessages_AdyenIdentifyShopperResults
  billingMethodUuid: String
}

input Input_core_apimessages_BillingMethodIdentifyShopperResponse @join__type(graph: RQL) {
  errors: [Input_core_apimessages_Error]
  creditCard: Input_core_apimessages_CreditCard
  adyenPaymentResult: Input_core_apimessages_AdyenPaymentResult
  billingMethodUuid: String
}

input Input_core_apimessages_BillingMethodVerifyShopperRequest @join__type(graph: RQL) {
  results: Input_core_apimessages_AdyenVerifyShopperResults
  billingMethodUuid: String
  """
  optional, to indicate that a new card is being added specifically for a partial payment
  """
  partialPayment: Boolean
}

input Input_core_apimessages_BillingMethodVerifyShopperResponse @join__type(graph: RQL) {
  errors: [Input_core_apimessages_Error]
  creditCard: Input_core_apimessages_CreditCard
  adyenPaymentResult: Input_core_apimessages_AdyenPaymentResult
  billingMethodUuid: String
}

input Input_core_apimessages_Brand @join__type(graph: RQL) {
  """brands.uuid"""
  id: String
  name: String
  webLink: Input_core_apimessages_Link
  slug: String
  uuid: String
}

input Input_core_apimessages_BrandManagerBrandRequest @join__type(graph: RQL) {
  slug: String
}

input Input_core_apimessages_BrandManagerBrandResponse @join__type(graph: RQL) {
  brand: Input_core_apimessages_Brand
}

input Input_core_apimessages_BrandManagerBrandsRequest @join__type(graph: RQL) {
  slugs: [String]
  offset: Int
  limit: Int
  uuids: [String]
}

input Input_core_apimessages_BrandManagerBrandsResponse @join__type(graph: RQL) {
  brandManagerBrands: [Input_core_apimessages_Brand]
  offset: Int
  limit: Int
}

input Input_core_apimessages_BrandsRequest @join__type(graph: RQL) {
  uuids: [String]
  slugs: [String]
}

input Input_core_apimessages_BrandsResponse @join__type(graph: RQL) {
  brands: [Input_core_apimessages_Brand]
}

input Input_core_apimessages_BrowsePage @join__type(graph: RQL) {
  id: String
  title: String
  url: String
  breadcrumbs: [Input_core_apimessages_BrowsePageBreadcrumb]
  combinedFilters: String
  ownFilters: String
}

input Input_core_apimessages_BrowsePageBreadcrumb @join__type(graph: RQL) {
  title: String
  url: String
}

input Input_core_apimessages_BrowsePageLink @join__type(graph: RQL) {
  url: String
  matchType: core_apimessages_BrowsePageLink_MatchType
  matchParams: [Input_core_apimessages_BrowsePageLink_MatchParams]
  combinedFilters: String
}

input Input_core_apimessages_BrowsePageLink_MatchParams @join__type(graph: RQL) {
  paramName: String
  value: String
}

input Input_core_apimessages_BrowsePageLinksRequest @join__type(graph: RQL) {
  id: String
}

input Input_core_apimessages_BrowsePageLinksResponse @join__type(graph: RQL) {
  browsePageLinks: [Input_core_apimessages_BrowsePageLink]
}

input Input_core_apimessages_BulkAddressesRequest @join__type(graph: RQL) {
  queries: [Input_core_apimessages_BulkAddressesRequest_Query]
}

input Input_core_apimessages_BulkAddressesRequest_Query @join__type(graph: RQL) {
  relation: core_apimessages_BulkAddressesRequest_Relation
  primaryKey: Input_core_apimessages_PrimaryKey
}

input Input_core_apimessages_BulkAddressesResponse @join__type(graph: RQL) {
  results: [Input_core_apimessages_BulkAddressesResponse_QueryResult]
}

input Input_core_apimessages_BulkAddressesResponse_QueryResult @join__type(graph: RQL) {
  addresses: [Input_core_apimessages_Address]
}

input Input_core_apimessages_BulkCategoriesRequest @join__type(graph: RQL) {
  requests: [Input_core_apimessages_CategoryRequest]
}

input Input_core_apimessages_BulkCategoriesResponse @join__type(graph: RQL) {
  responses: [Input_core_apimessages_CategoriesResponse]
}

input Input_core_apimessages_BulkCreateAutoOffersAsyncRequest @join__type(graph: RQL) {
  percentage: Int
  """Serialized JSON of dashboard listing search params"""
  serializedDashboardSearchParams: String
  expectedTotal: Int
}

input Input_core_apimessages_BulkCreateAutoOffersRequest @join__type(graph: RQL) {
  listingIds: [String]
  percentage: Int
}

input Input_core_apimessages_BulkCreateBumpedAsyncRequest @join__type(graph: RQL) {
  rate: Float
  """Serialized JSON of dashboard listing search params"""
  serializedDashboardSearchParams: String
  expectedTotal: Int
}

input Input_core_apimessages_BulkCreateBumpedRequest @join__type(graph: RQL) {
  listingIds: [String]
  rate: Float
}

input Input_core_apimessages_BulkCreateZeroPercentAffirmAsyncRequest @join__type(graph: RQL) {
  """Serialized JSON of dashboard listing search params"""
  serializedDashboardSearchParams: String
  expectedTotal: Int
}

input Input_core_apimessages_BulkCreateZeroPercentAffirmRequest @join__type(graph: RQL) {
  listingIds: [String]
}

input Input_core_apimessages_BulkCuratedSetsRequest @join__type(graph: RQL) {
  queries: [Input_core_apimessages_BulkCuratedSetsRequest_Query]
}

input Input_core_apimessages_BulkCuratedSetsRequest_Query @join__type(graph: RQL) {
  relation: core_apimessages_BulkCuratedSetsRequest_Relation
  primaryKey: Input_core_apimessages_PrimaryKey
  setTypes: [core_apimessages_CuratedSet_SetType]
}

input Input_core_apimessages_BulkCuratedSetsResponse @join__type(graph: RQL) {
  results: [Input_core_apimessages_BulkCuratedSetsResponse_QueryResult]
}

input Input_core_apimessages_BulkCuratedSetsResponse_QueryResult @join__type(graph: RQL) {
  curatedSets: [Input_core_apimessages_CuratedSet]
}

input Input_core_apimessages_BulkDeleteAutoOffersAsyncRequest @join__type(graph: RQL) {
  """Serialized JSON of dashboard listing search params"""
  serializedDashboardSearchParams: String
  expectedTotal: Int
}

input Input_core_apimessages_BulkDeleteAutoOffersRequest @join__type(graph: RQL) {
  listingIds: [String]
}

input Input_core_apimessages_BulkDeleteBumpedAsyncRequest @join__type(graph: RQL) {
  """Serialized JSON of dashboard listing search params"""
  serializedDashboardSearchParams: String
  expectedTotal: Int
}

input Input_core_apimessages_BulkDeleteBumpedRequest @join__type(graph: RQL) {
  listingIds: [String]
}

input Input_core_apimessages_BulkDeleteListingsAsyncRequest @join__type(graph: RQL) {
  """Serialized JSON of dashboard listing search params"""
  serializedDashboardSearchParams: String
  expectedTotal: Int
}

input Input_core_apimessages_BulkDeleteListingsRequest @join__type(graph: RQL) {
  listingIds: [String]
}

input Input_core_apimessages_BulkDeleteListingsResponse @join__type(graph: RQL) {
  listings: [Input_core_apimessages_BulkDeleteListingsResponse_ListingDeleted]
}

input Input_core_apimessages_BulkDeleteListingsResponse_ListingDeleted @join__type(graph: RQL) {
  listingId: String
  success: Boolean
  deleteErrors: [Input_core_apimessages_Error]
}

input Input_core_apimessages_BulkDeleteZeroPercentAffirmAsyncRequest @join__type(graph: RQL) {
  """Serialized JSON of dashboard listing search params"""
  serializedDashboardSearchParams: String
  expectedTotal: Int
}

input Input_core_apimessages_BulkDeleteZeroPercentAffirmRequest @join__type(graph: RQL) {
  listingIds: [String]
}

input Input_core_apimessages_BulkExportListingsRequest @join__type(graph: RQL) {
  listingIds: [String]
  state: core_apimessages_BulkExportListingsRequest_ListingState
  serializedDashboardSearchParams: String
  recipientId: String
}

input Input_core_apimessages_BulkExportListingsResponse @join__type(graph: RQL) {
  enqueued: Boolean
  message: String
}

input Input_core_apimessages_BulkImageRequest @join__type(graph: RQL) {
  requests: [Input_core_apimessages_ImageRequest]
}

input Input_core_apimessages_BulkOrdersRequest @join__type(graph: RQL) {
  queries: [Input_core_apimessages_BulkOrdersRequest_Query]
}

input Input_core_apimessages_BulkOrdersResponse @join__type(graph: RQL) {
  results: [Input_core_apimessages_BulkOrdersResponse_QueryResult]
}

input Input_core_apimessages_BulkOrdersResponse_QueryResult @join__type(graph: RQL) {
  orders: [Input_core_apimessages_Order]
}

input Input_core_apimessages_BulkPublishListingsAsyncRequest @join__type(graph: RQL) {
  """Serialized JSON of dashboard listing search params"""
  serializedDashboardSearchParams: String
  expectedTotal: Int
}

input Input_core_apimessages_BulkPublishListingsRequest @join__type(graph: RQL) {
  listingIds: [String]
}

input Input_core_apimessages_BulkPublishListingsResponse @join__type(graph: RQL) {
  listings: [Input_core_apimessages_BulkPublishListingsResponse_ListingPublished]
  prepublishStepRequired: Input_core_apimessages_BulkPublishListingsResponse_PrepublishStepRequired
}

input Input_core_apimessages_BulkPublishListingsResponse_ListingPublished @join__type(graph: RQL) {
  listingId: String
  success: Boolean
  publishErrors: [Input_core_apimessages_Error]
}

input Input_core_apimessages_BulkPublishListingsResponse_PrepublishStepRequired @join__type(graph: RQL) {
  step: String
}

input Input_core_apimessages_BulkSaleMembershipsRequest @join__type(graph: RQL) {
  listingIds: [String]
  saleId: String
}

input Input_core_apimessages_BulkTaxPoliciesRequest @join__type(graph: RQL) {
  requests: [Input_core_apimessages_TaxPoliciesRequest]
}

input Input_core_apimessages_BulkTaxPoliciesResponse @join__type(graph: RQL) {
  shops: [Input_core_apimessages_ShopTaxPolicies]
}

"""this is the shape of the bumpKey before it gets encoded"""
input Input_core_apimessages_BumpKeyContents @join__type(graph: RQL) {
  """JWT UUID"""
  jti: String
  """JWT Issued At Token, integer timestamp"""
  iat: Int
  userId: String
  sessionId: String
  cookieId: String
  productId: String
  source: core_apimessages_BumpKeyContents_OffsiteSource
}

input Input_core_apimessages_BumpKeysRequest @join__type(graph: RQL) {
  listingIds: [String]
}

input Input_core_apimessages_BumpKeysResponse @join__type(graph: RQL) {
  bumpKeys: [Input_core_apimessages_BumpKey]
}

input Input_core_apimessages_BumpRate @join__type(graph: RQL) {
  rate: Float
}

input Input_core_apimessages_BusinessRegistrationNumber @join__type(graph: RQL) {
  registrationNumber: String
  countryCode: String
  id: String
}

input Input_core_apimessages_BuyWithConfidenceSignal @join__type(graph: RQL) {
  isValid: Boolean
  translations: Input_core_apimessages_SignalTranslation
  link: Input_core_apimessages_SignalLink
}

input Input_core_apimessages_BuyerActions @join__type(graph: RQL) {
  canBeResold: Boolean
  canMarkReceived: Boolean
}

input Input_core_apimessages_BuyerOrder @join__type(graph: RQL) {
  uuid: String
  amountOwed: Input_core_apimessages_Money
  amountCreditBucks: Input_core_apimessages_Money
  amountBonusBucks: Input_core_apimessages_Money
  buyerActions: Input_core_apimessages_BuyerActions
  amountProduct: Input_core_apimessages_Money
  amountProductSubtotal: Input_core_apimessages_Money
  amountTotal: Input_core_apimessages_Money
  amountTax: Input_core_apimessages_Money
  amountShipping: Input_core_apimessages_Money
  protectionPlanDetails: Input_core_apimessages_OrderProtectionPlanDetails
  thirdPartyAdsAttributes: Input_core_apimessages_ThirdPartyAdsAttributes
}

input Input_core_apimessages_BuyerOrdersResponse @join__type(graph: RQL) {
  orders: [Input_core_apimessages_BuyerOrder]
}

input Input_core_apimessages_BuyerRefund @join__type(graph: RQL) {
  id: String
  nonBucksRefundAmount: Input_core_apimessages_ConvertedMoney
  reverbBucksAmountRefunded: Input_core_apimessages_Money
}

input Input_core_apimessages_BuyerRefundsRequest @join__type(graph: RQL) {
  ids: [String]
}

input Input_core_apimessages_BuyerRefundsResponse @join__type(graph: RQL) {
  buyerRefunds: [Input_core_apimessages_BuyerRefund]
}

input Input_core_apimessages_CPSuggestion @join__type(graph: RQL) {
  canonicalProductId: String
  service: String
  confidence: Float
  canonicalProduct: Input_core_apimessages_AutomatchingCanonicalProduct
}

input Input_core_apimessages_CPSuggestions @join__type(graph: RQL) {
  suggestions: [Input_core_apimessages_CPSuggestion]
}

input Input_core_apimessages_CPSuggestionsRequest @join__type(graph: RQL) {
  listingIds: [String]
}

input Input_core_apimessages_CPSuggestionsResponse @join__type(graph: RQL) {
  cpSuggestions: [Input_core_apimessages_CPSuggestions]
}

input Input_core_apimessages_CSP @join__type(graph: RQL) {
  """comparison_shopping_pages.id"""
  id: String
  title: String
  summary: String
  webLink: Input_core_apimessages_Link
  newListingsLink: Input_core_apimessages_Link
  usedListingsLink: Input_core_apimessages_Link
  uuid: String
  brandUuid: String
  categoryUuids: [String]
  slug: String
  metaDescription: String
  body: String
  model: String
  canonicalProductIds: [String]
  upcs: [String]
  finishes: [String]
  generic: Boolean
  categoryRootUuid: String
  canonicalProductImageApprovedIds: [String]
}

input Input_core_apimessages_CSPExpressSaleItemBid @join__type(graph: RQL) {
  cspUuid: String
  estimatedPayout: Input_core_apimessages_Money
  carrier: String
  bidId: String
  shopName: String
}

input Input_core_apimessages_CSPInventory @join__type(graph: RQL) {
  """comparison_shopping_pages.id"""
  id: String
  usedTotal: Int
  newTotal: Int
  newLowPrice: Input_core_apimessages_Money
  usedLowPrice: Input_core_apimessages_Money
  uuid: String
  slug: String
}

input Input_core_apimessages_CSPPricing @join__type(graph: RQL) {
  low: Input_core_apimessages_Money
  mid: Input_core_apimessages_Money
  high: Input_core_apimessages_Money
  hasData: Boolean
}

input Input_core_apimessages_CSPReview @join__type(graph: RQL) {
  id: String
  body: String
  createdAt: String
  title: String
  rating: Int
  voteCount: Int
  reviewer: Input_core_apimessages_Reviewer
  verified: Boolean
  blocked: Boolean
  isMyReview: Boolean
  didIVote: Boolean
}

input Input_core_apimessages_CSPReviews @join__type(graph: RQL) {
  reviews: [Input_core_apimessages_CSPReview]
  offset: Int
  limit: Int
  total: Int
  avgRating: Float
  myReview: Input_core_apimessages_CSPReview
}

input Input_core_apimessages_CSPReviewsRequest @join__type(graph: RQL) {
  ids: [String]
  slugs: [String]
  uuids: [String]
  offset: Int
  limit: Int
}

input Input_core_apimessages_CSPReviewsResponse @join__type(graph: RQL) {
  reviews: [Input_core_apimessages_CSPReviews]
}

input Input_core_apimessages_CSPSpec @join__type(graph: RQL) {
  productSpecs: [Input_core_apimessages_ProductSpec]
}

input Input_core_apimessages_CSPVideo @join__type(graph: RQL) {
  videoLinks: [Input_core_apimessages_VideoLink]
}

input Input_core_apimessages_CSPsFeaturedListingRequest @join__type(graph: RQL) {
  """comparison_shopping_pages.id"""
  ids: [String]
  uuids: [String]
  slugs: [String]
}

input Input_core_apimessages_CSPsFeaturedListingResponse @join__type(graph: RQL) {
  featuredListingIds: [String]
}

input Input_core_apimessages_CSPsInventoryRequest @join__type(graph: RQL) {
  """comparison_shopping_pages.id"""
  ids: [String]
  uuids: [String]
  slugs: [String]
}

input Input_core_apimessages_CSPsInventoryResponse @join__type(graph: RQL) {
  inventories: [Input_core_apimessages_CSPInventory]
}

input Input_core_apimessages_CSPsRequest @join__type(graph: RQL) {
  ids: [String]
  slugs: [String]
  uuids: [String]
}

input Input_core_apimessages_CSPsResponse @join__type(graph: RQL) {
  csps: [Input_core_apimessages_CSP]
}

input Input_core_apimessages_CSPsSpecsRequest @join__type(graph: RQL) {
  """comparison_shopping_pages.id"""
  ids: [String]
  slugs: [String]
  uuids: [String]
}

input Input_core_apimessages_CSPsSpecsResponse @join__type(graph: RQL) {
  specs: [Input_core_apimessages_CSPSpec]
}

input Input_core_apimessages_CSPsVideoRequest @join__type(graph: RQL) {
  """comparison_shopping_pages.id"""
  ids: [String]
  slugs: [String]
  uuids: [String]
}

input Input_core_apimessages_CSPsVideoResponse @join__type(graph: RQL) {
  videos: [Input_core_apimessages_CSPVideo]
}

input Input_core_apimessages_CancelOrderRequest @join__type(graph: RQL) {
  uuid: String
  id: String
  cancellationReason: core_apimessages_CancelOrderRequest_CancellationReason
  relist: Boolean
}

input Input_core_apimessages_CancelOrderResponse @join__type(graph: RQL) {
  order: Input_core_apimessages_Order
  relisted: Boolean
}

input Input_core_apimessages_CancelPlaidAccountRequest @join__type(graph: RQL) {
  _: Boolean
}

input Input_core_apimessages_CancelPlaidAccountResponse @join__type(graph: RQL) {
  shopId: String
}

input Input_core_apimessages_Candidate @join__type(graph: RQL) {
  adGroup: Input_core_apimessages_AdGroup
  matches: [String]
  weight: Int
}

input Input_core_apimessages_CanonicalProduct @join__type(graph: RQL) {
  id: String
  name: String
  model: String
  year: String
  finish: String
  countryOfOrigin: String
}

input Input_core_apimessages_CarrierRate @join__type(graph: RQL) {
  displayPosition: Int
  uuid: String
  carrier: String
  service: String
  description: String
  paymentMethod: core_apimessages_FeePaymentMethod
  rackRateAmount: Input_core_apimessages_Money
  shippingProtectionAmount: Input_core_apimessages_Money
  reverbDiscountAmount: Input_core_apimessages_Money
  totalAmount: Input_core_apimessages_Money
  signatureRequiredAmount: Input_core_apimessages_Money
  expeditedOrFaster: Boolean
}

input Input_core_apimessages_CarrierRateGroup @join__type(graph: RQL) {
  displayPosition: Int
  carrier: String
  rates: [Input_core_apimessages_CarrierRate]
}

input Input_core_apimessages_CartItem @join__type(graph: RQL) {
  uuid: String
  listingId: String
  orderId: String
  """Estimated subtotal based on listing price and quantity"""
  subtotal: Input_core_apimessages_Money
  shopId: String
  quantity: Int
  paymentMethods: [Input_core_apimessages_CartItem_PaymentMethod]
  actions: Input_core_apimessages_CartItem_Actions
  listingTotal: Input_core_apimessages_CartItem_ListingTotal
  shippingTotal: Input_core_apimessages_CartItem_ShippingTotal
  alerts: [Input_core_apimessages_CartItem_Alert]
  protectionPlan: Input_core_apimessages_ProtectionPlan
  protectionPlanEligible: Boolean
}

input Input_core_apimessages_CartItemAttributes @join__type(graph: RQL) {
  actionSourceAttributes: Input_core_apimessages_ActionSourceAttributes
  cartSource: String
  listingId: Int
  quantity: Int
  upsell: Boolean
  uuid: String
  saleId: Int
}

input Input_core_apimessages_CartItemBundle @join__type(graph: RQL) {
  checkoutBundlingId: String
  cartItems: [Input_core_apimessages_CartItem]
  availablePaymentMethods: [Input_core_apimessages_CartItemBundle_PaymentMethod]
  lineItems: [Input_core_apimessages_CartItemBundle_LineItem]
  freeShippingStatuses: [Input_core_apimessages_CartItemBundle_FreeShippingStatus]
  combineAndSaveEligibleListingId: String
  paymentMethodIcons: [Input_core_apimessages_PaymentCardIcon]
  total: Input_core_apimessages_CartItemBundle_Total
  title: String
}

input Input_core_apimessages_CartItemBundle_FreeShippingStatus @join__type(graph: RQL) {
  shopId: String
  """Natural number up to 100"""
  percentProgress: Int
  isThresholdMet: Boolean
  amountRemaining: Input_core_apimessages_Money
}

input Input_core_apimessages_CartItemBundle_LineItem @join__type(graph: RQL) {
  type: core_apimessages_CartItemBundle_LineItem_Type
  label: String
  amount: Input_core_apimessages_Money
}

input Input_core_apimessages_CartItemBundle_PaymentMethod @join__type(graph: RQL) {
  type: core_apimessages_CheckoutPaymentMethod_Type
  name: String
  applePay: Input_core_apimessages_CheckoutApplePayDetails
  googlePay: Input_core_apimessages_CheckoutGooglePayDetails
  affirm: Input_core_apimessages_CheckoutAffirmDetails
  paypal: Input_core_apimessages_CheckoutPaypalDetails
}

input Input_core_apimessages_CartItemBundle_Total @join__type(graph: RQL) {
  amount: Input_core_apimessages_Money
  label: String
}

input Input_core_apimessages_CartItem_Actions @join__type(graph: RQL) {
  canChangeQuantity: Boolean
  canRemoveFromCart: Boolean
  canMoveToWatchlist: Boolean
}

input Input_core_apimessages_CartItem_Alert @join__type(graph: RQL) {
  type: core_apimessages_CartItem_Alert_Type
  text: String
  severity: core_apimessages_CartItem_Alert_Severity
}

input Input_core_apimessages_CartItem_ListingTotal @join__type(graph: RQL) {
  """
  Unit amount owed by the buyer for a cart item. Includes tax and any discounts from an offer or sale.
  """
  unitPrice: Input_core_apimessages_Money
  """True if order listing price is less than original listing price."""
  discounted: Boolean
  discount: Input_core_apimessages_CartItem_ListingTotal_Discount
  """Original unit amount before offer pricing or sales were applied."""
  originalUnitPrice: Input_core_apimessages_Money
}

input Input_core_apimessages_CartItem_ListingTotal_Discount @join__type(graph: RQL) {
  type: core_apimessages_CartItem_ListingTotal_Discount_Type
  label: String
}

input Input_core_apimessages_CartItem_PaymentMethod @join__type(graph: RQL) {
  type: core_apimessages_CheckoutPaymentMethod_Type
  links: Input_core_apimessages_CartLinks
}

input Input_core_apimessages_CartItem_ShippingTotal @join__type(graph: RQL) {
  """Original shipping amount owed the cart item before any discounts."""
  originalAmountOwed: Input_core_apimessages_Money
  """Shipping amount owed by buyer including discounts if eligible."""
  amountOwed: Input_core_apimessages_Money
  """True if amount owed is less than original amount owed."""
  discounted: Boolean
  discount: Input_core_apimessages_CartItem_ShippingTotal_Discount
}

input Input_core_apimessages_CartItem_ShippingTotal_Discount @join__type(graph: RQL) {
  type: core_apimessages_CartItem_ShippingTotal_Discount_Type
  label: String
}

input Input_core_apimessages_CartLinks @join__type(graph: RQL) {
  web: Input_core_apimessages_Link
  restIndividual: Input_core_apimessages_Link
  restBundle: Input_core_apimessages_Link
}

input Input_core_apimessages_CartMoveToWatchListRequest @join__type(graph: RQL) {
  cartItemUuid: String
}

input Input_core_apimessages_CartMoveToWatchListResponse @join__type(graph: RQL) {
  """Listing ID for the watched product"""
  listingId: String
}

input Input_core_apimessages_CategoriesRequest @join__type(graph: RQL) {
  """Deprecated- maps to categories.uuid"""
  ids: [String]
  withChildren: Boolean
  withParent: Boolean
  uuids: [String]
  slugs: [String]
}

input Input_core_apimessages_CategoriesResponse @join__type(graph: RQL) {
  categories: [Input_core_apimessages_Category]
}

input Input_core_apimessages_Category @join__type(graph: RQL) {
  """categories.uuid"""
  id: String
  name: String
  webLink: Input_core_apimessages_Link
  children: [Input_core_apimessages_Category]
  cmsLink: Input_core_apimessages_Link
  parent: Input_core_apimessages_Category
  slug: String
  rootSlug: String
  cmsUrl: Input_core_apimessages_Link
  root: Boolean
  leaf: Boolean
}

input Input_core_apimessages_CategoryRequest @join__type(graph: RQL) {
  """This should only be for Article id, Category should use uuid"""
  id: String
  withChildren: Boolean
  withParent: Boolean
  uuid: String
  slug: String
  type: core_apimessages_CategoryRequest_CategoryType
}

"""Partially copied into abandoned_cart.proto for abandoned cart emails."""
input Input_core_apimessages_ChannelBranding @join__type(graph: RQL) {
  name: String
  logoImageUrl: String
  completeUrl: String
  channel: core_apimessages_Channel
  """for seller sites to identify which shop this came from"""
  shopIdentifier: String
  abandonUrl: String
}

input Input_core_apimessages_Checkout @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
  """
  Semi-opaque identifier to bundle a checkout, for example RCP-USD-direct_checkout.
  """
  checkoutBundlingId: String
  paymentMethod: Input_core_apimessages_CheckoutPaymentMethod
  shippingAddress: Input_core_apimessages_Address
  billingAddress: Input_core_apimessages_Address
  orders: [Input_core_apimessages_CheckoutOrder]
  lineItems: [Input_core_apimessages_CheckoutLineItem]
  status: core_apimessages_Checkout_Status
  paymentErrorMessage: String
  type: core_apimessages_Checkout_Type
  creditCard: Input_core_apimessages_CreditCard
  guest: Input_core_apimessages_CheckoutGuest
  """A JSON serialized hash"""
  adyenPaymentAction: String
  availablePaymentMethods: [Input_core_apimessages_CheckoutPaymentMethod]
  isAllPaidWithBucks: Boolean
  source: core_apimessages_Checkout_Source
  """
  Amount owed. Use this field to send the displayed amount owed value to a finalize checkout
  """
  total: Input_core_apimessages_Checkout_Total
}

input Input_core_apimessages_CheckoutAction @join__type(graph: RQL) {
  type: core_apimessages_CheckoutAction_Type
  redirectUrl: String
}

input Input_core_apimessages_CheckoutActionRequest @join__type(graph: RQL) {
  checkoutId: String
  """
  Native app URL param. Corresponds to _reverb_app query param needed for internal navigation.
  """
  reverbApp: String
}

input Input_core_apimessages_CheckoutActionResponse @join__type(graph: RQL) {
  action: Input_core_apimessages_CheckoutAction
}

input Input_core_apimessages_CheckoutAffirmDetails @join__type(graph: RQL) {
  financingProgramSlug: String
}

input Input_core_apimessages_CheckoutApplePayDetails @join__type(graph: RQL) {
  """Merchant name to display in the payment sheet"""
  merchantName: String
  """Apple Pay Merchant ID for payment sheet configuration"""
  merchantId: String
  """Brand types provided by Adyen such as visa, mc, jcb"""
  brands: [String]
}

input Input_core_apimessages_CheckoutApplePayDetailsRequest @join__type(graph: RQL) {
  currency: String
}

input Input_core_apimessages_CheckoutApplePayDetailsResponse @join__type(graph: RQL) {
  details: Input_core_apimessages_CheckoutApplePayDetails
}

input Input_core_apimessages_CheckoutCartEditRequest @join__type(graph: RQL) {
  listingId: String
  """
  Adds a listing by the given quantity if 1 or greater. Removes the listing from the user's cart if zero.
  """
  quantity: Int
}

input Input_core_apimessages_CheckoutCartEditResponse @join__type(graph: RQL) {
  listingId: String
  """If an item was not removed, returns the added item"""
  cartItem: Input_core_apimessages_CartItem
}

input Input_core_apimessages_CheckoutChallengeShopperRequest @join__type(graph: RQL) {
  checkoutUuid: String
  checkoutId: String
  totalPrice: Input_core_apimessages_Money
  results: Input_core_apimessages_AdyenChallengeShopperResults
  channelBrandingToken: String
}

input Input_core_apimessages_CheckoutChallengeShopperResponse @join__type(graph: RQL) {
  checkoutUuid: String
  adyenPaymentResult: Input_core_apimessages_AdyenPaymentResult
  orderBundleId: String
  checkoutId: String
  paymentResultUrl: String
}

input Input_core_apimessages_CheckoutCreatePaymentRedirectUrlRequest @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
  reverbApp: String
  accertifyDeviceInfo: Input_core_apimessages_AccertifyDeviceInfo
}

input Input_core_apimessages_CheckoutCreatePaymentRedirectUrlResponse @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
  """Redirect url for payment method"""
  redirectUrl: String
}

input Input_core_apimessages_CheckoutFinalizeDigitalWalletPaymentRequest @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
  paymentToken: String
  totalPrice: Input_core_apimessages_MoneyMinorUnitsEntry
  shippingAddress: Input_core_apimessages_AddressEntry
  guestUser: Input_core_apimessages_GuestCheckoutUserEntry
  resultConfirmation: core_apimessages_CheckoutFinalizeDigitalWalletPaymentRequest_ResultConfirmation
  accertifyDeviceInfo: Input_core_apimessages_AccertifyDeviceInfo
}

input Input_core_apimessages_CheckoutFinalizeDigitalWalletPaymentResponse @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
}

input Input_core_apimessages_CheckoutFinalizeRedirectPaymentCheckoutRequest @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
  redirectResult: String
  merchantReference: String
  displayedAmountOwedCents: String
}

input Input_core_apimessages_CheckoutFinalizeRedirectPaymentCheckoutResponse @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
}

input Input_core_apimessages_CheckoutGooglePayDetails @join__type(graph: RQL) {
  """Merchant name to display in the payment sheet"""
  merchantName: String
  """Google Pay Merchant ID"""
  merchantId: String
  """Reverb Adyen Merchant ID for the transaction"""
  gatewayMerchantId: String
  """Card networks supported by both Reverb and Google Pay"""
  cardNetworks: [core_apimessages_CheckoutGooglePayDetails_CardNetwork]
}

input Input_core_apimessages_CheckoutGuest @join__type(graph: RQL) {
  firstName: String
  lastName: String
  email: String
  isComplete: Boolean
}

input Input_core_apimessages_CheckoutIdentifyShopperRequest @join__type(graph: RQL) {
  checkoutUuid: String
  checkoutId: String
  totalPrice: Input_core_apimessages_Money
  results: Input_core_apimessages_AdyenIdentifyShopperResults
  channelBrandingToken: String
}

input Input_core_apimessages_CheckoutIdentifyShopperResponse @join__type(graph: RQL) {
  checkoutUuid: String
  adyenPaymentResult: Input_core_apimessages_AdyenPaymentResult
  orderBundleId: String
  checkoutId: String
  paymentResultUrl: String
}

input Input_core_apimessages_CheckoutLineItem @join__type(graph: RQL) {
  type: core_apimessages_CheckoutLineItem_Type
  label: String
  amount: Input_core_apimessages_Money
}

input Input_core_apimessages_CheckoutOrder @join__type(graph: RQL) {
  """Order ID. Present if order is unpaid"""
  id: String
  """Listing ID"""
  listingId: String
  subtotal: Input_core_apimessages_CheckoutOrder_Subtotal
  shippingTotal: Input_core_apimessages_CheckoutOrder_ShippingTotal
  taxIncluded: Boolean
  taxLabel: String
  shippingMethod: Input_core_apimessages_CheckoutShippingMethod
  quantity: Int
  buyerCanChangeQuantity: Boolean
  cannotBeShippedToAddress: Boolean
  availableShippingMethods: [Input_core_apimessages_CheckoutShippingMethod]
  notes: [Input_core_apimessages_CheckoutOrder_Note]
  protectionPlan: Input_core_apimessages_ProtectionPlan
}

input Input_core_apimessages_CheckoutOrder_Note @join__type(graph: RQL) {
  text: String
  severity: core_apimessages_CheckoutOrder_Note_Severity
}

input Input_core_apimessages_CheckoutOrder_ShippingTotal @join__type(graph: RQL) {
  """Original shipping amount owed for order before any discounts."""
  originalAmountOwed: Input_core_apimessages_Money
  """Shipping amount owed by buyer for order including discounts if any."""
  amountOwed: Input_core_apimessages_Money
  """True if amount owed is less than original amount owed."""
  discounted: Boolean
  discount: Input_core_apimessages_CheckoutOrder_ShippingTotalDiscount
}

input Input_core_apimessages_CheckoutOrder_ShippingTotalDiscount @join__type(graph: RQL) {
  type: core_apimessages_CheckoutOrder_ShippingTotalDiscount_Type
  label: String
}

input Input_core_apimessages_CheckoutOrder_Subtotal @join__type(graph: RQL) {
  """
  Unit amount owed by the buyer for an order listing. Includes tax and conditional discounts like offer price.
  """
  listingPrice: Input_core_apimessages_Money
  """True if order listing price is less than original listing price."""
  discounted: Boolean
  discount: Input_core_apimessages_CheckoutOrder_SubtotalDiscount
}

input Input_core_apimessages_CheckoutOrder_SubtotalDiscount @join__type(graph: RQL) {
  type: core_apimessages_CheckoutOrder_SubtotalDiscount_Type
  label: String
}

input Input_core_apimessages_CheckoutPaymentMethod @join__type(graph: RQL) {
  type: core_apimessages_CheckoutPaymentMethod_Type
  name: String
  isComplete: Boolean
  """True if discount codes are supported"""
  supportsDiscountCodes: Boolean
  applePay: Input_core_apimessages_CheckoutApplePayDetails
  affirm: Input_core_apimessages_CheckoutAffirmDetails
  googlePay: Input_core_apimessages_CheckoutGooglePayDetails
  paypal: Input_core_apimessages_CheckoutPaypalDetails
}

input Input_core_apimessages_CheckoutPaymentResponse @join__type(graph: RQL) {
  checkoutUuid: String
  adyenPaymentResult: Input_core_apimessages_AdyenPaymentResult
  orderBundleId: String
  checkoutId: String
  paymentResultUrl: String
}

input Input_core_apimessages_CheckoutPaypalDetails @join__type(graph: RQL) {
  clientToken: String
  currency: String
  clientId: String
  merchantId: String
}

input Input_core_apimessages_CheckoutSelectOrderShippingMethodRequest @join__type(graph: RQL) {
  id: String
  order: Input_core_apimessages_CheckoutSelectOrderShippingMethodRequest_OrderEntry
}

input Input_core_apimessages_CheckoutSelectOrderShippingMethodRequest_OrderEntry @join__type(graph: RQL) {
  listingId: String
  shippingMethodType: core_apimessages_ShippingMethod
}

input Input_core_apimessages_CheckoutSelectOrderShippingMethodResponse @join__type(graph: RQL) {
  id: String
}

input Input_core_apimessages_CheckoutSelectShippingAddressRequest @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
  """addresses.uuid"""
  shippingAddressId: String
}

input Input_core_apimessages_CheckoutSelectShippingAddressResponse @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
}

input Input_core_apimessages_CheckoutShippingMethod @join__type(graph: RQL) {
  type: core_apimessages_ShippingMethod
  name: String
  description: String
  amount: Input_core_apimessages_Money
}

input Input_core_apimessages_CheckoutShowRequest @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
}

input Input_core_apimessages_CheckoutShowResponse @join__type(graph: RQL) {
  checkout: Input_core_apimessages_Checkout
}

input Input_core_apimessages_CheckoutUpdateOrderQuantityRequest @join__type(graph: RQL) {
  id: String
  order: Input_core_apimessages_CheckoutUpdateOrderQuantityRequest_OrderEntry
}

input Input_core_apimessages_CheckoutUpdateOrderQuantityRequest_OrderEntry @join__type(graph: RQL) {
  listingId: String
  quantity: Int
}

input Input_core_apimessages_CheckoutUpdateOrderQuantityResponse @join__type(graph: RQL) {
  id: String
}

input Input_core_apimessages_CheckoutUpdateShippingAddressRequest @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
  shippingAddress: Input_core_apimessages_AddressEntry
  """Information required only for guest checkout."""
  guest: Input_core_apimessages_GuestCheckoutUserEntry
}

input Input_core_apimessages_CheckoutUpdateShippingAddressResponse @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
}

input Input_core_apimessages_CheckoutUpdateShippingEstimateRequest @join__type(graph: RQL) {
  id: String
  shippingAddress: Input_core_apimessages_AddressEntry
}

input Input_core_apimessages_CheckoutUpdateShippingEstimateResponse @join__type(graph: RQL) {
  id: String
}

input Input_core_apimessages_CheckoutVerifyShopperRequest @join__type(graph: RQL) {
  checkoutUuid: String
  checkoutId: String
  totalPrice: Input_core_apimessages_Money
  results: Input_core_apimessages_AdyenVerifyShopperResults
}

input Input_core_apimessages_CheckoutVerifyShopperResponse @join__type(graph: RQL) {
  checkoutUuid: String
  adyenPaymentResult: Input_core_apimessages_AdyenPaymentResult
  orderBundleId: String
  checkoutId: String
  paymentResultUrl: String
}

input Input_core_apimessages_Checkout_Total @join__type(graph: RQL) {
  amount: Input_core_apimessages_Money
  label: String
}

input Input_core_apimessages_CollectionHeader @join__type(graph: RQL) {
  id: String
  title: String
  description: String
  metaTitle: String
  metaDescription: String
  collectionType: core_apimessages_CollectionHeader_CollectionType
  collectionId: String
}

input Input_core_apimessages_CollectionHeaderRequest @join__type(graph: RQL) {
  collectionType: core_apimessages_CollectionHeader_CollectionType
  """for category, `productType:category` compound key"""
  collectionSlug: String
}

input Input_core_apimessages_CollectionHeaderResponse @join__type(graph: RQL) {
  collectionHeader: Input_core_apimessages_CollectionHeader
}

input Input_core_apimessages_CompleteExpressSaleCheckoutRequest @join__type(graph: RQL) {
  checkoutId: String
}

input Input_core_apimessages_CompleteExpressSaleCheckoutResponse @join__type(graph: RQL) {
  orderId: String
}

input Input_core_apimessages_Condition @join__type(graph: RQL) {
  conditionUuid: String
  displayName: String
  conditionSlug: String
  description: String
}

input Input_core_apimessages_ContentSponsorship @join__type(graph: RQL) {
  sponsorshipType: core_apimessages_ContentSponsorship_SponsorshipType
  partnershipName: String
}

input Input_core_apimessages_ConversationFlagMessageRequest @join__type(graph: RQL) {
  messageId: String
  reasonType: core_apimessages_ConversationMessageFlag_Reason_Type
}

input Input_core_apimessages_ConversationFlagMessageResponse @join__type(graph: RQL) {
  """Created Message Flag ID"""
  id: String
}

input Input_core_apimessages_ConversationMessage @join__type(graph: RQL) {
  id: String
  conversationId: String
}

input Input_core_apimessages_ConversationMessageFlag @join__type(graph: RQL) {
  id: String
}

input Input_core_apimessages_ConversationMessageFlag_Reason @join__type(graph: RQL) {
  _: Boolean
}

input Input_core_apimessages_ConvertedMoney @join__type(graph: RQL) {
  original: Input_core_apimessages_Money
  display: Input_core_apimessages_Money
}

input Input_core_apimessages_CopyAdGroupRequest @join__type(graph: RQL) {
  adGroupUuid: String
}

input Input_core_apimessages_CopyAdGroupResponse @join__type(graph: RQL) {
  adGroup: Input_core_apimessages_AdGroup
}

input Input_core_apimessages_CountriesResponse @join__type(graph: RQL) {
  countries: [Input_core_apimessages_Country]
}

input Input_core_apimessages_Country @join__type(graph: RQL) {
  countryCode: String
  name: String
  subregionRequired: Boolean
  subregions: [Input_core_apimessages_Subregion]
  superRegion: Input_core_apimessages_SuperRegion
  id: String
}

input Input_core_apimessages_CountsLinks @join__type(graph: RQL) {
  self: Input_core_apimessages_Link
}

input Input_core_apimessages_CountsResponse @join__type(graph: RQL) {
  Links: Input_core_apimessages_CountsLinks
  total: Input_core_apimessages_CountsTotal
  activeCartItemTotal: Input_core_apimessages_UserBadge
  activeOffers: Input_core_apimessages_UserBadge
  billingProfile: Input_core_apimessages_UserBadge
  buyerActiveOffers: Input_core_apimessages_UserBadge
  invoicedStatementCount: Input_core_apimessages_UserBadge
  layawayOrders: Input_core_apimessages_UserBadge
  outstandingFeedback: Input_core_apimessages_UserBadge
  sellerActiveOffers: Input_core_apimessages_UserBadge
  sellerOrdersAwaitingShipment: Input_core_apimessages_UserBadge
  sellerOrdersRefundRequested: Input_core_apimessages_UserBadge
  unpaidOrders: Input_core_apimessages_UserBadge
  unreadMessages: Input_core_apimessages_UserBadge
  sellerOrdersAwaitingPickup: Input_core_apimessages_UserBadge
  buyerOrdersAwaitingPickup: Input_core_apimessages_UserBadge
  countsLinks: Input_core_apimessages_CountsLinks
  userNotifications: [Input_core_apimessages_UserNotification]
}

input Input_core_apimessages_CountsTotal @join__type(graph: RQL) {
  count: Int
}

input Input_core_apimessages_CreateAutoOfferRequest @join__type(graph: RQL) {
  listingId: String
  message: String
  price: Input_core_apimessages_Money
  pushToExisting: Boolean
  percentage: Int
  instantOffersEnabled: Boolean
  shippingPriceOverride: Input_core_apimessages_Money
}

input Input_core_apimessages_CreateAutoOfferResponse @join__type(graph: RQL) {
  autoOffer: Input_core_apimessages_AutoOffer
}

input Input_core_apimessages_CreateCheckoutPaypalOrderRequest @join__type(graph: RQL) {
  """checkout UUID"""
  id: String
  reverbApp: String
  noShipping: Boolean
}

input Input_core_apimessages_CreateCheckoutPaypalOrderResponse @join__type(graph: RQL) {
  """checkout UUID"""
  id: String
  paypalOrderId: String
  redirectUrl: String
}

input Input_core_apimessages_CreateExpressSaleCheckoutRequest @join__type(graph: RQL) {
  checkoutId: String
  payoutAmountCents: Int
  isTermsAccepted: Boolean
  addressUuid: String
  address: Input_core_apimessages_AddressEntry
}

input Input_core_apimessages_CreateExpressSaleCheckoutResponse @join__type(graph: RQL) {
  checkoutId: String
}

input Input_core_apimessages_CreateMyActionRequest @join__type(graph: RQL) {
  name: core_apimessages_UserActionName
}

input Input_core_apimessages_CreateMyActionResponse @join__type(graph: RQL) {
  errors: [Input_core_apimessages_Error]
  action: Input_core_apimessages_AvailableAction
}

input Input_core_apimessages_CreateMyCreditCardRequest @join__type(graph: RQL) {
  creditCard: Input_core_apimessages_CreateMyCreditCardRequest_CreditCardEntry
  billingAddress: Input_core_apimessages_AddressEntry
}

input Input_core_apimessages_CreateMyCreditCardRequest_CreditCardEntry @join__type(graph: RQL) {
  tokenizedFields: Input_core_apimessages_CreditCardTokenizedFields
  cardholderName: String
}

input Input_core_apimessages_CreateMyCreditCardResponse @join__type(graph: RQL) {
  creditCard: Input_core_apimessages_CreditCard
}

input Input_core_apimessages_CreateMyFeedbackMessageRequest @join__type(graph: RQL) {
  message: String
}

input Input_core_apimessages_CreateMyFeedbackMessageResponse @join__type(graph: RQL) {
  id: String
}

input Input_core_apimessages_CreateMyPlaidLinkTokenRequest @join__type(graph: RQL) {
  countryCode: String
  plaidAccountId: String
  requiresMobileRedirect: Boolean
}

input Input_core_apimessages_CreateMyPlaidLinkTokenResponse @join__type(graph: RQL) {
  linkToken: String
}

input Input_core_apimessages_CreateMySaleMembershipRequest @join__type(graph: RQL) {
  listingId: String
  saleId: String
}

input Input_core_apimessages_CreateMySaleMembershipResponse @join__type(graph: RQL) {
  saleMembership: Input_core_apimessages_ListingSaleMembership
}

input Input_core_apimessages_CreateNegotiationRequest @join__type(graph: RQL) {
  message: String
  offerItems: [Input_core_apimessages_OfferItemRequest]
  recipientUuid: String
  countryCode: String
  regionCode: String
  """country code OR subregion (eg continental US)"""
  shippingRegionCode: String
  postalCode: String
  """
  optional, to copy message/photos to relevant conversation if offer is included is messages
  """
  conversation: Input_core_apimessages_CreateNegotiationRequest_ConversationData
  bumpKey: Input_core_apimessages_BumpKey
  shippingAddressUuid: String
  creditCardId: String
}

input Input_core_apimessages_CreateNegotiationRequest_ConversationData @join__type(graph: RQL) {
  listingId: String
  photos: [Input_core_apimessages_ImageEntry]
}

input Input_core_apimessages_CreateOrUpdateUserShopPermissionResponse @join__type(graph: RQL) {
  userShopPermission: Input_core_apimessages_UserShopPermission
}

input Input_core_apimessages_CreateOrderNoteRequest @join__type(graph: RQL) {
  body: String
  """orders.id"""
  orderId: String
}

input Input_core_apimessages_CreateOrderNoteResponse @join__type(graph: RQL) {
  errors: [Input_core_apimessages_Error]
  orderNote: Input_core_apimessages_OrderNote
}

input Input_core_apimessages_CreatePacklinkDraftRequest @join__type(graph: RQL) {
  orderId: String
}

input Input_core_apimessages_CreatePacklinkDraftResponse @join__type(graph: RQL) {
  shipment: Input_core_apimessages_PacklinkShipment
}

input Input_core_apimessages_CreateRecentSearchRequest @join__type(graph: RQL) {
  query: String
}

input Input_core_apimessages_CreateRecentSearchResponse @join__type(graph: RQL) {
  query: String
}

input Input_core_apimessages_CreateShipmentError @join__type(graph: RQL) {
  message: String
  errorType: core_apimessages_CreateShipmentErrorType
}

input Input_core_apimessages_CreateShipmentRequest @join__type(graph: RQL) {
  toAddress: Input_core_apimessages_Address
  fromAddress: Input_core_apimessages_Address
  package: Input_core_apimessages_ShippingLabelPackage
  shippingProtection: Boolean
  signatureRequired: Boolean
  mediaMailQualified: Boolean
  customs: Input_core_apimessages_CustomsInfo
  orderUuids: [String]
  shippingProtectionPrice: Input_core_apimessages_Money
  """shipments.uuid"""
  id: String
  toAddressIsResidential: Boolean
  shipmentType: core_apimessages_Shipment_ShipmentType
  modifiedCarrierCalculatedShipment: Boolean
}

input Input_core_apimessages_CreateShipmentResponse @join__type(graph: RQL) {
  shipment: Input_core_apimessages_Shipment
  errors: [Input_core_apimessages_CreateShipmentError]
}

input Input_core_apimessages_CreateTaxIdentificationRequest @join__type(graph: RQL) {
  taxId: String
  countryCode: String
  taxType: String
}

input Input_core_apimessages_CreateTaxIdentificationResponse @join__type(graph: RQL) {
  taxIdentification: Input_core_apimessages_TaxIdentification
  shopId: String
}

input Input_core_apimessages_CreateTruliooOnboardingRecordResponse @join__type(graph: RQL) {
  errors: [Input_core_apimessages_Error]
  truliooOnboardingRecord: Input_core_apimessages_TruliooOnboardingRecord
}

input Input_core_apimessages_CreateUserShopPermissionRequest @join__type(graph: RQL) {
  email: String
  permissionLevel: core_apimessages_UserShopPermission_PermissionLevel
}

input Input_core_apimessages_CreditCard @join__type(graph: RQL) {
  """credit_cards.id"""
  id: String
  last4: String
  """Use the brand field instead"""
  cardType: String
  expirationMonth: String
  expirationYear: String
  cardholderName: String
  cardSource: String
  primaryBilling: Boolean
  address: Input_core_apimessages_Address
  needsReverification: Boolean
  primaryForCheckout: Boolean
  brand: Input_core_apimessages_CreditCard_Brand
  display: Input_core_apimessages_CreditCard_Display
  cardBin: String
}

"""
  *
Fields generated by Adyen's secured fields library.
Each key is the name of an individual credit card field (ex: "encryptedExpiryYear"),
and each value is an encrypted string.
Adyen decrypts each field when it reaches their server.
"""
input Input_core_apimessages_CreditCardTokenizedFields @join__type(graph: RQL) {
  encryptedCardNumber: String
  encryptedExpiryMonth: String
  encryptedExpiryYear: String
  encryptedSecurityCode: String
}

input Input_core_apimessages_CreditCard_Brand @join__type(graph: RQL) {
  type: core_apimessages_CreditCard_Brand_Type
  """
  Readable brand name of type. Examples: AMEX is "American Express," MASTERCARD is "MasterCard"
  """
  name: String
}

input Input_core_apimessages_CreditCard_Display @join__type(graph: RQL) {
  """
  Localized card summary. Example: "Visa ending in 1111"
  """
  summary: String
  expirationDate: String
}

input Input_core_apimessages_CrossPlatformListingStatusRequest @join__type(graph: RQL) {
  listingId: String
}

input Input_core_apimessages_CrossPlatformListingStatusResponse @join__type(graph: RQL) {
  status: core_apimessages_CrossPlatformListingStatusResponse_SessionStatus
  ttlSeconds: Int
}

input Input_core_apimessages_CspRowQuery @join__type(graph: RQL) {
  rowTitle: String
  cspSlugs: [String]
  brandSlugs: [String]
  sort: String
  categoryUuids: [String]
}

input Input_core_apimessages_CuratedSet @join__type(graph: RQL) {
  """curated_sets.id"""
  id: String
  title: String
  webLink: Input_core_apimessages_Link
  slug: String
  setType: String
}

input Input_core_apimessages_CuratedSetFeatureRequest @join__type(graph: RQL) {
  """curated_sets.id"""
  id: String
  """products.id"""
  productId: String
}

input Input_core_apimessages_CuratedSetMembership @join__type(graph: RQL) {
  id: String
  curatedSetId: String
  productId: String
}

input Input_core_apimessages_CuratedSetsForListing @join__type(graph: RQL) {
  """products.id"""
  id: String
  curatedSets: [Input_core_apimessages_ListingCuratedSet]
}

input Input_core_apimessages_CuratedSetsRequest @join__type(graph: RQL) {
  """curated_sets.id"""
  ids: [String]
  slugs: [String]
}

input Input_core_apimessages_CuratedSetsResponse @join__type(graph: RQL) {
  curatedSets: [Input_core_apimessages_CuratedSet]
}

input Input_core_apimessages_CustomsInfo @join__type(graph: RQL) {
  signer: String
  certifiedAccuracy: Boolean
  orders: [Input_core_apimessages_OrderCustoms]
}

input Input_core_apimessages_DatadogError @join__type(graph: RQL) {
  key: String
  type: String
  content: String
  context: String
  timestamp: String
}

input Input_core_apimessages_DeactivateTaxIdentificationRequest @join__type(graph: RQL) {
  id: String
}

input Input_core_apimessages_DeactivateTaxIdentificationResponse @join__type(graph: RQL) {
  taxIdentification: Input_core_apimessages_TaxIdentification
  shopId: String
}

input Input_core_apimessages_DeclineFeedbackRequest @join__type(graph: RQL) {
  orderUuid: String
}

input Input_core_apimessages_DeclineFeedbackResponse @join__type(graph: RQL) {
  orderUuid: String
}

input Input_core_apimessages_DeleteAdRequest @join__type(graph: RQL) {
  uuid: String
}

input Input_core_apimessages_DeleteAdResponse @join__type(graph: RQL) {
  ad: Input_core_apimessages_Ad
}

input Input_core_apimessages_DeleteAutoOfferRequest @join__type(graph: RQL) {
  listingId: String
}

input Input_core_apimessages_DeleteAutoOfferResponse @join__type(graph: RQL) {
  autoOffer: Input_core_apimessages_AutoOffer
}

input Input_core_apimessages_DeleteCartItemProtectionPlanRequest @join__type(graph: RQL) {
  cartItemUuid: String
}

input Input_core_apimessages_DeleteCartItemProtectionPlanResponse @join__type(graph: RQL) {
  cartItemUuid: String
}

input Input_core_apimessages_DeleteGearCollectionItemRequest @join__type(graph: RQL) {
  id: String
}

input Input_core_apimessages_DeleteGearCollectionItemResponse @join__type(graph: RQL) {
  gearCollectionItem: Input_core_apimessages_GearCollectionItem
}

input Input_core_apimessages_DeleteMyCreditCardRequest @join__type(graph: RQL) {
  id: String
}

input Input_core_apimessages_DeleteMyCreditCardResponse @join__type(graph: RQL) {
  """Deleted credit card ID"""
  id: String
}

input Input_core_apimessages_DeleteMyFavoriteRequest @join__type(graph: RQL) {
  id: String
}

input Input_core_apimessages_DeleteMyFavoriteResponse @join__type(graph: RQL) {
  errors: [Input_core_apimessages_Error]
  favorite: Input_core_apimessages_Favorite
}

input Input_core_apimessages_DeleteMyFeedbackMessageRequest @join__type(graph: RQL) {
  id: String
}

input Input_core_apimessages_DeleteMyFeedbackMessageResponse @join__type(graph: RQL) {
  id: String
}

input Input_core_apimessages_DeleteMySaleMembershipRequest @join__type(graph: RQL) {
  listingId: String
  saleId: String
}

input Input_core_apimessages_DeleteMySaleMembershipResponse @join__type(graph: RQL) {
  saleMembership: Input_core_apimessages_ListingSaleMembership
}

input Input_core_apimessages_DeleteOrderNotesRequest @join__type(graph: RQL) {
  orderNoteIds: [String]
}

input Input_core_apimessages_DeleteRequest @join__type(graph: RQL) {
  """deprecated, use uuid"""
  id: String
  uuid: String
}

input Input_core_apimessages_DeleteResponse @join__type(graph: RQL) {
  """deprecated, use uuid"""
  id: String
  uuid: String
}

input Input_core_apimessages_DeleteUserShopPermissionRequest @join__type(graph: RQL) {
  userId: String
}

input Input_core_apimessages_DeleteUserShopPermissionResponse @join__type(graph: RQL) {
  id: String
}

input Input_core_apimessages_DelinkUserServiceRequest @join__type(graph: RQL) {
  provider: core_apimessages_UserService_Provider
}

input Input_core_apimessages_DelinkUserServiceResponse @join__type(graph: RQL) {
  _: Boolean
}

input Input_core_apimessages_DigitalListingSendDownloadEmailRequest @join__type(graph: RQL) {
  userId: String
  listingId: String
}

input Input_core_apimessages_DigitalListingSendDownloadEmailResponse @join__type(graph: RQL) {
  success: Boolean
}

input Input_core_apimessages_DraftListingDeleteRequest @join__type(graph: RQL) {
  listingId: String
}

input Input_core_apimessages_DraftListingDeleteResponse @join__type(graph: RQL) {
  listingId: String
}

input Input_core_apimessages_Error @join__type(graph: RQL) {
  message: String
  field: String
  context: String
  errorType: String
}

input Input_core_apimessages_ErrorResponse @join__type(graph: RQL) {
  errors: [Input_core_apimessages_Error]
}

input Input_core_apimessages_EstimateNegotiationSalesTaxRequest @join__type(graph: RQL) {
  amountProduct: Input_core_apimessages_MoneyMinorUnitsEntry
  amountShipping: Input_core_apimessages_MoneyMinorUnitsEntry
  shippingAddressUuid: String
}

input Input_core_apimessages_EstimateNegotiationSalesTaxResponse @join__type(graph: RQL) {
  amountTax: Input_core_apimessages_Money
}

input Input_core_apimessages_EstimateShippingResponse @join__type(graph: RQL) {
  estimatedShipping: Input_core_apimessages_EstimatedShipping
}

input Input_core_apimessages_EstimatedMonthlyPayment @join__type(graph: RQL) {
  """products.id"""
  id: String
  estimatedMonthlyPayment: Input_core_apimessages_Money
  maxTermMonth: Int
  availableTermMonths: [Int]
  lowestAprAtMaxTerm: Int
  zeroPercentFinancingPlan: Boolean
  splitPay: Boolean
  financingProgramSlug: String
}

input Input_core_apimessages_EstimatedMonthlyPaymentsRequest @join__type(graph: RQL) {
  """products.id"""
  ids: [String]
}

input Input_core_apimessages_EstimatedMonthlyPaymentsResponse @join__type(graph: RQL) {
  estimatedMonthlyPayments: [Input_core_apimessages_EstimatedMonthlyPayment]
}

input Input_core_apimessages_EstimatedNewListingPrice @join__type(graph: RQL) {
  id: String
  price: Input_core_apimessages_Money
}

input Input_core_apimessages_EstimatedShipping @join__type(graph: RQL) {
  description: String
  rates: [Input_core_apimessages_ShippingRate]
}

input Input_core_apimessages_EstimatedShippingRequest @join__type(graph: RQL) {
  weight: Float
  length: Float
  width: Float
  height: Float
  fromPostal: String
  metric: Boolean
  toCountrycode: String
  fromCountrycode: String
}

input Input_core_apimessages_ExpeditedShippingAvailableSignal @join__type(graph: RQL) {
  translations: Input_core_apimessages_SignalTranslation
  isValid: Boolean
}

input Input_core_apimessages_ExperimentData @join__type(graph: RQL) {
  name: String
  group: String
}

input Input_core_apimessages_ExperimentsResponse @join__type(graph: RQL) {
  experiments: [Input_reverb_event_Experiment]
}

input Input_core_apimessages_ExportSecondaryUserActivitiesRequest @join__type(graph: RQL) {
  _: Boolean
}

input Input_core_apimessages_ExportSecondaryUserActivitiesResponse @join__type(graph: RQL) {
  enqueued: Boolean
}

input Input_core_apimessages_ExpressSaleCheckout @join__type(graph: RQL) {
  checkoutId: String
  cspId: String
  status: core_apimessages_ExpressSaleCheckout_Status
  expressSaleItemBid: Input_core_apimessages_CSPExpressSaleItemBid
}

input Input_core_apimessages_ExpressSaleCheckoutShowRequest @join__type(graph: RQL) {
  checkoutId: String
}

input Input_core_apimessages_ExpressSaleCheckoutShowResponse @join__type(graph: RQL) {
  expressSaleCheckout: Input_core_apimessages_ExpressSaleCheckout
}

"""
  Favorite represents a row in the follows table (a link between a user and a saved search), and is a newer version of the Follow message.
It can also represent a row from the user_watch_products table (e.g. { id: 1, type: LISTING, favorited: true })
"""
input Input_core_apimessages_Favorite @join__type(graph: RQL) {
  id: String
  title: String
  subtitle: String
  queryParams: String
  searchableType: reverb_feed_SearchableType
  searchableId: String
  feedEnabled: Boolean
  emailEnabled: Boolean
  favorited: Boolean
  link: Input_core_apimessages_Link
  favoriteType: core_apimessages_FavoriteType
  shortSubtitle: String
  queryText: String
}

input Input_core_apimessages_FeedCustomizationResponse @join__type(graph: RQL) {
  articleFollows: [String]
  followGroups: [Input_core_apimessages_FollowGroup]
  follows: [Input_core_apimessages_Follow]
}

"""
  A FeedResult represents one entity that can be displayed in a feed grid/row/etc for the current user.
Listings are the only entity to be supported initially, and other types can be added if needed.
"""
input Input_core_apimessages_FeedResult @join__type(graph: RQL) {
  entityType: core_apimessages_FeedResult_EntityType
  entityId: String
  """
    Source indicates whether the entity was returned because it directly matches
  a saved search, or because it was a recommendation from a direct match, or another reason.
  """
  source: core_apimessages_FeedResult_Source
}

input Input_core_apimessages_Feedback @join__type(graph: RQL) {
  authorUuid: String
  orderTitle: String
  rating: Int
  createdAt: Input_core_apimessages_LegacyTimestamp
  message: String
  type: core_apimessages_Feedback_Type
  recipientUuid: String
  response: Input_core_apimessages_Feedback_Response
  shippingSatisfactory: Input_google_protobuf_BoolValue
  conditionSatisfactory: Input_google_protobuf_BoolValue
  listingLink: Input_core_apimessages_Link
}

input Input_core_apimessages_FeedbackMessage @join__type(graph: RQL) {
  message: String
  id: String
}

input Input_core_apimessages_FeedbackSummariesRequest @join__type(graph: RQL) {
  userIds: [String]
  ids: [String]
  uuids: [String]
}

input Input_core_apimessages_FeedbackSummariesResponse @join__type(graph: RQL) {
  feedbackSummaries: [Input_core_apimessages_FeedbackSummary]
}

input Input_core_apimessages_FeedbackSummary @join__type(graph: RQL) {
  """users.id"""
  userId: String
  receivedCount: Int
  rollingRatingPercentage: Int
}

input Input_core_apimessages_Feedback_Response @join__type(graph: RQL) {
  body: String
  createdAt: Input_core_apimessages_LegacyTimestamp
}

input Input_core_apimessages_FeedbacksResponse @join__type(graph: RQL) {
  feedbacks: [Input_core_apimessages_Feedback]
  total: Int
  offset: Int
  limit: Int
  sellerRating: Float
  buyerRating: Float
}

input Input_core_apimessages_FinalizeAffirmCheckoutPaymentRequest @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
  """Affirm Checkout Token"""
  checkoutToken: String
  displayedAmountOwed: Input_core_apimessages_MoneyMinorUnitsEntry
  """Native app URL param"""
  reverbApp: String
}

input Input_core_apimessages_FinalizeAffirmCheckoutPaymentResponse @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
}

input Input_core_apimessages_FinalizeCardCheckoutPaymentRequest @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
  """Required when selecting an existing vaulted card"""
  creditCardId: String
  """Required for guest checkout or when vaulting a new credit card"""
  creditCard: Input_core_apimessages_FinalizeCardCheckoutPaymentRequest_CreditCardEntry
  displayedAmountOwed: Input_core_apimessages_MoneyMinorUnitsEntry
  """Serialized JSON object"""
  browserInfoJson: String
  accertifyDeviceInfo: Input_core_apimessages_AccertifyDeviceInfo
}

input Input_core_apimessages_FinalizeCardCheckoutPaymentRequest_CreditCardEntry @join__type(graph: RQL) {
  tokenizedFields: Input_core_apimessages_CreditCardTokenizedFields
  cardholderName: String
  address: Input_core_apimessages_AddressEntry
  """amex, visa, etc."""
  brandType: String
  """Last 4 digits of the credit card number"""
  lastDigits: String
  cardBin: String
}

input Input_core_apimessages_FinalizeCardCheckoutPaymentResponse @join__type(graph: RQL) {
  """checkout UUID"""
  id: String
}

input Input_core_apimessages_FinalizePaypalCheckoutPaymentRequest @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
  displayedAmountOwed: Input_core_apimessages_MoneyMinorUnitsEntry
  """Native app URL param"""
  reverbApp: String
  resultConfirmation: core_apimessages_FinalizePaypalCheckoutPaymentRequest_ResultConfirmation
  accertifyDeviceInfo: Input_core_apimessages_AccertifyDeviceInfo
}

input Input_core_apimessages_FinalizePaypalCheckoutPaymentResponse @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
}

input Input_core_apimessages_FinalizeRedirectAuthCheckoutPaymentRequest @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
  """Payment processor result"""
  redirectResult: String
  """Required for native clients using Adyen Checkout v66 and below"""
  legacyResult: Input_core_apimessages_FinalizeRedirectAuthCheckoutPaymentRequest_LegacyResult
}

input Input_core_apimessages_FinalizeRedirectAuthCheckoutPaymentRequest_LegacyResult @join__type(graph: RQL) {
  paRes: String
  md: String
}

input Input_core_apimessages_FinalizeRedirectAuthCheckoutPaymentResponse @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
}

input Input_core_apimessages_FindAddressAutocompleteSuggestionsRequest @join__type(graph: RQL) {
  """loqate container id"""
  container: String
  text: String
}

input Input_core_apimessages_FindAddressAutocompleteSuggestionsResponse @join__type(graph: RQL) {
  suggestions: [Input_core_apimessages_FindAddressAutocompleteSuggestionsResponse_AutocompleteSuggestion]
}

input Input_core_apimessages_FindAddressAutocompleteSuggestionsResponse_AutocompleteSuggestion @join__type(graph: RQL) {
  """loqate address id"""
  id: String
  text: String
  type: core_apimessages_FindAddressAutocompleteSuggestionsResponse_SuggestionType
}

input Input_core_apimessages_FindFavoriteRequest @join__type(graph: RQL) {
  listingsSearchRequest: Input_reverb_search_ListingsSearchRequest
  shopId: String
  shopSlug: String
}

input Input_core_apimessages_FindFavoriteResponse @join__type(graph: RQL) {
  isFavorite: Boolean
  canFavorite: Boolean
  favorite: Input_core_apimessages_Favorite
}

input Input_core_apimessages_FindFollowResponse @join__type(graph: RQL) {
  following: Boolean
  followers: Input_core_apimessages_Followers
  Links: Input_core_apimessages_FollowLinks
  follow: Input_core_apimessages_Follow
  display: String
  header: String
  savedSearchType: String
  subtitle: String
  title: String
  alert: Input_core_apimessages_FollowAlert
  id: String
  queryParams: String
  followedSubcategories: [String]
  hidden: Boolean
}

input Input_core_apimessages_FlagProductReviewRequest @join__type(graph: RQL) {
  productReviewId: String
  reason: core_apimessages_FlagProductReviewRequest_Reason
}

input Input_core_apimessages_FlagProductReviewResponse @join__type(graph: RQL) {
  """Created Flag ID"""
  id: String
}

input Input_core_apimessages_FlatRateShippingOption @join__type(graph: RQL) {
  carrier: String
  displayTitle: String
  displayName: String
  optionValue: String
  displayDimensions: String
  maximumPounds: Int
  displayPosition: Int
}

input Input_core_apimessages_Follow @join__type(graph: RQL) {
  following: Boolean
  header: String
  savedSearchType: String
  subtitle: String
  title: String
  Links: Input_core_apimessages_FollowLinks
  alert: Input_core_apimessages_FollowAlert
  """follow.id"""
  id: String
  queryParams: String
  followedSubcategories: [String]
}

input Input_core_apimessages_FollowAlert @join__type(graph: RQL) {
  type: String
}

input Input_core_apimessages_FollowGroup @join__type(graph: RQL) {
  calloutLinkText: String
  description: String
  follows: [Input_core_apimessages_Follow]
  title: String
  Links: Input_core_apimessages_FollowGroupLinks
}

input Input_core_apimessages_FollowGroupLinks @join__type(graph: RQL) {
  callout: Input_core_apimessages_Link
}

input Input_core_apimessages_FollowLinks @join__type(graph: RQL) {
  self: Input_core_apimessages_Link
  alert: Input_core_apimessages_Link
  remove: Input_core_apimessages_Link
  search: Input_core_apimessages_Link
}

input Input_core_apimessages_FollowQueryParams @join__type(graph: RQL) {
  category: String
  categoryUuid: String
  condition: [String]
  countryOfOrigin: String
  """canonical_products.id"""
  cpIds: [Int]
  """curated_sets.id"""
  curatedSetId: Int
  """curated_searches.id"""
  curatedSearchId: Int
  currency: String
  decade: String
  finish: String
  handmade: String
  itemCity: String
  itemRegion: String
  itemCountry: String
  itemState: String
  make: [String]
  model: String
  priceMax: String
  priceMin: String
  productType: String
  productTypeUuid: String
  query: String
  yearMax: String
  yearMin: String
  """shops.id"""
  shopId: Int
  acceptsGiftCards: Boolean
  preferredSeller: Boolean
  listingType: String
  shipsTo: String
  acceptsPaymentPlans: Boolean
  freeShipping: Boolean
  personalProfile: String
  freeExpeditedShipping: Boolean
  zeroPercentFinancing: Boolean
  decades: [String]
  outlet: Boolean
}

input Input_core_apimessages_Followers @join__type(graph: RQL) {
  count: Int
  display: String
}

input Input_core_apimessages_FormSelectCategoriesRequest @join__type(graph: RQL) {
  entityId: String
  entityType: core_apimessages_FormSelectCategoriesRequest_FormSelectEntityType
}

input Input_core_apimessages_FormSelectCategoriesResponse @join__type(graph: RQL) {
  categories: [Input_core_apimessages_FormSelectCategory]
}

input Input_core_apimessages_FormSelectCategory @join__type(graph: RQL) {
  uuid: String
  name: String
  subcategories: [Input_core_apimessages_FormSelectCategory]
}

input Input_core_apimessages_FreeExpeditedShippingSignal @join__type(graph: RQL) {
  translations: Input_core_apimessages_SignalTranslation
  isValid: Boolean
}

input Input_core_apimessages_FreeStandardShippingSignal @join__type(graph: RQL) {
  translations: Input_core_apimessages_SignalTranslation
  freeShippingThresholdRequirementsMet: Boolean
  isValid: Boolean
}

input Input_core_apimessages_GearCollectionItem @join__type(graph: RQL) {
  """gear_collection_item.id"""
  id: String
  deleted: Boolean
  title: String
  make: String
  model: String
  finish: String
  year: String
  price: Input_core_apimessages_Money
  description: String
  notes: String
  canonicalProductId: String
  ownerCost: Input_core_apimessages_Money
  serialNumber: String
  created: Boolean
  updated: Boolean
  condition: Input_core_apimessages_Condition
  tags: [Input_core_apimessages_GearCollectionItemTag]
  hideListingPhotos: Boolean
  hideListingDescription: Boolean
  seedId: String
  seedType: core_apimessages_GearCollectionItem_SeedType
  subcategoryUuids: [String]
  state: core_apimessages_GearCollectionItem_State
}

input Input_core_apimessages_GearCollectionItemEntry @join__type(graph: RQL) {
  """gear_collection_item.id"""
  id: String
  title: String
  make: String
  model: String
  finish: String
  year: String
  price: Input_core_apimessages_Money
  description: String
  notes: String
  categoryUuids: [String]
  canonicalProductId: String
  seedId: String
  seedType: core_apimessages_GearCollectionItem_SeedType
  photos: [Input_core_apimessages_ImageEntry]
  categoryRootUuid: String
  ownerCost: Input_core_apimessages_Money
  serialNumber: String
  conditionSlug: String
  tags: [Input_core_apimessages_GearCollectionItemTag]
  hideListingPhotos: Boolean
  hideListingDescription: Boolean
  quickCreateItemFromSeed: Boolean
  source: core_apimessages_GearCollectionItemEntry_Source
}

input Input_core_apimessages_GearCollectionItemTag @join__type(graph: RQL) {
  id: String
  name: String
}

input Input_core_apimessages_GearCollectionSettingResponse @join__type(graph: RQL) {
  id: String
  autoAddOrders: Boolean
}

input Input_core_apimessages_GearCollectionSettingsResponse @join__type(graph: RQL) {
  id: String
  autoAddOrders: Boolean
}

input Input_core_apimessages_GenerateAdminReportRequest @join__type(graph: RQL) {
  reportName: String
  startDate: String
  endDate: String
}

input Input_core_apimessages_GenerateAdminReportResponse @join__type(graph: RQL) {
  reportEnqueued: Boolean
}

input Input_core_apimessages_GetMyFavoriteSavedSearchesRequest @join__type(graph: RQL) {
  offset: Int
  limit: Int
}

input Input_core_apimessages_GetMyFavoriteSavedSearchesResponse @join__type(graph: RQL) {
  favorites: [Input_core_apimessages_Favorite]
  total: Int
  limit: Int
  offset: Int
}

"""copied from common.proto which is also used by data team"""
input Input_core_apimessages_GoogleShoppingClick @join__type(graph: RQL) {
  listingId: String
  comparisonShoppingPageId: String
  """/ ISO8601"""
  timestamp: String
  origin: String
  """This field is different than the one in common.proto"""
  expiration: String
}

input Input_core_apimessages_GreatValueSignal @join__type(graph: RQL) {
  translations: Input_core_apimessages_SignalTranslation
  isValid: Boolean
}

input Input_core_apimessages_GuestCheckoutUserEntry @join__type(graph: RQL) {
  firstName: String
  lastName: String
  email: String
  consentToAdData: Boolean
  consentToAdStorage: Boolean
  consentToAdPersonalization: Boolean
  consentToAnalyticsStorage: Boolean
}

input Input_core_apimessages_GuestCheckoutVerifyShopperRequest @join__type(graph: RQL) {
  checkoutUuid: String
  checkoutId: String
  totalPrice: Input_core_apimessages_Money
  results: Input_core_apimessages_AdyenVerifyShopperResults
  cartItemAttributes: [Input_core_apimessages_CartItemAttributes]
}

input Input_core_apimessages_HomepageAdData @join__type(graph: RQL) {
  ad: Input_core_apimessages_Ad
  adZones: [Input_core_apimessages_AdZone]
}

input Input_core_apimessages_HomepageComponent @join__type(graph: RQL) {
  componentType: core_apimessages_HomepageComponent_ComponentType
  title: String
  subtitle: String
  ctaUrl: String
  ctaText: String
  slug: String
  listings: [Input_core_apimessages_ListingData]
  componentIdentifier: core_apimessages_HomepageComponent_ComponentIdentifier
  searches: [Input_core_apimessages_SearchData]
  adComponent: Input_core_apimessages_HomepageAdData
}

input Input_core_apimessages_HomepageNotification @join__type(graph: RQL) {
  updateId: String
  type: String
  typeText: String
  iconColor: String
  descriptionText: String
  calloutText: String
  followText: String
  deadlineText: String
  iconUrl: String
  imageUrl: String
  ctaUrl: String
  id: String
  dismissed: Boolean
  typeColor: core_apimessages_NotificationColor
}

input Input_core_apimessages_HomepageRequest @join__type(graph: RQL) {
  affinitySlugs: [String]
  adUserContext: Input_core_apimessages_AdUserContext
}

input Input_core_apimessages_HomepageResponse @join__type(graph: RQL) {
  components: [Input_core_apimessages_HomepageComponent]
}

input Input_core_apimessages_Image @join__type(graph: RQL) {
  source: String
  """parent postgres id (polymorphic with 'item_type')"""
  itemId: String
  itemType: String
  """attachinary_files.public_id (cloudinary string)"""
  publicId: String
  version: String
  """image postgres id"""
  id: String
  fallbackType: core_apimessages_Image_FallbackType
  transformation: Input_core_apimessages_ImageEntry_Transformation
  width: Int
  height: Int
  namedTransform: core_apimessages_NamedImageTransforms
}

input Input_core_apimessages_ImageAdCreative @join__type(graph: RQL) {
  title: String
  titleColor: String
  subtitle: String
  subtitleColor: String
  ctaText: String
  ctaHref: String
  ctaTextColor: String
  ctaButtonColor: String
  backgroundImage: String
  mobileBackgroundImage: String
  backgroundColor: String
  overlayImage: String
  description: String
  hideAdCallout: Boolean
  partnershipText: String
  backgroundColors: [String]
  cspRowQuery: Input_core_apimessages_CspRowQuery
}

input Input_core_apimessages_ImageEntry @join__type(graph: RQL) {
  id: String
  publicId: String
  version: String
  width: Int
  height: Int
  format: String
  resourceType: String
  originalFilename: String
  transformation: Input_core_apimessages_ImageEntry_Transformation
}

input Input_core_apimessages_ImageEntry_Transformation @join__type(graph: RQL) {
  width: String
  height: String
  x: String
  y: String
  crop: String
  angle: Int
}

input Input_core_apimessages_ImageRequest @join__type(graph: RQL) {
  id: String
  uuid: String
  slug: String
  type: String
  transform: String
  scope: String
  limit: Int
  namedTransform: core_apimessages_NamedImageTransforms
}

input Input_core_apimessages_ImagesResponse @join__type(graph: RQL) {
  images: [Input_core_apimessages_ItemImages]
}

input Input_core_apimessages_InOtherCartsSignal @join__type(graph: RQL) {
  isValid: Boolean
  translations: Input_core_apimessages_SignalTranslation
}

input Input_core_apimessages_InformActThresholdStatus @join__type(graph: RQL) {
  id: String
  isCompliant: Boolean
  hasValidBankAccount: Boolean
  hasValidTaxId: Boolean
  hasCompletedSellerVerification: Boolean
  thresholdCrossedAt: Timestamp
  bankAccountVerifiedDate: Timestamp
  isPaypalOnly: Boolean
}

input Input_core_apimessages_InternationalTaxProfile @join__type(graph: RQL) {
  name: String
  tinType: String
  tinMask: String
  dateOfBirth: String
  address: Input_core_apimessages_Address
  id: String
  updatedAt: Timestamp
}

input Input_core_apimessages_ItemImages @join__type(graph: RQL) {
  """either a uuid or id, depending on what's present in ImagesRequest"""
  id: String
  images: [Input_core_apimessages_Image]
}

input Input_core_apimessages_ItemSearchFilterPresets @join__type(graph: RQL) {
  """postgres id (polymorphic with 'collection_type')"""
  collectionId: String
  collectionType: String
  presets: [Input_core_apimessages_SearchFilterPreset]
  collectionSlug: String
}

input Input_core_apimessages_LayawayTerms @join__type(graph: RQL) {
  name: String
  percentDown: Int
  timePeriod: Input_google_protobuf_Duration
}

"""
  Google "fixed" a bug where timestamps should serialize as
a JSON string. We don't rely on this in many places, but this
type should be compatible without running into issues with the

WKT/upb exception here:
https://github.com/protocolbuffers/upb/blob/9e1f89ef2c2cf4f9fe98bc4afe651ddfe7c575ab/upb/json/printer.c#L1252

Represents seconds of UTC time since Unix epoch
1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
9999-12-31T23:59:59Z inclusive.
"""
input Input_core_apimessages_LegacyTimestamp @join__type(graph: RQL) {
  """Yes we'll have a 2038 problem"""
  seconds: Int
  """
    Non-negative fractions of a second at nanosecond resolution. Negative
  second values with fractions must still have non-negative nanos values
  that count forward in time. Must be from 0 to 999,999,999
  inclusive.
  """
  nanos: Int
}

input Input_core_apimessages_Link @join__type(graph: RQL) {
  href: String
  """rel path for use in web routing"""
  path: String
}

input Input_core_apimessages_Listing @join__type(graph: RQL) {
  """products.id"""
  id: String
  title: String
  merchandisingUuid: String
  price: Input_core_apimessages_Money
  """shops.id"""
  shopId: String
  """users.id"""
  sellerId: String
  """users.uuid"""
  sellerUuid: String
  hasInventory: Boolean
  inventory: Int
  shopUuid: String
  """includes product_type.uuids"""
  categoryUuids: [String]
  state: String
  condition: Input_core_apimessages_Condition
  slug: String
  listingType: core_apimessages_Listing_ListingType
  publishedAt: Input_core_apimessages_LegacyTimestamp
  description: String
  merchandisingType: String
  countryOfOrigin: String
  finish: String
  make: String
  model: String
  """product_types.id"""
  productTypeId: String
  year: String
  """canonical_products.id"""
  canonicalProductId: String
  """postgres id (polymorphic with 'seed_type')"""
  seedId: String
  seedType: core_apimessages_Listing_SeedType
  sku: String
  stateDescription: String
  taxIncluded: Boolean
  priceGuideUuid: String
  cspUuid: String
  """auctions.uuid"""
  currentAuctionId: String
  salePrice: Input_core_apimessages_Money
  categoryRootUuid: String
  taxIncludedHint: String
  bumped: Boolean
  upc: String
  exclusiveChannel: String
  brandSlug: String
  soldAsIs: Boolean
  bumpEligible: Boolean
  propSixtyFiveWarning: String
  propSixtyFiveWarningImg: Input_core_apimessages_Link
  maxBuyerQuantity: Int
  currency: String
  cspId: String
  """
  Total quantity that a buyer can set from a listing to a cart item. This value will be zero if the listing is not inventoried, or if an inventoried listing is out of stock.
  """
  allowedBuyerQuantity: Int
  sameDayShippingIneligible: Boolean
  overriddenAttributes: [String]
  combinedShippingParent: Boolean
  createdAt: Input_core_apimessages_LegacyTimestamp
  subcategoryUuids: [String]
  usOutlet: Boolean
  offersEnabled: Boolean
}

input Input_core_apimessages_ListingAffirmZeroPercentFinancingConfiguration @join__type(graph: RQL) {
  isEligible: Boolean
  isEnabled: Boolean
}

input Input_core_apimessages_ListingAutoOfferEligibility @join__type(graph: RQL) {
  isEligible: Boolean
}

input Input_core_apimessages_ListingBuyerOfferEligibility @join__type(graph: RQL) {
  isEligible: Boolean
}

input Input_core_apimessages_ListingCertifiedPreOwned @join__type(graph: RQL) {
  title: String
  description: String
  tooltipDescription: String
  badgeIconUrl: String
  brandName: String
  pageUrl: String
  lightModeBrandIconUrl: String
  darkModeBrandIconUrl: String
}

input Input_core_apimessages_ListingCorrectionRequest @join__type(graph: RQL) {
  listingId: String
  message: String
}

input Input_core_apimessages_ListingCorrectionResponse @join__type(graph: RQL) {
  _: Boolean
}

input Input_core_apimessages_ListingCounts @join__type(graph: RQL) {
  """products.id"""
  id: String
  views: Int
  watchers: Int
  offers: Int
  inBuyerCarts: Int
  viewsDisplay: String
  watchersDisplay: String
  offersDisplay: String
  inBuyerCartsDisplay: String
  downloadCountDisplay: String
  downloadCount: Int
}

input Input_core_apimessages_ListingCountsRequest @join__type(graph: RQL) {
  ids: [String]
}

input Input_core_apimessages_ListingCountsResponse @join__type(graph: RQL) {
  listings: [Input_core_apimessages_ListingCounts]
}

input Input_core_apimessages_ListingCuratedSet @join__type(graph: RQL) {
  id: String
  slug: String
  uuid: String
  featuredInSet: Boolean
  name: String
  setType: String
}

input Input_core_apimessages_ListingData @join__type(graph: RQL) {
  title: String
  condition: String
  price: String
  strikeThroughPrice: String
  discountDescription: String
  imageUrl: String
  ctaUrl: String
  isWatching: Boolean
  isInCart: Boolean
  eyebrow: core_apimessages_ListingData_Disruptor
  disruptor: core_apimessages_ListingData_Disruptor
  countryName: String
  id: String
  savingsText: String
  conditionIconUrl: String
}

input Input_core_apimessages_ListingDigitalDetails @join__type(graph: RQL) {
  releaseNotes: String
  systemRequirements: String
  installationInstructions: String
  rollingDownloadCount: Int
  variants: [Input_core_apimessages_ListingDigitalVariant]
  supportedFormats: [Input_core_apimessages_ListingSupportedFormat]
}

input Input_core_apimessages_ListingDigitalVariant @join__type(graph: RQL) {
  id: String
  fileUrl: String
  downloadText: String
  fileSize: String
  operatingSystems: [String]
  fileTypes: [String]
}

"""For PUT/POST submissions"""
input Input_core_apimessages_ListingEntry @join__type(graph: RQL) {
  id: String
  sku: String
  year: String
  countryOfOrigin: String
  seedId: String
  seedType: core_apimessages_Listing_SeedType
  categoryRootUuid: String
  categoryUuids: [String]
  localizedContents: [Input_core_apimessages_LocalizedListingContent]
  handmade: Boolean
  traits: [Input_core_apimessages_Trait]
  conditionSlug: String
  hasInventory: Boolean
  inventory: Int
  upc: String
  upcDoesNotApply: Boolean
  videoLinkUrl: String
  photos: [Input_core_apimessages_ImageEntry]
  shippingProfileId: String
  offersLocalPickup: Boolean
  shippingRates: [Input_core_apimessages_ShippingRates]
  carrierCalculatedPackage: Input_core_apimessages_ShippingLabelPackage
  prefersReverbShippingLabel: Boolean
  price: Input_core_apimessages_Money
  sellerCost: Input_core_apimessages_Money
  soldAsIs: Boolean
  offersEnabled: Boolean
  sameDayShippingIneligible: Boolean
  preorderInfo: Input_core_apimessages_PreorderInfoEntry
  taxExempt: Boolean
  scheduledPriceDrops: [Input_core_apimessages_ScheduledPriceDropEntry]
  sellerReportedMap: Input_core_apimessages_Money
}

input Input_core_apimessages_ListingExpressPay @join__type(graph: RQL) {
  """products.id"""
  id: String
  """
  Initial value for display based on listing price and shipping. May be different than the final value.
  """
  estimatedTotal: Input_core_apimessages_Money
  """Google Pay Config for a listing."""
  googlePay: Input_core_apimessages_CheckoutGooglePayDetails
  """Encoded value such as "RL-123" to use to start a checkout"""
  checkoutBundlingId: String
  paypal: Input_core_apimessages_CheckoutPaypalDetails
}

input Input_core_apimessages_ListingInCartCount @join__type(graph: RQL) {
  count: Input_google_protobuf_Int32Value
}

input Input_core_apimessages_ListingInUserCart @join__type(graph: RQL) {
  listingId: String
  inCart: Boolean
}

input Input_core_apimessages_ListingPriceRecommendationsRequest @join__type(graph: RQL) {
  listingIds: [String]
  countryCode: String
  currency: String
}

input Input_core_apimessages_ListingPriceRecommendationsResponse @join__type(graph: RQL) {
  priceRecommendations: [Input_core_apimessages_PriceRecommendation]
}

input Input_core_apimessages_ListingPricing @join__type(graph: RQL) {
  """products.id"""
  id: String
  buyerPrice: Input_core_apimessages_Money
  originalPrice: Input_core_apimessages_Money
  ribbon: Input_core_apimessages_Ribbon
  typicalNewPriceDisplay: Input_core_apimessages_TypicalNewPriceDisplay
  originalPriceDescription: String
}

input Input_core_apimessages_ListingSale @join__type(graph: RQL) {
  sale: Input_core_apimessages_Sale
  totalLiveListings: Int
  isListingInSale: Boolean
  isListingEligible: Boolean
}

input Input_core_apimessages_ListingSaleMembership @join__type(graph: RQL) {
  sale: Input_core_apimessages_Sale
  totalLiveListings: Int
  isListingInSale: Boolean
  isListingEligible: Boolean
  listingId: String
}

input Input_core_apimessages_ListingSales @join__type(graph: RQL) {
  reverbSales: [Input_core_apimessages_ListingSale]
  sellerSales: [Input_core_apimessages_ListingSale]
}

input Input_core_apimessages_ListingSalesMemberships @join__type(graph: RQL) {
  reverbSalesMemberships: [Input_core_apimessages_ListingSaleMembership]
  sellerSalesMemberships: [Input_core_apimessages_ListingSaleMembership]
}

input Input_core_apimessages_ListingSignals @join__type(graph: RQL) {
  id: String
  onSaleSignal: Input_core_apimessages_OnSaleSignal
  paymentPlanSignal: Input_core_apimessages_PaymentPlanSignal
  priceDropSignal: Input_core_apimessages_PriceDropSignal
  lowStockSignal: Input_core_apimessages_LowStockSignal
  predictedToSellSoonSignal: Input_core_apimessages_PredictedToSellSoonSignal
  greatValueSignal: Input_core_apimessages_GreatValueSignal
  sharedSignalData: Input_core_apimessages_SharedSignalData
  returnPolicySignal: Input_core_apimessages_ReturnPolicySignal
  buyWithConfidenceSignal: Input_core_apimessages_BuyWithConfidenceSignal
  secureCheckoutSignal: Input_core_apimessages_SecureCheckoutSignal
  availableNearbyForPickupSignal: Input_core_apimessages_AvailableNearbyForPickupSignal
  expeditedShippingAvailableSignal: Input_core_apimessages_ExpeditedShippingAvailableSignal
  freeExpeditedShippingSignal: Input_core_apimessages_FreeExpeditedShippingSignal
  freeStandardShippingSignal: Input_core_apimessages_FreeStandardShippingSignal
  newListingSignal: Input_core_apimessages_NewListingSignal
  """deprecated"""
  shipsSoonSignal: Input_core_apimessages_ShipsSoonSignal
  availableForPickupSignal: Input_core_apimessages_AvailableForPickupSignal
  localPickupOnlySignal: Input_core_apimessages_LocalPickupOnlySignal
  inOtherCartsSignal: Input_core_apimessages_InOtherCartsSignal
  rareGearSignal: Input_core_apimessages_RareGearSignal
}

input Input_core_apimessages_ListingSpec @join__type(graph: RQL) {
  productSpecs: [Input_core_apimessages_ProductSpec]
}

input Input_core_apimessages_ListingSupportedFormat @join__type(graph: RQL) {
  operatingSystem: String
  fileTypes: [String]
}

input Input_core_apimessages_ListingUserView @join__type(graph: RQL) {
  """True if the current user has recently viewed this item"""
  isRecentlyViewed: Boolean
}

input Input_core_apimessages_ListingValidForPublish @join__type(graph: RQL) {
  isValid: Boolean
  errors: [Input_core_apimessages_Error]
}

input Input_core_apimessages_ListingsCuratedSetsRequest @join__type(graph: RQL) {
  ids: [String]
  curatedSetSlugs: [String]
}

input Input_core_apimessages_ListingsCuratedSetsResponse @join__type(graph: RQL) {
  curatedSetsForListings: [Input_core_apimessages_CuratedSetsForListing]
}

input Input_core_apimessages_ListingsInUserCartRequest @join__type(graph: RQL) {
  """product.id"""
  listingIds: [String]
}

input Input_core_apimessages_ListingsInUserCartResponse @join__type(graph: RQL) {
  listings: [Input_core_apimessages_ListingInUserCart]
}

input Input_core_apimessages_ListingsOrderStatsRequest @join__type(graph: RQL) {
  listingIds: [String]
}

input Input_core_apimessages_ListingsOrderStatsResponse @join__type(graph: RQL) {
  orderStats: [Input_core_apimessages_OrderStats]
}

input Input_core_apimessages_ListingsPricingRequest @join__type(graph: RQL) {
  ids: [String]
}

input Input_core_apimessages_ListingsPricingResponse @join__type(graph: RQL) {
  listings: [Input_core_apimessages_ListingPricing]
}

input Input_core_apimessages_ListingsRequest @join__type(graph: RQL) {
  Aid: String
  utmCompaign: String
  """products.id"""
  ids: [String]
}

input Input_core_apimessages_ListingsResponse @join__type(graph: RQL) {
  listings: [Input_core_apimessages_Listing]
}

input Input_core_apimessages_ListingsSignalsRequest @join__type(graph: RQL) {
  ids: [String]
}

input Input_core_apimessages_ListingsSignalsResponse @join__type(graph: RQL) {
  listingsSignals: [Input_core_apimessages_ListingSignals]
}

input Input_core_apimessages_ListingsSpecsRequest @join__type(graph: RQL) {
  ids: [String]
}

input Input_core_apimessages_ListingsSpecsResponse @join__type(graph: RQL) {
  specs: [Input_core_apimessages_ListingSpec]
}

input Input_core_apimessages_ListingsValidForPublishRequest @join__type(graph: RQL) {
  listingIds: [String]
}

input Input_core_apimessages_ListingsValidForPublishResponse @join__type(graph: RQL) {
  listingsValidForPublish: [Input_core_apimessages_ListingValidForPublish]
}

input Input_core_apimessages_LocalPickupOnlySignal @join__type(graph: RQL) {
  translations: Input_core_apimessages_SignalTranslation
  isValid: Boolean
}

input Input_core_apimessages_LocalizationSettings @join__type(graph: RQL) {
  locale: String
  currency: String
  shippingRegion: String
}

input Input_core_apimessages_LocalizedListingContent @join__type(graph: RQL) {
  locale: String
  make: String
  model: String
  finish: String
  title: String
  description: String
  prop65Warning: String
  defaultForShop: Boolean
}

input Input_core_apimessages_LoginMyPacklinkAccountRequest @join__type(graph: RQL) {
  email: String
  password: String
  countryCode: String
}

input Input_core_apimessages_LoginMyPacklinkAccountResponse @join__type(graph: RQL) {
  shopId: String
}

input Input_core_apimessages_LowStockSignal @join__type(graph: RQL) {
  isValid: Boolean
  translations: Input_core_apimessages_SignalTranslation
}

input Input_core_apimessages_MarkOrderAsReceivedRequest @join__type(graph: RQL) {
  orderId: String
}

input Input_core_apimessages_MarkOrderAsReceivedResponse @join__type(graph: RQL) {
  orderId: String
}

input Input_core_apimessages_MeResponse @join__type(graph: RQL) {
  """users.id"""
  id: String
  uuid: String
  shopUuid: String
  admin: Boolean
  status: core_apimessages_UserStatus
  shopId: String
  shopSlug: String
  requireOptIn: Boolean
  profileSlug: String
  """True when this user has a single orderBundle, otherwise false."""
  firstTimeBuyer: Boolean
}

input Input_core_apimessages_Measurement @join__type(graph: RQL) {
  value: String
  unit: String
}

input Input_core_apimessages_Money @join__type(graph: RQL) {
  amount: String
  amountCents: Int
  currency: String
  symbol: String
  display: String
}

"""
For POST/PUT API requests for major units, suitable for user text field input
"""
input Input_core_apimessages_MoneyMajorUnitsEntry @join__type(graph: RQL) {
  amount: String
  currency: String
}

"""For POST/PUT API requests where minor units (cents) are known"""
input Input_core_apimessages_MoneyMinorUnitsEntry @join__type(graph: RQL) {
  amountCents: Int
  currency: String
}

input Input_core_apimessages_MosaicTile @join__type(graph: RQL) {
  id: String
  url: String
  imageTitle: String
  imageSubtitle: String
  imageUrl: String
  contentSponsorship: Input_core_apimessages_ContentSponsorship
  position: core_apimessages_MosaicTilePosition
}

input Input_core_apimessages_MosaicTilesResponse @join__type(graph: RQL) {
  mosaicTiles: [Input_core_apimessages_MosaicTile]
}

input Input_core_apimessages_MyAddressesRequest @join__type(graph: RQL) {
  addressType: core_apimessages_MyAddressType
}

input Input_core_apimessages_MyAddressesResponse @join__type(graph: RQL) {
  addresses: [Input_core_apimessages_Address]
}

input Input_core_apimessages_MyAffirmCuratedSetMembershipRequest @join__type(graph: RQL) {
  productId: String
}

input Input_core_apimessages_MyAvailableActionsIndexResponse @join__type(graph: RQL) {
  availableActions: [Input_core_apimessages_AvailableAction]
}

input Input_core_apimessages_MyBuyerCouponsResponse @join__type(graph: RQL) {
  shopCampaignCoupons: [Input_core_apimessages_ShopCampaignCoupon]
}

input Input_core_apimessages_MyCartItemBundlesIndexResponse @join__type(graph: RQL) {
  bundles: [Input_core_apimessages_CartItemBundle]
}

input Input_core_apimessages_MyCartItemsIndexResponse @join__type(graph: RQL) {
  cartItems: [Input_core_apimessages_CartItem]
}

input Input_core_apimessages_MyCreditCardsResponse @join__type(graph: RQL) {
  creditCards: [Input_core_apimessages_CreditCard]
}

input Input_core_apimessages_MyCuratedSetMembershipRequest @join__type(graph: RQL) {
  setType: core_apimessages_CuratedSet_SetType
  productId: String
}

input Input_core_apimessages_MyCuratedSetMembershipResponse @join__type(graph: RQL) {
  curatedSetMembership: Input_core_apimessages_CuratedSetMembership
}

input Input_core_apimessages_MyDirectCheckoutProfileRequest @join__type(graph: RQL) {
  _: Boolean
}

input Input_core_apimessages_MyDirectCheckoutProfileResponse @join__type(graph: RQL) {
  nameOnAccount: String
  maskedNameSummary: String
  bankName: String
  currency: String
  countryCode: String
  payoutMethod: String
  hasAcceptedReverbBankTerms: Boolean
  profileErrors: [String]
  plaidAccountId: String
}

input Input_core_apimessages_MyFeedSearchRequest @join__type(graph: RQL) {
  """
    Optional listings search filters. The following fields are ignored:
  - limit/offset: filters are optional, but pagination is not optional. Use the top level request proto fields instead.
  - shipping_region_code: uses the `X-Shipping-Region` HTTP request header instead.
  - locale: uses the `Accept-Language` HTTP request header instead (which will default to English).
  - item_region: uses the `X-Item-Region` HTTP request header instead.
  - experiments: uses the `X-Experiments` HTTP request header instead.
  """
  listingsSearchRequest: Input_reverb_search_ListingsSearchRequest
  limit: Int
  offset: Int
}

"""
  Similar to a `reverb.search.SearchResponse` message,
but instead of a `resultIds` field, it has `results`, which contains ids and metadata:
{
  "results": [{ "entityType": "LISTING", "entityId": "1", "source": "SAVED_SEARCH" }, ...],
  ...
}
"""
input Input_core_apimessages_MyFeedSearchResponse @join__type(graph: RQL) {
  results: [Input_core_apimessages_FeedResult]
  filters: [Input_reverb_search_Filter]
  total: Int
  offset: Int
  limit: Int
}

input Input_core_apimessages_MyFeedbackMessagesRequest @join__type(graph: RQL) {
  _: Boolean
}

input Input_core_apimessages_MyFeedbackMessagesResponse @join__type(graph: RQL) {
  feedbackMessages: [Input_core_apimessages_FeedbackMessage]
}

input Input_core_apimessages_MyHomepageNotificationsRequest @join__type(graph: RQL) {
  limit: Int
  imageType: core_apimessages_IconImageType
  multiClientExperiments: [Input_core_apimessages_ExperimentData]
}

input Input_core_apimessages_MyHomepageNotificationsResponse @join__type(graph: RQL) {
  homepageNotifications: [Input_core_apimessages_HomepageNotification]
  errors: [Input_core_apimessages_Error]
}

input Input_core_apimessages_MyMessage @join__type(graph: RQL) {
  id: String
  createdAt: Timestamp
  body: String
  read: Boolean
  conversationId: String
}

input Input_core_apimessages_MyMessagesRequest @join__type(graph: RQL) {
  limit: Int
  unrepliedOnly: Boolean
}

input Input_core_apimessages_MyMessagesResponse @join__type(graph: RQL) {
  messages: [Input_core_apimessages_MyMessage]
}

input Input_core_apimessages_MyPacklinkAccountStatusResponse @join__type(graph: RQL) {
  account: Input_core_apimessages_PacklinkAccount
}

input Input_core_apimessages_MyPayoutBalancesResponse @join__type(graph: RQL) {
  payoutBalances: [Input_core_apimessages_Money]
}

input Input_core_apimessages_MyReverbCreditsResponse @join__type(graph: RQL) {
  reverbCredits: [Input_core_apimessages_Money]
}

input Input_core_apimessages_MySalesResponse @join__type(graph: RQL) {
  reverbSales: [Input_core_apimessages_Sale]
  sellerSales: [Input_core_apimessages_Sale]
}

input Input_core_apimessages_MyShippingProfile @join__type(graph: RQL) {
  id: String
  name: String
  categoryUuids: [String]
  localPickup: Boolean
  offersIncrementalRates: Boolean
}

input Input_core_apimessages_MyShopBadgesResponse @join__type(graph: RQL) {
  shopBadges: [Input_core_apimessages_ShopBadge]
}

input Input_core_apimessages_MyShopBumpStats @join__type(graph: RQL) {
  spent: Input_core_apimessages_Money
  sales: Input_core_apimessages_Money
  percentageSpent: Int
  views: Int
}

input Input_core_apimessages_MyShopBumpStatsRequest @join__type(graph: RQL) {
  timePeriod: String
}

input Input_core_apimessages_MyShopBumpStatsResponse @join__type(graph: RQL) {
  brandNew: Input_core_apimessages_MyShopBumpStats
  used: Input_core_apimessages_MyShopBumpStats
}

input Input_core_apimessages_MyShopCampaign @join__type(graph: RQL) {
  id: String
  active: Boolean
  code: String
  campaignType: core_apimessages_MyShopCampaign_CampaignType
  discountPercent: Int
  discountAmount: Input_core_apimessages_Money
  minPurchaseAmount: Input_core_apimessages_Money
  maxDiscountAmount: Input_core_apimessages_Money
  unlimitedUse: Boolean
  applyToNewConditions: Boolean
  applyToUsedConditions: Boolean
  applyToBStockConditions: Boolean
  useRetroactiveSends: Boolean
  discountSummary: String
  totalCouponCount: Int
  redeemedCouponCount: Int
}

"""For PUT/POST submissions"""
input Input_core_apimessages_MyShopCampaignEntry @join__type(graph: RQL) {
  id: String
  active: Boolean
  code: String
  campaignType: core_apimessages_MyShopCampaign_CampaignType
  discountPercent: Int
  """in shop currency"""
  discountAmountInput: String
  """in shop currency"""
  minPurchaseAmountInput: String
  """in shop currency"""
  maxDiscountAmountInput: String
  unlimitedUse: Boolean
  applyToNewConditions: Boolean
  applyToUsedConditions: Boolean
  applyToBStockConditions: Boolean
  useRetroactiveSends: Boolean
  excludedBrandsSlugs: [String]
  excludedCategoryUuids: [String]
}

input Input_core_apimessages_MyShopCampaignsResponse @join__type(graph: RQL) {
  shopCampaigns: [Input_core_apimessages_MyShopCampaign]
}

input Input_core_apimessages_MyShopComparisonStats @join__type(graph: RQL) {
  currentStats: Input_core_apimessages_MyShopStats
  previousStats: Input_core_apimessages_MyShopStats
  changeStats: Input_core_apimessages_MyShopStats
}

input Input_core_apimessages_MyShopEarningsRequest @join__type(graph: RQL) {
  timePeriod: String
}

input Input_core_apimessages_MyShopEarningsResponse @join__type(graph: RQL) {
  ordersTotal: Input_core_apimessages_Money
  accommodationsTotal: Input_core_apimessages_Money
}

input Input_core_apimessages_MyShopExportDac7OrderDataRequest @join__type(graph: RQL) {
  year: String
}

input Input_core_apimessages_MyShopExportDac7OrderDataResponse @join__type(graph: RQL) {
  success: Boolean
}

input Input_core_apimessages_MyShopOnboardingResponse @join__type(graph: RQL) {
  billingMethodStatus: core_apimessages_MyShopOnboardingResponse_BillingMethodStatus
  originCountryCode: String
  paypalSetupStatus: core_apimessages_MyShopOnboardingResponse_PaypalSetupStatus
  paymentMethod: core_apimessages_MyShopOnboardingResponse_PaymentMethod
}

input Input_core_apimessages_MyShopOrderRefundStatsRequest @join__type(graph: RQL) {
  startDate: String
  endDate: String
}

input Input_core_apimessages_MyShopOrderRefundStatsResponse @join__type(graph: RQL) {
  sellerInitiatedRefundCount: Int
}

input Input_core_apimessages_MyShopPaypalProfileResponse @join__type(graph: RQL) {
  paypalProfile: Input_core_apimessages_MyShopPaypalProfileResponse_PaypalProfile
}

input Input_core_apimessages_MyShopPaypalProfileResponse_PaypalProfile @join__type(graph: RQL) {
  email: String
}

input Input_core_apimessages_MyShopResponse @join__type(graph: RQL) {
  shop: Input_core_apimessages_Shop
}

input Input_core_apimessages_MyShopSalesChartData @join__type(graph: RQL) {
  labels: [String]
  series: [Input_core_apimessages_MyShopSalesChartDataSet]
  currencySymbol: String
  salesInMoreThanOneCurrency: Boolean
}

input Input_core_apimessages_MyShopSalesChartDataSet @join__type(graph: RQL) {
  dataSet: [Int]
}

input Input_core_apimessages_MyShopShippingProfilesRequest @join__type(graph: RQL) {
  _: Boolean
}

input Input_core_apimessages_MyShopShippingProfilesResponse @join__type(graph: RQL) {
  shippingProfiles: [Input_core_apimessages_MyShippingProfile]
}

input Input_core_apimessages_MyShopShippingRatesRequest @join__type(graph: RQL) {
  shippingProfileIds: [String]
}

input Input_core_apimessages_MyShopShippingRatesResponse @join__type(graph: RQL) {
  shippingRatesForShippingProfiles: [Input_core_apimessages_ShippingRatesForShippingProfile]
}

input Input_core_apimessages_MyShopStats @join__type(graph: RQL) {
  messages: Int
  orders: Int
  offers: Int
  watchers: Int
}

input Input_core_apimessages_MyShopStatsRequest @join__type(graph: RQL) {
  timePeriod: String
}

input Input_core_apimessages_MyShopStatsResponse @join__type(graph: RQL) {
  salesChartData: Input_core_apimessages_MyShopSalesChartData
  comparisonStats: Input_core_apimessages_MyShopComparisonStats
}

input Input_core_apimessages_MyUpdatesPromotion @join__type(graph: RQL) {
  id: String
  title: String
  subtitle: String
  url: Input_core_apimessages_Link
  startsAt: Timestamp
}

input Input_core_apimessages_MyUserServicesResponse @join__type(graph: RQL) {
  userServices: [Input_core_apimessages_UserService]
}

input Input_core_apimessages_Negotiation @join__type(graph: RQL) {
  """negotiations.id"""
  id: String
  """repeated Offer offers = 2;"""
  state: core_apimessages_NegotiationState
  buyerUuid: String
  sellerUuid: String
  expiresAt: Input_core_apimessages_LegacyTimestamp
  orderUuids: [String]
  lastOffer: Input_core_apimessages_Offer
  taxIncluded: Boolean
  taxIncludedHint: String
  """deprecated in favor of seller_shipping_warning"""
  buyerOutsideListingShippingRegions: Boolean
  negotiationType: core_apimessages_NegotiationType
  sellerShippingWarning: String
  buyerWillPayImmediately: Boolean
}

input Input_core_apimessages_NegotiationOffers @join__type(graph: RQL) {
  offers: [Input_core_apimessages_Offer]
}

input Input_core_apimessages_NegotiationsRequest @join__type(graph: RQL) {
  """negotiations.id"""
  ids: [String]
}

input Input_core_apimessages_NegotiationsResponse @join__type(graph: RQL) {
  negotiations: [Input_core_apimessages_Negotiation]
}

input Input_core_apimessages_NegotiationsShippingLocationRequest @join__type(graph: RQL) {
  """negotiations.id"""
  ids: [String]
}

input Input_core_apimessages_NegotiationsShippingLocationResponse @join__type(graph: RQL) {
  shippingLocations: [Input_core_apimessages_Address]
}

input Input_core_apimessages_NewListingSignal @join__type(graph: RQL) {
  translations: Input_core_apimessages_SignalTranslation
  isValid: Boolean
}

input Input_core_apimessages_NodeRequest @join__type(graph: RQL) {
  lookups: [Input_core_apimessages_NodeRequest_Lookup]
  debug: Boolean
}

input Input_core_apimessages_NodeRequest_Lookup @join__type(graph: RQL) {
  lid: String
  rel: String
  params: Input_core_apimessages_NodeRequest_Lookup_Params
}

input Input_core_apimessages_NodeRequest_Lookup_Params @join__type(graph: RQL) {
  """
  Node endpoints default to the field name that corresponds to its class name
  """
  images: Input_core_apimessages_NodeRequest_Lookup_Params_Images
  sales: Input_core_apimessages_NodeRequest_Lookup_Params_Sales
  shippingRates: Input_core_apimessages_NodeRequest_Lookup_Params_ShippingRates
  listingsPricings: Input_core_apimessages_NodeRequest_Lookup_Params_ListingsPricings
  truliooOnboardingRecords: Input_core_apimessages_NodeRequest_Lookup_Params_TruliooOnboardingRecords
  productReviews: Input_core_apimessages_NodeRequest_Lookup_Params_ProductReviews
  shopsCertifiedPreOwned: Input_core_apimessages_NodeRequest_Lookup_Params_ShopsCertifiedPreOwned
  estimatedNewListingPrices: Input_core_apimessages_NodeRequest_Lookup_Params_EstimatedNewListingPrices
  users: Input_core_apimessages_NodeRequest_Lookup_Params_Users
  listingsCertifiedPreOwned: Input_core_apimessages_NodeRequest_Lookup_Params_ListingsCertifiedPreOwned
}

input Input_core_apimessages_NodeRequest_Lookup_Params_EstimatedNewListingPrices @join__type(graph: RQL) {
  currency: String
}

input Input_core_apimessages_NodeRequest_Lookup_Params_Images @join__type(graph: RQL) {
  transform: core_apimessages_NamedImageTransforms
  scope: core_apimessages_Image_Scope
  limit: Int
}

input Input_core_apimessages_NodeRequest_Lookup_Params_ProductReviews @join__type(graph: RQL) {
  forCurrentUser: Boolean
}

input Input_core_apimessages_NodeRequest_Lookup_Params_Sales @join__type(graph: RQL) {
  all: Boolean
}

input Input_core_apimessages_NodeRequest_Lookup_Params_TruliooOnboardingRecords @join__type(graph: RQL) {
  recordType: core_apimessages_NodeRequest_Lookup_Params_TruliooOnboardingRecords_RecordType
}

input Input_core_apimessages_NodeRequest_Lookup_Params_Users @join__type(graph: RQL) {
  fullname: Boolean
}

input Input_core_apimessages_NodeResponse @join__type(graph: RQL) {
  results: [Input_core_apimessages_NodeResponse_Result]
}

input Input_core_apimessages_NodeResponse_Result @join__type(graph: RQL) {
  lookup: Input_core_apimessages_NodeRequest_Lookup
  meta: Input_core_apimessages_NodeResponse_Result_Meta
  """
  Node endpoints default to the field name that corresponds to its class name
  """
  listings: [Input_core_apimessages_Listing]
  csps: [Input_core_apimessages_CSP]
  images: [Input_core_apimessages_Image]
  listingsPricings: [Input_core_apimessages_ListingPricing]
  orders: [Input_core_apimessages_Order]
  sales: [Input_core_apimessages_Sale]
  curatedSets: [Input_core_apimessages_CuratedSet]
  packlinkShipments: [Input_core_apimessages_PacklinkShipment]
  shippingRates: [Input_core_apimessages_ShippingRates]
  bumpRates: [Input_core_apimessages_BumpRate]
  categories: [Input_core_apimessages_NodesCategory]
  gearCollectionItems: [Input_core_apimessages_GearCollectionItem]
  priceGuides: [Input_core_apimessages_PriceGuide]
  cartItems: [Input_core_apimessages_CartItem]
  adyenCheckoutPaymentMethods: [Input_core_apimessages_AdyenCheckoutPaymentMethods]
  taxIdentifications: [Input_core_apimessages_TaxIdentification]
  priceChanges: [Input_core_apimessages_PriceChange]
  adCampaigns: [Input_core_apimessages_AdCampaign]
  advertisers: [Input_core_apimessages_Advertiser]
  adGroups: [Input_core_apimessages_AdGroup]
  adGroupKeywords: [Input_core_apimessages_AdGroupKeyword]
  ads: [Input_core_apimessages_Ad]
  siteBanners: [Input_core_apimessages_SiteBanner]
  shops: [Input_core_apimessages_Shop]
  myUpdatesPromotions: [Input_core_apimessages_MyUpdatesPromotion]
  adZones: [Input_core_apimessages_AdZone]
  listingsSignals: [Input_core_apimessages_ListingSignals]
  universalPromoCampaigns: [Input_core_apimessages_UniversalPromoCampaign]
  shipmentPackages: [Input_core_apimessages_ShippingLabelPackage]
  cspExpressSaleItemBids: [Input_core_apimessages_CSPExpressSaleItemBid]
  orderBundles: [Input_core_apimessages_OrderBundle]
  publicPriceRecords: [Input_core_apimessages_PublicPriceRecord]
  nonUserExperiments: [Input_core_apimessages_NonUserExperiment]
  users: [Input_core_apimessages_User]
  addresses: [Input_core_apimessages_Address]
  shopsConfigs: [Input_core_apimessages_ShopConfig]
  productReviews: [Input_core_apimessages_ProductReview]
  truliooOnboardingRecords: [Input_core_apimessages_TruliooOnboardingRecord]
  listingsUserViews: [Input_core_apimessages_ListingUserView]
  internationalTaxProfiles: [Input_core_apimessages_InternationalTaxProfile]
  businessRegistrationNumbers: [Input_core_apimessages_BusinessRegistrationNumber]
  listingsAutoOfferEligibilities: [Input_core_apimessages_ListingAutoOfferEligibility]
  listingsSalesMemberships: [Input_core_apimessages_ListingSalesMemberships]
  shopCampaignCoupons: [Input_core_apimessages_ShopCampaignCoupon]
  browsePages: [Input_core_apimessages_BrowsePage]
  informActThresholdStatuses: [Input_core_apimessages_InformActThresholdStatus]
  listingsOfferBotRules: [Input_core_apimessages_OfferBotRule]
  taxProfiles: [Input_core_apimessages_TaxProfile]
  returnPolicies: [Input_core_apimessages_ReturnPolicy]
  brands: [Input_core_apimessages_Brand]
  listingsAffirmZeroPercentFinancingConfigurations: [Input_core_apimessages_ListingAffirmZeroPercentFinancingConfiguration]
  listingsExpressPay: [Input_core_apimessages_ListingExpressPay]
  productBreadcrumbs: [Input_core_apimessages_ProductBreadcrumb]
  listingsBuyerOfferEligibilities: [Input_core_apimessages_ListingBuyerOfferEligibility]
  userShopPermissions: [Input_core_apimessages_UserShopPermission]
  shopsCertifiedPreOwned: [Input_core_apimessages_ShopCertifiedPreOwned]
  canonicalProducts: [Input_core_apimessages_CanonicalProduct]
  packageSizeSuggestions: [Input_core_apimessages_PackageSizeSuggestion]
  estimatedNewListingPrices: [Input_core_apimessages_EstimatedNewListingPrice]
  listingsProtectionPlanOptions: [Input_core_apimessages_ProtectionPlanOptions]
  listingsCertifiedPreOwned: [Input_core_apimessages_ListingCertifiedPreOwned]
  listingsDigitalDetails: [Input_core_apimessages_ListingDigitalDetails]
}

input Input_core_apimessages_NodeResponse_Result_Meta @join__type(graph: RQL) {
  total: Int
}

input Input_core_apimessages_NodesCategory @join__type(graph: RQL) {
  """categories.uuid"""
  id: String
  name: String
  webLink: Input_core_apimessages_Link
  cmsLink: Input_core_apimessages_Link
  slug: String
  rootSlug: String
  cmsUrl: Input_core_apimessages_Link
  root: Boolean
  leaf: Boolean
}

input Input_core_apimessages_NonUserExperiment @join__type(graph: RQL) {
  name: String
  bucket: String
}

input Input_core_apimessages_Offer @join__type(graph: RQL) {
  offerItems: [Input_core_apimessages_OfferItem]
  message: String
  prices: Input_core_apimessages_OfferPrices
  createdAt: Input_core_apimessages_LegacyTimestamp
  initiatingParty: core_apimessages_NegotiationParty
  status: core_apimessages_Offer_OfferStatus
  shippingMethod: core_apimessages_ShippingMethod
  layawayTerms: Input_core_apimessages_LayawayTerms
  counterable: Boolean
  alerts: [Input_core_apimessages_OfferAlert]
}

input Input_core_apimessages_OfferAlert @join__type(graph: RQL) {
  level: core_apimessages_OfferAlert_Level
  title: String
  body: String
}

input Input_core_apimessages_OfferBotRule @join__type(graph: RQL) {
  autoRejectPercentage: Int
}

input Input_core_apimessages_OfferItem @join__type(graph: RQL) {
  """products.id"""
  listingId: String
  prices: Input_core_apimessages_OfferPrices
  quantity: Int
}

input Input_core_apimessages_OfferItemRequest @join__type(graph: RQL) {
  """products.id"""
  listingId: String
  price: Input_core_apimessages_Money
  shippingPrice: Input_core_apimessages_Money
  quantity: Int
}

input Input_core_apimessages_OfferPrices @join__type(graph: RQL) {
  price: Input_core_apimessages_ConvertedMoney
  shippingPrice: Input_core_apimessages_ConvertedMoney
  totalPrice: Input_core_apimessages_ConvertedMoney
}

input Input_core_apimessages_OffersRequest @join__type(graph: RQL) {
  """negotiations.id"""
  ids: [String]
}

input Input_core_apimessages_OffersResponse @join__type(graph: RQL) {
  offers: [Input_core_apimessages_NegotiationOffers]
}

input Input_core_apimessages_OnSaleSignal @join__type(graph: RQL) {
  isValid: Boolean
  translations: Input_core_apimessages_SignalTranslation
  link: Input_core_apimessages_SignalLink
}

input Input_core_apimessages_Order @join__type(graph: RQL) {
  uuid: String
  buyerUuid: String
  shopUuid: String
  """products.id"""
  listingId: String
  status: core_apimessages_Order_Status
  shippingMethod: core_apimessages_ShippingMethod
  sellerUuid: String
  checkoutUuid: String
  """orders.id"""
  legacyOrderId: String
  createdAt: Input_core_apimessages_LegacyTimestamp
  settlementAmountProductSubtotal: Input_core_apimessages_Money
  quantity: Int
  """users.id"""
  legacyBuyerId: String
  paidAt: Input_core_apimessages_LegacyTimestamp
  updatedAt: Input_core_apimessages_LegacyTimestamp
  shippedAt: Input_core_apimessages_LegacyTimestamp
  needsFeedbackForBuyer: Boolean
  needsFeedbackForSeller: Boolean
  orderType: String
  shippingProvider: String
  shippingCode: String
  amountProduct: Input_core_apimessages_Money
  amountTotal: Input_core_apimessages_Money
  amountTax: Input_core_apimessages_Money
  amountShipping: Input_core_apimessages_Money
  statusDescription: String
  webTrackingUrl: String
  shipmentStatus: String
  orderUrl: Input_core_apimessages_Link
  mobileStatus: String
  carrierCalculatedShippingAmount: Input_core_apimessages_Money
  shippingTaxed: Boolean
  paymentRequiredAt: Input_core_apimessages_LegacyTimestamp
  protectionPlan: Boolean
  carrierCalculatedCarrier: String
  protectionPlanEligible: Boolean
  title: String
}

input Input_core_apimessages_OrderBundle @join__type(graph: RQL) {
  amountTotal: Input_core_apimessages_Money
  amountProductSubtotal: Input_core_apimessages_Money
  amountShipping: Input_core_apimessages_Money
  amountCredit: Input_core_apimessages_Money
  amountTax: Input_core_apimessages_Money
  bonusBucks: Input_core_apimessages_Money
  paymentMethod: core_apimessages_Payment_PaymentMethod
  """order_bundles.checkout_uuid"""
  uuid: String
  localPickup: Boolean
  """order_bundles.id"""
  id: String
  orderType: String
  checkoutType: core_apimessages_Checkout_Type
}

input Input_core_apimessages_OrderBundleShowResponse @join__type(graph: RQL) {
  orderBundle: Input_core_apimessages_OrderBundle
}

input Input_core_apimessages_OrderCustoms @join__type(graph: RQL) {
  uuid: String
  description: String
  countryOfOrigin: String
  declaredValue: Input_core_apimessages_Money
  tariffNumber: String
  quantity: Int
}

input Input_core_apimessages_OrderCustomsInfo @join__type(graph: RQL) {
  tariffNumber: String
  categoryName: String
  description: String
  countryOfOrigin: String
}

input Input_core_apimessages_OrderFeedbacks @join__type(graph: RQL) {
  orderUuid: String
  feedbacks: [Input_core_apimessages_Feedback]
}

input Input_core_apimessages_OrderFeedbacksRequest @join__type(graph: RQL) {
  orderUuids: [String]
  orderIds: [String]
}

input Input_core_apimessages_OrderFeedbacksResponse @join__type(graph: RQL) {
  orderFeedbacks: [Input_core_apimessages_OrderFeedbacks]
}

input Input_core_apimessages_OrderFlatRateShippingOptionsRequest @join__type(graph: RQL) {
  checkoutUuid: String
  orderUuid: String
}

input Input_core_apimessages_OrderFlatRateShippingOptionsResponse @join__type(graph: RQL) {
  flatRateShippingOptions: [Input_core_apimessages_FlatRateShippingOption]
}

input Input_core_apimessages_OrderNote @join__type(graph: RQL) {
  """order_notes.id"""
  id: String
  body: String
  """orders.id"""
  orderId: String
  createdAt: Input_core_apimessages_LegacyTimestamp
}

input Input_core_apimessages_OrderNotes @join__type(graph: RQL) {
  notes: [Input_core_apimessages_OrderNote]
}

input Input_core_apimessages_OrderNotesIndexRequest @join__type(graph: RQL) {
  orderUuids: [String]
  orderIds: [String]
}

input Input_core_apimessages_OrderNotesIndexResponse @join__type(graph: RQL) {
  orderNotes: [Input_core_apimessages_OrderNotes]
}

"""
  This endpoint is not used with GRPC or with RQL, which is not recommended
Do not use this endpoint directly, instead query for order notes using RQL
"""
input Input_core_apimessages_OrderNotesRequest @join__type(graph: RQL) {
  orderIds: [String]
}

input Input_core_apimessages_OrderNotesResponse @join__type(graph: RQL) {
  orderNotes: [Input_core_apimessages_OrderNote]
}

input Input_core_apimessages_OrderPackingSlip @join__type(graph: RQL) {
  packingSlipWebUrl: String
}

input Input_core_apimessages_OrderPayments @join__type(graph: RQL) {
  payments: [Input_core_apimessages_Payment]
}

input Input_core_apimessages_OrderPaymentsRequest @join__type(graph: RQL) {
  orderUuids: [String]
  orderIds: [String]
}

input Input_core_apimessages_OrderPaymentsResponse @join__type(graph: RQL) {
  orderPayments: [Input_core_apimessages_OrderPayments]
}

input Input_core_apimessages_OrderProtectionPlanDetails @join__type(graph: RQL) {
  buyerEmail: String
  associatedProtectionPlanOrderId: String
  associatedCoveredProductOrderId: String
  activationLink: Input_core_apimessages_Link
}

input Input_core_apimessages_OrderRefundRequests @join__type(graph: RQL) {
  refundRequests: [Input_core_apimessages_RefundRequest]
}

input Input_core_apimessages_OrderRefunds @join__type(graph: RQL) {
  refundableState: core_apimessages_OrderRefunds_RefundableState
  refundRequests: [Input_core_apimessages_RefundRequest]
  completedRefunds: [Input_core_apimessages_Refund]
}

input Input_core_apimessages_OrderRefundsRequest @join__type(graph: RQL) {
  orderUuids: [String]
  orderIds: [String]
}

input Input_core_apimessages_OrderRefundsResponse @join__type(graph: RQL) {
  orderRefunds: [Input_core_apimessages_OrderRefunds]
}

input Input_core_apimessages_OrderShippingAddressesRequest @join__type(graph: RQL) {
  orderUuids: [String]
  orderIds: [String]
}

input Input_core_apimessages_OrderShippingAddressesResponse @join__type(graph: RQL) {
  addresses: [Input_core_apimessages_Address]
}

input Input_core_apimessages_OrderShippingLabel @join__type(graph: RQL) {
  shippingLabelWebUrl: String
  purchaseShippingLabelWebUrl: String
}

input Input_core_apimessages_OrderStats @join__type(graph: RQL) {
  listingId: String
  totalOrders: Int
  isViewable: Boolean
}

input Input_core_apimessages_OrderVerifyShippingAddressRequest @join__type(graph: RQL) {
  checkoutUuid: String
  orderUuid: String
}

input Input_core_apimessages_OrderVerifyShippingAddressResponse @join__type(graph: RQL) {
  address: Input_core_apimessages_Address
  errorMessage: String
  verificationStatus: core_apimessages_AddressVerificationStatus
  isResidential: Boolean
}

input Input_core_apimessages_OrderViewStatus @join__type(graph: RQL) {
  status: String
  description: String
}

input Input_core_apimessages_OrdersAddressRequest @join__type(graph: RQL) {
  uuids: [String]
  addressType: String
}

input Input_core_apimessages_OrdersAddressResponse @join__type(graph: RQL) {
  addresses: [Input_core_apimessages_Address]
}

input Input_core_apimessages_OrdersCustomsInfoRequest @join__type(graph: RQL) {
  uuids: [String]
  ids: [String]
}

input Input_core_apimessages_OrdersCustomsInfoResponse @join__type(graph: RQL) {
  ordersCustomsInfo: [Input_core_apimessages_OrderCustomsInfo]
}

input Input_core_apimessages_OrdersRequest @join__type(graph: RQL) {
  uuids: [String]
  ids: [String]
}

input Input_core_apimessages_OrdersResponse @join__type(graph: RQL) {
  orders: [Input_core_apimessages_Order]
}

input Input_core_apimessages_OtherBuyersWithListingInCartCountsRequest @join__type(graph: RQL) {
  """product.id"""
  ids: [String]
}

input Input_core_apimessages_OtherBuyersWithListingInCartCountsResponse @join__type(graph: RQL) {
  listingInCartCount: [Input_core_apimessages_ListingInCartCount]
}

input Input_core_apimessages_PackageSizeSuggestion @join__type(graph: RQL) {
  id: String
  length: Input_core_apimessages_Measurement
  width: Input_core_apimessages_Measurement
  height: Input_core_apimessages_Measurement
  weight: Input_core_apimessages_Measurement
}

input Input_core_apimessages_PacklinkAccount @join__type(graph: RQL) {
  id: String
  email: String
  status: core_apimessages_PacklinkAccount_Status
}

input Input_core_apimessages_PacklinkPolicies @join__type(graph: RQL) {
  dataProcessing: Boolean
  marketingCalls: Boolean
  marketingEmails: Boolean
  termsAndConditions: Boolean
}

input Input_core_apimessages_PacklinkShipment @join__type(graph: RQL) {
  id: String
  orderId: String
  packlinkAccountId: String
  reference: String
  status: core_apimessages_PacklinkShipment_Status
}

input Input_core_apimessages_PayMyStatementRequest @join__type(graph: RQL) {
  statementId: String
  creditCardId: String
  payment: Input_core_apimessages_MoneyMajorUnitsEntry
}

input Input_core_apimessages_PayMyStatementResponse @join__type(graph: RQL) {
  statementId: String
  statementBalance: Int
  amountPaidCents: Int
}

input Input_core_apimessages_Payment @join__type(graph: RQL) {
  paymentMethod: core_apimessages_Payment_PaymentMethod
  paymentStatus: core_apimessages_Payment_PaymentStatus
  amount: Input_core_apimessages_Money
}

"""Card-shaped icon for a payment method"""
input Input_core_apimessages_PaymentCardIcon @join__type(graph: RQL) {
  slug: String
  description: String
  url: String
}

input Input_core_apimessages_PaymentMethods @join__type(graph: RQL) {
  """either shops.uuid or products.id"""
  itemId: String
  itemType: String
  acceptedPaymentMethods: [String]
}

input Input_core_apimessages_PaymentPlanSignal @join__type(graph: RQL) {
  isValid: Boolean
  translations: Input_core_apimessages_SignalTranslation
}

input Input_core_apimessages_PaypalOnboardSellerRequest @join__type(graph: RQL) {
  _: Boolean
}

input Input_core_apimessages_PaypalOnboardSellerResponse @join__type(graph: RQL) {
  """paypal_profiles.id"""
  id: String
  actionUrl: String
}

input Input_core_apimessages_PredictedToSellSoonSignal @join__type(graph: RQL) {
  isValid: Boolean
  translations: Input_core_apimessages_SignalTranslation
}

input Input_core_apimessages_PreorderInfo @join__type(graph: RQL) {
  """preorder_infos.id"""
  id: String
  estimatedShipDate: Input_core_apimessages_LegacyTimestamp
  onPreorder: Boolean
  leadTimeDays: Int
  shipDate: Input_core_apimessages_LegacyTimestamp
}

input Input_core_apimessages_PreorderInfoEntry @join__type(graph: RQL) {
  timeType: core_apimessages_PreorderInfoEntry_TimeType
  leadTimeUnit: core_apimessages_PreorderInfoEntry_LeadTimeUnit
  shipDate: String
  leadTimeDays: Int
}

input Input_core_apimessages_PreorderInfoRequest @join__type(graph: RQL) {
  listingIds: [String]
}

input Input_core_apimessages_PreorderInfoResponse @join__type(graph: RQL) {
  preorderInfo: [Input_core_apimessages_PreorderInfo]
}

input Input_core_apimessages_PrepublishStatusResponse @join__type(graph: RQL) {
  nextStep: core_apimessages_PrepublishStatusResponse_PrepublishStatus
  nextSteps: [core_apimessages_PrepublishStatusResponse_PrepublishStatus]
}

input Input_core_apimessages_PriceChange @join__type(graph: RQL) {
  id: String
  listingId: String
  previousPrice: Input_core_apimessages_Money
  newPrice: Input_core_apimessages_Money
  currentPriceDropPercent: Int
  totalPriceDropPercent: Int
}

input Input_core_apimessages_PriceDropSignal @join__type(graph: RQL) {
  isValid: Boolean
  translations: Input_core_apimessages_SignalTranslation
}

input Input_core_apimessages_PriceGuide @join__type(graph: RQL) {
  """price_guides.id"""
  id: String
  title: String
  webLink: Input_core_apimessages_Link
  priceLow: Input_core_apimessages_Money
  priceHigh: Input_core_apimessages_Money
  uuid: String
}

input Input_core_apimessages_PriceRecommendation @join__type(graph: RQL) {
  canonicalProductId: String
  conditionUuid: String
  priceLow: Input_core_apimessages_Money
  priceHigh: Input_core_apimessages_Money
  priceMiddle: Input_core_apimessages_Money
  priceLowThirtyDaysAgo: Input_core_apimessages_Money
  priceHighThirtyDaysAgo: Input_core_apimessages_Money
  priceMiddleThirtyDaysAgo: Input_core_apimessages_Money
  countryCode: String
  comparisonShoppingPageId: String
}

input Input_core_apimessages_ProcessApprovedPaypalOrderRequest @join__type(graph: RQL) {
  """checkout UUID"""
  id: String
}

input Input_core_apimessages_ProcessApprovedPaypalOrderResponse @join__type(graph: RQL) {
  """checkout UUID"""
  id: String
}

input Input_core_apimessages_ProcessingFees @join__type(graph: RQL) {
  percent: String
  flatFee: Input_core_apimessages_Money
}

input Input_core_apimessages_ProductBreadcrumb @join__type(graph: RQL) {
  title: String
  url: String
}

input Input_core_apimessages_ProductReview @join__type(graph: RQL) {
  id: String
  body: String
  createdAt: Timestamp
  title: String
  rating: Int
  voteCount: Int
  reviewer: Input_core_apimessages_Reviewer
  verified: Boolean
  reported: Boolean
  isMyReview: Boolean
  voted: Boolean
}

input Input_core_apimessages_ProductReviewVoteRequest @join__type(graph: RQL) {
  id: String
}

input Input_core_apimessages_ProductReviewVoteResponse @join__type(graph: RQL) {
  id: String
}

input Input_core_apimessages_ProductSpec @join__type(graph: RQL) {
  name: String
  value: String
  path: String
  type: core_apimessages_ProductSpec_Type
  slug: String
  id: String
}

input Input_core_apimessages_ProtectionPlan @join__type(graph: RQL) {
  planId: String
  durationMonths: String
  amount: Input_core_apimessages_Money
  title: String
  planCoverageDetails: [String]
  termsUrl: String
  condensedTitle: String
}

input Input_core_apimessages_ProtectionPlanOptions @join__type(graph: RQL) {
  availablePlans: [Input_core_apimessages_ProtectionPlan]
  protectionPlanCalloutTitle: String
  protectionHighlights: [String]
  coverageDetailsSubheader: String
}

input Input_core_apimessages_PublicPriceRecord @join__type(graph: RQL) {
  uuid: String
  listingId: String
  createdAt: Input_core_apimessages_LegacyTimestamp
  settlementAmountProductSubtotal: Input_core_apimessages_Money
  orderType: String
  amountProduct: Input_core_apimessages_Money
  amountTotal: Input_core_apimessages_Money
  amountTax: Input_core_apimessages_Money
  amountShipping: Input_core_apimessages_Money
  condition: Input_core_apimessages_Condition
}

input Input_core_apimessages_PublishAllListingsResponse @join__type(graph: RQL) {
  enqueued: Boolean
  message: String
  prepublishStepRequired: Input_core_apimessages_PublishAllListingsResponse_PrepublishStepRequired
}

input Input_core_apimessages_PublishAllListingsResponse_PrepublishStepRequired @join__type(graph: RQL) {
  step: String
}

input Input_core_apimessages_PurchaseShippingRateRequest @join__type(graph: RQL) {
  shipmentUuid: String
  rateUuid: String
  acceptedCarrierTerms: Boolean
}

input Input_core_apimessages_PurchaseShippingRateResponse @join__type(graph: RQL) {
  errors: [Input_core_apimessages_Error]
}

input Input_core_apimessages_RareGearSignal @join__type(graph: RQL) {
  isValid: Boolean
  translations: Input_core_apimessages_SignalTranslation
}

input Input_core_apimessages_RecentSearchesResponse @join__type(graph: RQL) {
  queries: [String]
}

input Input_core_apimessages_RecentlyViewedListingsRequest @join__type(graph: RQL) {
  limit: Int
}

input Input_core_apimessages_RecentlyViewedListingsResponse @join__type(graph: RQL) {
  listingIds: [String]
}

input Input_core_apimessages_Recommendation @join__type(graph: RQL) {
  id: String
  type: core_apimessages_Recommendation_RecommendationType
}

input Input_core_apimessages_RecommendationsRequest @join__type(graph: RQL) {
  cpIds: [String]
  limit: Int
  multiClientExperiments: [Input_core_apimessages_ExperimentData]
  listingIds: [String]
}

input Input_core_apimessages_RecommendationsResponse @join__type(graph: RQL) {
  recommendations: [Input_core_apimessages_Recommendation]
  recommendationEngineInputIds: [String]
  recommendationEngineOutputIds: [String]
}

input Input_core_apimessages_RedeemPromotionalCodeRequest @join__type(graph: RQL) {
  token: String
}

input Input_core_apimessages_RedeemPromotionalCodeResponse @join__type(graph: RQL) {
  message: String
}

input Input_core_apimessages_ReferAFriend @join__type(graph: RQL) {
  shareUrl: String
  signUpBonus: Input_core_apimessages_Money
  rewardAmount: Input_core_apimessages_Money
  minOrderAmount: Input_core_apimessages_Money
}

input Input_core_apimessages_ReferAFriendResponse @join__type(graph: RQL) {
  referAFriend: Input_core_apimessages_ReferAFriend
}

input Input_core_apimessages_Refund @join__type(graph: RQL) {
  id: String
  amount: Input_core_apimessages_ConvertedMoney
  createdAt: Input_core_apimessages_LegacyTimestamp
  updatedAt: Input_core_apimessages_LegacyTimestamp
  noteToBuyer: String
}

input Input_core_apimessages_RefundRequest @join__type(graph: RQL) {
  amount: Input_core_apimessages_Money
  type: core_apimessages_RefundRequest_RefundType
  state: core_apimessages_RefundRequest_RefundState
  createdAt: Input_core_apimessages_LegacyTimestamp
  updatedAt: Input_core_apimessages_LegacyTimestamp
  id: String
  markItemReturnedWebUrl: String
  respondToRequestWebUrl: String
}

input Input_core_apimessages_RegionalShippingRate @join__type(graph: RQL) {
  areas: [String]
  rate: Input_core_apimessages_Money
}

input Input_core_apimessages_RegisterMyPacklinkAccountRequest @join__type(graph: RQL) {
  email: String
  password: String
  policies: Input_core_apimessages_PacklinkPolicies
}

input Input_core_apimessages_RegisterMyPacklinkAccountResponse @join__type(graph: RQL) {
  shopId: String
}

input Input_core_apimessages_RequestAccountDeletionRequest @join__type(graph: RQL) {
  reason: String
}

input Input_core_apimessages_RequestAccountDeletionResponse @join__type(graph: RQL) {
  uuid: String
}

input Input_core_apimessages_RequestTaxFormDownloadRequest @join__type(graph: RQL) {
  taxFormId: String
}

input Input_core_apimessages_RequestTaxFormDownloadResponse @join__type(graph: RQL) {
  taxFormDownload: Input_core_apimessages_TaxFormDownload
  error: String
}

input Input_core_apimessages_ReturnPolicy @join__type(graph: RQL) {
  newReturnWindowDays: Int
  usedReturnWindowDays: Int
  restockingFeePercent: Int
  specialConditions: String
  legacyReturnPolicyText: String
  id: String
}

input Input_core_apimessages_ReturnPolicySignal @join__type(graph: RQL) {
  isValid: Boolean
  translations: Input_core_apimessages_SignalTranslation
  link: Input_core_apimessages_SignalLink
}

input Input_core_apimessages_ReverifyCreditCardRequest @join__type(graph: RQL) {
  creditCardId: String
  tokenizedFields: String
}

input Input_core_apimessages_ReverifyCreditCardResponse @join__type(graph: RQL) {
  creditCard: Input_core_apimessages_CreditCard
}

input Input_core_apimessages_Reviewer @join__type(graph: RQL) {
  shortname: String
  links: Input_core_apimessages_ReviewerLinks
}

input Input_core_apimessages_ReviewerLinks @join__type(graph: RQL) {
  avatar: Input_core_apimessages_Link
}

input Input_core_apimessages_Ribbon @join__type(graph: RQL) {
  display: String
  reason: core_apimessages_Ribbon_Reason
  displayReason: String
}

input Input_core_apimessages_Sale @join__type(graph: RQL) {
  """sales.id"""
  id: String
  slug: String
  name: String
  code: String
  startsAt: Input_core_apimessages_LegacyTimestamp
  endsAt: Input_core_apimessages_LegacyTimestamp
  summary: String
  state: core_apimessages_Sale_SaleState
  display: String
  withSalePriceDisplay: String
  percent: Int
  buyerIneligibilityReason: String
  saleType: String
  showCode: Boolean
  shopSlug: String
  shopName: String
  links: Input_core_apimessages_SaleLinks
  discountValue: String
}

input Input_core_apimessages_SaleLinks @join__type(graph: RQL) {
  self: Input_core_apimessages_Link
}

input Input_core_apimessages_SaveMyPlaidAccountRequest @join__type(graph: RQL) {
  accountId: String
  publicToken: String
  verificationStatus: String
  countryCode: String
}

input Input_core_apimessages_SaveMyPlaidAccountResponse @join__type(graph: RQL) {
  plaidAccountId: String
}

input Input_core_apimessages_ScheduledPriceDrop @join__type(graph: RQL) {
  newPrice: Input_core_apimessages_Money
  active: Boolean
  dropAt: Timestamp
}

input Input_core_apimessages_ScheduledPriceDropEntry @join__type(graph: RQL) {
  newPrice: Input_core_apimessages_Money
  active: Boolean
}

input Input_core_apimessages_SearchData @join__type(graph: RQL) {
  title: String
  queryParams: String
  imageUrl: String
}

input Input_core_apimessages_SearchFilterPreset @join__type(graph: RQL) {
  """postgres id (polymorphic with 'collection_type')"""
  collectionId: String
  collectionType: String
  title: String
  url: String
  id: String
}

input Input_core_apimessages_SearchFilterPresetsRequest @join__type(graph: RQL) {
  categoryUuids: [String]
  collectionType: core_apimessages_CollectionHeader_CollectionType
  """UUIDs"""
  collectionIds: [String]
  collectionSlugs: [String]
}

input Input_core_apimessages_SearchFilterPresetsResponse @join__type(graph: RQL) {
  searchFilterPresets: [Input_core_apimessages_ItemSearchFilterPresets]
}

input Input_core_apimessages_SearchMetadataRequest @join__type(graph: RQL) {
  categorySlugs: [String]
  brandSlugs: [String]
  conditionSlugs: [String]
  curatedSetSlug: String
  shopSlug: String
  yearMin: String
  yearMax: String
  query: String
  searchUrlParams: String
}

input Input_core_apimessages_SearchMetadataResponse @join__type(graph: RQL) {
  title: String
}

input Input_core_apimessages_SecureCheckoutSignal @join__type(graph: RQL) {
  isValid: Boolean
  translations: Input_core_apimessages_SignalTranslation
}

input Input_core_apimessages_SeedListingRequest @join__type(graph: RQL) {
  seedId: String
  seedType: core_apimessages_Listing_SeedType
}

input Input_core_apimessages_SeedListingResponse @join__type(graph: RQL) {
  listing: Input_core_apimessages_SeededListing
}

input Input_core_apimessages_SeededListing @join__type(graph: RQL) {
  make: String
  model: String
  brandSlug: String
  finish: String
  year: String
  countryOfOrigin: String
  title: String
  seedType: core_apimessages_Listing_SeedType
  seedId: String
  comparisonShoppingPageId: String
  canonicalProductId: String
  productTypeId: String
  categoryUuids: [String]
  categoryRootUuid: String
  subcategoryLeafUuids: [String]
  conditionSlug: String
  description: String
  handmade: Boolean
  soldAsIs: Boolean
  sellerPrice: Input_core_apimessages_Money
  sellerCost: Input_core_apimessages_Money
  shippingProfileId: String
}

input Input_core_apimessages_SelectAddressAutocompleteSuggestionRequest @join__type(graph: RQL) {
  """loqate address id"""
  id: String
}

input Input_core_apimessages_SelectAddressAutocompleteSuggestionResponse @join__type(graph: RQL) {
  suggestion: Input_core_apimessages_Address
}

input Input_core_apimessages_SelectCheckoutCreditCardRequest @join__type(graph: RQL) {
  """checkout UUID"""
  id: String
  creditCardId: String
}

input Input_core_apimessages_SelectCheckoutCreditCardResponse @join__type(graph: RQL) {
  """checkout UUID"""
  id: String
}

input Input_core_apimessages_SelectCheckoutPaymentMethodRequest @join__type(graph: RQL) {
  """checkout UUID"""
  id: String
  paymentMethod: core_apimessages_CheckoutPaymentMethod_Type
}

input Input_core_apimessages_SelectCheckoutPaymentMethodResponse @join__type(graph: RQL) {
  """checkout UUID"""
  id: String
}

input Input_core_apimessages_SellerBulkActionAsyncResponse @join__type(graph: RQL) {
  enqueued: Boolean
  message: String
}

input Input_core_apimessages_SellerBulkActionResponse @join__type(graph: RQL) {
  responses: [Input_core_apimessages_SellerListingBulkActionResponse]
}

input Input_core_apimessages_SellerListing @join__type(graph: RQL) {
  sellerCost: Input_core_apimessages_Money
  storageLocation: String
  sellerPrice: Input_core_apimessages_Money
  handmade: Boolean
  upcDoesNotApply: Boolean
  localizedContents: [Input_core_apimessages_LocalizedListingContent]
  shippingProfileId: String
  prefersReverbShippingLabel: Boolean
  taxExempt: Boolean
  scheduledPriceDrops: [Input_core_apimessages_ScheduledPriceDrop]
  sellerReportedMap: Input_core_apimessages_Money
  relistable: Boolean
  vatIncluded: Boolean
  vatIncludedHint: String
}

input Input_core_apimessages_SellerListingBulkActionResponse @join__type(graph: RQL) {
  listingId: String
  success: Boolean
  errors: [Input_core_apimessages_Error]
}

input Input_core_apimessages_SellerListingsResponse @join__type(graph: RQL) {
  listings: [Input_core_apimessages_SellerListing]
}

input Input_core_apimessages_SellerOrder @join__type(graph: RQL) {
  uuid: String
  shippingLabel: Input_core_apimessages_OrderShippingLabel
  packingSlip: Input_core_apimessages_OrderPackingSlip
  taxResponsibleParty: core_apimessages_SellerOrder_TaxResponsibleParty
  orderViewStatus: Input_core_apimessages_OrderViewStatus
}

input Input_core_apimessages_SellerOrdersResponse @join__type(graph: RQL) {
  orders: [Input_core_apimessages_SellerOrder]
}

input Input_core_apimessages_SellerVerificationPolicyResponse @join__type(graph: RQL) {
  completedVerification: Boolean
  eligibleForInformAct: Boolean
  eligibleForSellerVerification: Boolean
  eligibleForSellerVerificationBackcast: Boolean
  eligibleForColdStorageSellerVerificationBypass: Boolean
}

input Input_core_apimessages_SellingFees @join__type(graph: RQL) {
  minFee: Input_core_apimessages_Money
  maxFee: Input_core_apimessages_Money
  sellingFeePercent: String
  processingFees: Input_core_apimessages_ProcessingFees
}

input Input_core_apimessages_SellingFeesRequest @join__type(graph: RQL) {
  channel: core_apimessages_Channel
}

input Input_core_apimessages_SellingFeesResponse @join__type(graph: RQL) {
  fees: Input_core_apimessages_SellingFees
}

input Input_core_apimessages_SetAccertifyTokensRequest @join__type(graph: RQL) {
  checkoutId: String
  accertifyDeviceInfo: Input_core_apimessages_AccertifyDeviceInfo
}

input Input_core_apimessages_SetAccertifyTokensResponse @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
}

input Input_core_apimessages_SetupPaymentMethodsRequest @join__type(graph: RQL) {
  shopCurrency: String
  adyenDetails: Input_core_apimessages_SetupPaymentMethodsRequestAdyenDetails
  paypalDetails: Input_core_apimessages_SetupPaymentMethodsRequestPaypalDetails
  returnPolicyDetails: Input_core_apimessages_ReturnPolicy
  creditCard: Input_core_apimessages_BillingCreditCardEntry
}

input Input_core_apimessages_SetupPaymentMethodsRequestAdyenDetails @join__type(graph: RQL) {
  legalEntity: core_apimessages_AdyenLegalEntity
  individualDetails: Input_core_apimessages_SetupPaymentMethodsRequestIndividualAdyenDetails
  businessDetails: Input_core_apimessages_SetupPaymentMethodsRequestBusinessAdyenDetails
  solePropDetails: Input_core_apimessages_SetupPaymentMethodsRequestSolePropAdyenDetails
}

input Input_core_apimessages_SetupPaymentMethodsRequestBusinessAdyenDetails @join__type(graph: RQL) {
  originCountryCode: String
  legalBusinessName: String
}

input Input_core_apimessages_SetupPaymentMethodsRequestIndividualAdyenDetails @join__type(graph: RQL) {
  firstName: String
  lastName: String
  originCountryCode: String
}

input Input_core_apimessages_SetupPaymentMethodsRequestPaypalDetails @join__type(graph: RQL) {
  email: String
  legalCountryCode: String
}

input Input_core_apimessages_SetupPaymentMethodsRequestSolePropAdyenDetails @join__type(graph: RQL) {
  legalName: String
  originCountryCode: String
}

input Input_core_apimessages_SetupPaymentMethodsResponse @join__type(graph: RQL) {
  errors: [Input_core_apimessages_Error]
}

input Input_core_apimessages_SharedSignalData @join__type(graph: RQL) {
  buyerPrice: Input_core_apimessages_Money
  originalPrice: Input_core_apimessages_Money
  sellerLocationDisplay: String
}

input Input_core_apimessages_Shipment @join__type(graph: RQL) {
  toAddress: Input_core_apimessages_Address
  fromAddress: Input_core_apimessages_Address
  package: Input_core_apimessages_ShippingLabelPackage
  shippingProtection: Boolean
  signatureRequired: Boolean
  mediaMailQualified: Boolean
  defaultPaymentMethod: core_apimessages_FeePaymentMethod
  carrierRates: [Input_core_apimessages_CarrierRateGroup]
  shippingMethod: core_apimessages_ShippingMethod
  """shipments.uuid"""
  id: String
  orderUuids: [String]
  shippingProtectionPrice: Input_core_apimessages_Money
  toAddressIsResidential: Boolean
}

input Input_core_apimessages_ShipmentItem @join__type(graph: RQL) {
  """products.id"""
  productId: String
  declaredValue: Input_core_apimessages_Money
}

input Input_core_apimessages_ShipmentsRequest @join__type(graph: RQL) {
  shipmentUuids: [String]
}

input Input_core_apimessages_ShipmentsResponse @join__type(graph: RQL) {
  shipments: [Input_core_apimessages_Shipment]
}

input Input_core_apimessages_ShippingLabelPackage @join__type(graph: RQL) {
  length: Input_core_apimessages_Measurement
  height: Input_core_apimessages_Measurement
  width: Input_core_apimessages_Measurement
  weight: Input_core_apimessages_Measurement
  predefinedPackage: String
  id: String
  reverbSuggested: Boolean
  allowedCarriers: [String]
  packageSizeSuggestionId: String
}

input Input_core_apimessages_ShippingPrice @join__type(graph: RQL) {
  shippingMethod: core_apimessages_ShippingMethod
  """in user currency, VAT conditionally included"""
  rate: Input_core_apimessages_Money
  """in shop currency, VAT conditionally included"""
  originalRate: Input_core_apimessages_Money
  shippingRegionCode: String
  carrierCalculated: Boolean
  destinationPostalCodeNeeded: Boolean
  regional: Boolean
  """in shop currency, no VAT"""
  originalRateVatExcluded: Input_core_apimessages_Money
  shippingRateId: String
  postalCode: String
}

input Input_core_apimessages_ShippingPrices @join__type(graph: RQL) {
  shippingPrices: [Input_core_apimessages_ShippingPrice]
  localPickup: Boolean
  freeExpeditedShipping: Boolean
  localPickupOnly: Boolean
  """user shipping region code"""
  shippingRegionCode: String
  shippingAddress: Input_core_apimessages_Address
}

input Input_core_apimessages_ShippingPricesResponse @join__type(graph: RQL) {
  prices: [Input_core_apimessages_Money]
  shippingPrices: [Input_core_apimessages_ShippingPrices]
}

input Input_core_apimessages_ShippingProfile @join__type(graph: RQL) {
  localPickup: Boolean
  categoryUuids: [String]
  shippingRates: Input_core_apimessages_ShippingRates
  name: String
  id: String
}

"""POST /shipping_protection"""
input Input_core_apimessages_ShippingProtectionRequest @join__type(graph: RQL) {
  shipmentItems: [Input_core_apimessages_ShipmentItem]
  fromCountryCode: String
  toCountryCode: String
  shipmentType: core_apimessages_Shipment_ShipmentType
}

"""POST /shipping_protection"""
input Input_core_apimessages_ShippingProtectionResponse @join__type(graph: RQL) {
  price: Input_core_apimessages_Money
  shippingProtectionStatus: core_apimessages_ShippingProtectionStatus
  signatureRequiredStatus: core_apimessages_SignatureRequiredStatus
  signatureRequiredCosts: [Input_core_apimessages_SignatureRequiredCost]
}

input Input_core_apimessages_ShippingRate @join__type(graph: RQL) {
  displayName: String
  price: Input_core_apimessages_Money
}

input Input_core_apimessages_ShippingRates @join__type(graph: RQL) {
  regionCode: String
  rate: Input_core_apimessages_Money
  incrementalRate: Input_core_apimessages_Money
  freeShippingThreshold: Input_core_apimessages_Money
  regionType: core_apimessages_ShippingRates_RegionType
  expeditedRate: Input_core_apimessages_Money
  regionName: String
  rateType: String
  regionalRates: [Input_core_apimessages_RegionalShippingRate]
  regionalExpeditedRates: [Input_core_apimessages_RegionalShippingRate]
}

input Input_core_apimessages_ShippingRatesForShippingProfile @join__type(graph: RQL) {
  shippingProfileId: String
  shippingRates: [Input_core_apimessages_ShippingRates]
}

input Input_core_apimessages_ShippingRegionSetting @join__type(graph: RQL) {
  regionCode: String
  regionName: String
  isDomestic: Boolean
  allowedToShipCarrierCalculated: Boolean
}

input Input_core_apimessages_ShipsSoonSignal @join__type(graph: RQL) {
  translations: Input_core_apimessages_SignalTranslation
  isValid: Boolean
}

"""A public representation of a shop, accessible to all users."""
input Input_core_apimessages_Shop @join__type(graph: RQL) {
  uuid: String
  name: String
  slug: String
  currency: String
  shopType: core_apimessages_Shop_ShopType
  paymentPolicy: String
  shippingPolicy: String
  id: String
  preferredSeller: Boolean
  quickShipper: Boolean
  quickResponder: Boolean
  userUuid: String
  onVacation: Boolean
  description: String
  userId: String
  website: String
  showSold: Boolean
  vatId: String
  """Unused by any client but needed in mobile apps RQL queries"""
  recentlyShipped: Boolean
  quickShipperSpeed: core_apimessages_Shop_QuickShipperSpeed
  createdAt: Timestamp
  lowballOfferPercentage: Int
  manufacturersSafetyInformation: String
}

input Input_core_apimessages_ShopAdyenBalancePlatformNotificationsIndexRequest @join__type(graph: RQL) {
  shopId: String
  eventTypes: [String]
  offset: String
  limit: String
}

input Input_core_apimessages_ShopAdyenBalancePlatformNotificationsIndexResponse @join__type(graph: RQL) {
  notifications: [Input_core_apimessages_AdyenBalancePlatformNotification]
  totalResults: String
  offset: String
  limit: String
}

input Input_core_apimessages_ShopBadge @join__type(graph: RQL) {
  badgeType: String
  completedPercentage: Float
  """optional: we won't display requirements for the preferred seller badge"""
  requirements: [Input_core_apimessages_ShopBadgeRequirement]
}

input Input_core_apimessages_ShopBadgeRequirement @join__type(graph: RQL) {
  requirement: String
  completed: Boolean
}

input Input_core_apimessages_ShopCampaignCoupon @join__type(graph: RQL) {
  id: String
  code: String
  descriptionSummary: String
  restrictionsSummary: String
  expiresAt: Timestamp
  discountValue: String
  status: core_apimessages_ShopCampaignCoupon_Status
  couponHeader: String
  applyToNewConditions: Boolean
  applyToUsedConditions: Boolean
  applyToBStockConditions: Boolean
}

input Input_core_apimessages_ShopCertifiedPreOwned @join__type(graph: RQL) {
  title: String
  description: String
  tooltipDescription: String
  badgeIconUrl: String
  brandName: String
  pageUrl: String
  lightModeBrandIconUrl: String
  darkModeBrandIconUrl: String
}

"""A private representation of a shop, accessible to owners and admins."""
input Input_core_apimessages_ShopConfig @join__type(graph: RQL) {
  defaultLocale: String
  currencySetting: String
  shippingRegionSettings: [Input_core_apimessages_ShippingRegionSetting]
  sameDayShippingConfigured: Boolean
  listableConditions: [Input_core_apimessages_Condition]
  offerPolicy: Input_core_apimessages_ShopConfig_OfferPolicy
  shopSupportedLocaleCodes: [String]
  hasAccountRep: Boolean
  canCurateSales: Boolean
  isShopInEu: Boolean
  inclusiveVatPricingEnabled: Boolean
  acceptsAffirm: Boolean
  isShopInUk: Boolean
  firstTimeSeller: Boolean
  marketplaceTaxReportingCountryCode: String
}

input Input_core_apimessages_ShopConfig_OfferPolicy @join__type(graph: RQL) {
  autoRejectLowOffers: Boolean
  lowballPercentage: Int
  autoAcceptHighOffers: Boolean
}

input Input_core_apimessages_ShopEntry @join__type(graph: RQL) {
  currency: String
  originCountryCode: String
  defaultLocale: String
  name: String
  address: Input_core_apimessages_AddressEntry
  shopType: core_apimessages_Shop_ShopType
}

input Input_core_apimessages_ShopReturnPoliciesRequest @join__type(graph: RQL) {
  shopUuids: [String]
  ids: [String]
  uuids: [String]
  slugs: [String]
}

input Input_core_apimessages_ShopReturnPoliciesResponse @join__type(graph: RQL) {
  shopReturnPolicies: [Input_core_apimessages_ShopReturnPolicy]
}

input Input_core_apimessages_ShopReturnPolicy @join__type(graph: RQL) {
  shopUuid: String
  returnPolicy: Input_core_apimessages_ReturnPolicy
}

input Input_core_apimessages_ShopShippingProfiles @join__type(graph: RQL) {
  shopUuid: String
  shippingProfiles: [Input_core_apimessages_ShippingProfile]
}

input Input_core_apimessages_ShopShippingProfilesRequest @join__type(graph: RQL) {
  shopUuids: [String]
  ids: [String]
  uuids: [String]
  slugs: [String]
}

input Input_core_apimessages_ShopShippingProfilesResponse @join__type(graph: RQL) {
  shopShippingProfiles: [Input_core_apimessages_ShopShippingProfiles]
}

input Input_core_apimessages_ShopTaxPolicies @join__type(graph: RQL) {
  shopUuid: String
  taxPolicies: [Input_core_apimessages_ShopTaxPolicy]
}

input Input_core_apimessages_ShopTaxPolicy @join__type(graph: RQL) {
  policyType: core_apimessages_ShopTaxPolicy_PolicyType
  displayLocation: String
  displayRate: String
  vatPolicy: Boolean
}

input Input_core_apimessages_Shop_OfferPolicy @join__type(graph: RQL) {
  autoRejectLowOffers: Boolean
  lowballPercentage: Int
}

input Input_core_apimessages_ShopsResponse @join__type(graph: RQL) {
  shops: [Input_core_apimessages_Shop]
}

input Input_core_apimessages_ShowAdyenRegionRequest @join__type(graph: RQL) {
  _: Boolean
}

input Input_core_apimessages_ShowAdyenRegionResponse @join__type(graph: RQL) {
  webRegion: String
  iosRegion: String
  androidRegion: String
}

input Input_core_apimessages_SignalLink @join__type(graph: RQL) {
  url: String
  text: String
}

input Input_core_apimessages_SignalTranslation @join__type(graph: RQL) {
  title: String
  subtitle: String
  tooltipText: String
}

input Input_core_apimessages_SignatureRequiredCost @join__type(graph: RQL) {
  carrier: String
  amount: Input_core_apimessages_Money
}

input Input_core_apimessages_SiteBanner @join__type(graph: RQL) {
  id: String
  heading: String
  subheading: String
  callToAction: String
  url: Input_core_apimessages_Link
  mobileUrl: Input_core_apimessages_Link
  mobileWebUrl: Input_core_apimessages_Link
  imageUrl: String
  """Deprecated"""
  webOnly: Boolean
  mobileImageUrl: String
  startsAt: Timestamp
  endsAt: Timestamp
  contentSponsorship: Input_core_apimessages_ContentSponsorship
  downtime: Boolean
  hasPhotos: Boolean
  showOnMobile: Boolean
  showOnMyUpdates: Boolean
}

input Input_core_apimessages_SiteBannerRequest @join__type(graph: RQL) {
  limit: Int
  visibilityScope: core_apimessages_SiteBannerRequest_VisibilityScope
}

input Input_core_apimessages_SiteBannerResponse @join__type(graph: RQL) {
  siteBanner: Input_core_apimessages_SiteBanner
  siteBanners: [Input_core_apimessages_SiteBanner]
}

input Input_core_apimessages_StartCheckoutForListingRequest @join__type(graph: RQL) {
  listingId: String
  paymentMethod: core_apimessages_CheckoutPaymentMethod_Type
  quantity: Int
  protectionPlanId: String
}

input Input_core_apimessages_StartCheckoutForListingResponse @join__type(graph: RQL) {
  redirectUrl: String
  checkoutId: String
}

input Input_core_apimessages_StartCheckoutRequest @join__type(graph: RQL) {
  checkoutBundlingId: String
  paymentMethodType: core_apimessages_CheckoutPaymentMethod_Type
}

input Input_core_apimessages_StartCheckoutResponse @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
}

input Input_core_apimessages_StartPaypalCheckoutRequest @join__type(graph: RQL) {
  checkoutBundlingId: String
  """Item quantity for Buy It Now checkout on item page"""
  quantity: Int
  paymentMethodType: core_apimessages_StartPaypalCheckoutRequest_PaymentMethodType
  protectionPlanId: String
}

input Input_core_apimessages_StartPaypalCheckoutResponse @join__type(graph: RQL) {
  """checkout UUID"""
  id: String
  paypalOrderId: String
  redirectUrl: String
}

input Input_core_apimessages_Storefront @join__type(graph: RQL) {
  channel: String
  slug: String
  name: String
  shopUuid: String
  id: String
  description: String
  shippingPolicy: String
}

input Input_core_apimessages_StorefrontReturnPoliciesRequest @join__type(graph: RQL) {
  slugs: [String]
}

input Input_core_apimessages_StorefrontReturnPoliciesResponse @join__type(graph: RQL) {
  returnPolicies: [Input_core_apimessages_ReturnPolicy]
}

input Input_core_apimessages_StorefrontsRequest @join__type(graph: RQL) {
  slugs: [String]
}

input Input_core_apimessages_StorefrontsResponse @join__type(graph: RQL) {
  storefronts: [Input_core_apimessages_Storefront]
}

input Input_core_apimessages_Subregion @join__type(graph: RQL) {
  code: String
  name: String
  id: String
}

input Input_core_apimessages_SuperRegion @join__type(graph: RQL) {
  code: String
  name: String
  id: String
}

input Input_core_apimessages_Tax1099kReportingThresholdSearchResult @join__type(graph: RQL) {
  id: String
  year: String
  region: String
  salesAmountCents: String
  transactionCount: String
}

input Input_core_apimessages_TaxFormDownload @join__type(graph: RQL) {
  id: String
  status: core_apimessages_TaxFormDownload_Status
  url: String
}

input Input_core_apimessages_TaxFormDownloadRequest @join__type(graph: RQL) {
  id: String
}

input Input_core_apimessages_TaxFormDownloadResponse @join__type(graph: RQL) {
  taxFormDownload: Input_core_apimessages_TaxFormDownload
}

input Input_core_apimessages_TaxIdentification @join__type(graph: RQL) {
  id: String
  taxId: String
  status: core_apimessages_TaxIdentification_Status
  taxType: core_apimessages_TaxIdentification_TaxType
  countryCode: String
  active: Boolean
}

input Input_core_apimessages_TaxIdentificationUpdate @join__type(graph: RQL) {
  id: String
  taxId: String
  countryCode: String
}

input Input_core_apimessages_TaxPoliciesRequest @join__type(graph: RQL) {
  id: String
  uuid: String
  slug: String
  type: core_apimessages_TaxPoliciesRequest_TaxPoliciesType
}

input Input_core_apimessages_TaxProfile @join__type(graph: RQL) {
  id: String
  tinType: String
  state: String
  createdAt: Timestamp
  updatedAt: Timestamp
  verifiedAt: Timestamp
  firstName: String
  lastName: String
  name: String
  mask: String
  address: Input_core_apimessages_Address
  verificationStatus: core_apimessages_TaxProfile_TaxProfileVerificationStatus
}

input Input_core_apimessages_ThirdPartyAdsAttributes @join__type(graph: RQL) {
  email: String
  firstName: String
  lastName: String
  orderBundleId: String
  billingAddress: String
  billingAddressExtended: String
  billingPostalCode: String
  shippingAddress: String
  shippingAddressExtended: String
  shippingPostalCode: String
  mobilePhoneNumber: String
  country: String
  language: String
  currency: String
  amount: String
  cartItemsJson: String
  paymentType: String
}

input Input_core_apimessages_ThreeDSOneData @join__type(graph: RQL) {
  paReq: String
  md: String
  termUrl: String
  redirectUrl: String
}

input Input_core_apimessages_TrackBumpInteractionRequest @join__type(graph: RQL) {
  bumpKey: Input_core_apimessages_BumpKey
  listingId: String
  interactionType: arbiter_Interaction_InteractionType
  componentName: String
}

input Input_core_apimessages_TrackBumpInteractionResponse @join__type(graph: RQL) {
  bumpKey: Input_core_apimessages_BumpKey
}

input Input_core_apimessages_Trait @join__type(graph: RQL) {
  """traits.uuid"""
  keyId: String
  """traits.value_uuid"""
  valueId: String
  value: String
}

input Input_core_apimessages_TraitResponse @join__type(graph: RQL) {
  """traits.traitable_id (polymorphic foreign key, with 'type')"""
  traitableId: String
  traits: [Input_core_apimessages_Trait]
}

input Input_core_apimessages_TraitsRequest @join__type(graph: RQL) {
  """traits.traitable_id (polymorphic foreign key, with 'type')"""
  ids: [String]
  type: core_apimessages_TraitsRequest_TraitableType
}

input Input_core_apimessages_TraitsResponse @join__type(graph: RQL) {
  traits: [Input_core_apimessages_TraitResponse]
}

input Input_core_apimessages_TruliooOnboarding @join__type(graph: RQL) {
  id: String
  verificationStatus: core_apimessages_TruliooOnboarding_VerificationStatus
  completedAt: Timestamp
}

input Input_core_apimessages_TruliooOnboardingRecord @join__type(graph: RQL) {
  id: String
  entityType: core_apimessages_TruliooOnboardingRecord_EntityType
  workflowStatus: core_apimessages_TruliooOnboardingRecord_Status
  clientId: String
  flowId: String
  isParent: Boolean
  email: String
  fullName: String
}

input Input_core_apimessages_TruliooOnboardingRecordResendPscEmailRequest @join__type(graph: RQL) {
  truliooOnboardingRecordId: String
}

input Input_core_apimessages_TruliooOnboardingRecordResendPscEmailResponse @join__type(graph: RQL) {
  truliooOnboardingRecordId: String
}

input Input_core_apimessages_TruliooOnboardingRecordResponse @join__type(graph: RQL) {
  truliooOnboardingRecord: Input_core_apimessages_TruliooOnboardingRecord
}

input Input_core_apimessages_TruliooOnboardingResponse @join__type(graph: RQL) {
  truliooOnboarding: Input_core_apimessages_TruliooOnboarding
  errors: [Input_core_apimessages_Error]
}

input Input_core_apimessages_TypicalNewPriceDisplay @join__type(graph: RQL) {
  amountDisplay: String
  descriptionDisplay: String
  savingsDisplay: String
}

input Input_core_apimessages_UndoDeleteMyFavoriteRequest @join__type(graph: RQL) {
  id: String
  type: core_apimessages_FavoriteType
}

input Input_core_apimessages_UndoDeleteMyFavoriteResponse @join__type(graph: RQL) {
  errors: [Input_core_apimessages_Error]
  favorite: Input_core_apimessages_Favorite
}

input Input_core_apimessages_UniversalPromoCampaign @join__type(graph: RQL) {
  id: String
  name: String
  code: String
  expiresAt: Timestamp
  marketingChannel: String
  newBuyer: Boolean
  redemptionLimit: Int
  hasRedemptionLimit: Boolean
  universalPromoCurrencies: [Input_core_apimessages_UniversalPromoCurrency]
  categories: [Input_core_apimessages_NodesCategory]
  lapsedBuyer: Boolean
  lapsedBuyerLastPurchaseDate: Timestamp
}

input Input_core_apimessages_UniversalPromoCurrency @join__type(graph: RQL) {
  amount: Input_core_apimessages_Money
  minPurchaseAmount: Input_core_apimessages_Money
}

input Input_core_apimessages_UpdateAdCampaignRequest @join__type(graph: RQL) {
  adCampaign: Input_core_apimessages_AdCampaign
}

input Input_core_apimessages_UpdateAdCampaignResponse @join__type(graph: RQL) {
  adCampaign: Input_core_apimessages_AdCampaign
}

input Input_core_apimessages_UpdateAdGroupKeywordsRequest @join__type(graph: RQL) {
  keywords: [String]
  adGroupUuid: String
}

input Input_core_apimessages_UpdateAdGroupKeywordsResponse @join__type(graph: RQL) {
  adGroupKeywords: [Input_core_apimessages_AdGroupKeyword]
}

input Input_core_apimessages_UpdateAdGroupRequest @join__type(graph: RQL) {
  adGroup: Input_core_apimessages_AdGroup
}

input Input_core_apimessages_UpdateAdGroupResponse @join__type(graph: RQL) {
  adGroup: Input_core_apimessages_AdGroup
}

input Input_core_apimessages_UpdateAdRequest @join__type(graph: RQL) {
  ad: Input_core_apimessages_Ad
}

input Input_core_apimessages_UpdateAdResponse @join__type(graph: RQL) {
  ad: Input_core_apimessages_Ad
}

input Input_core_apimessages_UpdateAdZoneRequest @join__type(graph: RQL) {
  adZone: Input_core_apimessages_AdZone
}

input Input_core_apimessages_UpdateAdZoneResponse @join__type(graph: RQL) {
  adZone: Input_core_apimessages_AdZone
}

input Input_core_apimessages_UpdateAddressRequest @join__type(graph: RQL) {
  """addresses.uuid"""
  id: String
  addressType: core_apimessages_MyAddressType
  isPrimary: Boolean
  address: Input_core_apimessages_AddressEntry
  uuid: String
}

input Input_core_apimessages_UpdateAddressResponse @join__type(graph: RQL) {
  address: Input_core_apimessages_Address
}

input Input_core_apimessages_UpdateAdvertiserRequest @join__type(graph: RQL) {
  advertiser: Input_core_apimessages_Advertiser
}

input Input_core_apimessages_UpdateAdvertiserResponse @join__type(graph: RQL) {
  advertiser: Input_core_apimessages_Advertiser
}

input Input_core_apimessages_UpdateBillingMethodRequest @join__type(graph: RQL) {
  creditCard: Input_core_apimessages_BillingCreditCardEntry
  browserInfo: String
  returnUrl: String
  origin: String
  """
  optional, to indicate that a new card is being added specifically for a partial payment
  """
  partialPayment: Boolean
}

input Input_core_apimessages_UpdateBillingMethodResponse @join__type(graph: RQL) {
  errors: [Input_core_apimessages_Error]
  creditCard: Input_core_apimessages_CreditCard
  adyenPaymentResult: Input_core_apimessages_AdyenPaymentResult
  billingMethodUuid: String
}

input Input_core_apimessages_UpdateCartItemProtectionPlanRequest @join__type(graph: RQL) {
  cartItemUuid: String
  protectionPlan: Input_core_apimessages_ProtectionPlan
}

input Input_core_apimessages_UpdateCartItemProtectionPlanResponse @join__type(graph: RQL) {
  cartItemUuid: String
  protectionPlan: Input_core_apimessages_ProtectionPlan
}

input Input_core_apimessages_UpdateCheckoutBillingAddressRequest @join__type(graph: RQL) {
  """checkout UUID"""
  id: String
  billingAddress: Input_core_apimessages_AddressEntry
  accertifyDeviceInfo: Input_core_apimessages_AccertifyDeviceInfo
}

input Input_core_apimessages_UpdateCheckoutBillingAddressResponse @join__type(graph: RQL) {
  """checkout UUID"""
  id: String
}

input Input_core_apimessages_UpdateCheckoutPaypalOrderRequest @join__type(graph: RQL) {
  """checkout UUID"""
  id: String
  paypalOrderId: String
}

input Input_core_apimessages_UpdateCheckoutPaypalOrderResponse @join__type(graph: RQL) {
  """checkout UUID"""
  id: String
}

input Input_core_apimessages_UpdateCrossPlatformListingSessionRequest @join__type(graph: RQL) {
  action: core_apimessages_UpdateCrossPlatformListingSessionRequest_Action
  listingId: String
}

input Input_core_apimessages_UpdateCrossPlatformListingSessionResponse @join__type(graph: RQL) {
  _: Boolean
}

input Input_core_apimessages_UpdateFeedbackRequest @join__type(graph: RQL) {
  orderUuid: String
  message: String
  rating: Int
  shippingSatisfactory: Input_google_protobuf_BoolValue
  conditionSatisfactory: Input_google_protobuf_BoolValue
}

input Input_core_apimessages_UpdateFeedbackResponse @join__type(graph: RQL) {
  feedback: Input_core_apimessages_Feedback
}

input Input_core_apimessages_UpdateGearCollectionItemRequest @join__type(graph: RQL) {
  gearCollectionItemEntry: Input_core_apimessages_GearCollectionItemEntry
}

input Input_core_apimessages_UpdateGearCollectionItemResponse @join__type(graph: RQL) {
  gearCollectionItem: Input_core_apimessages_GearCollectionItem
}

input Input_core_apimessages_UpdateGearCollectionItemStateRequest @join__type(graph: RQL) {
  id: String
  newState: core_apimessages_GearCollectionItem_State
}

input Input_core_apimessages_UpdateGearCollectionItemStateResponse @join__type(graph: RQL) {
  gearCollectionItem: Input_core_apimessages_GearCollectionItem
}

input Input_core_apimessages_UpdateInternationalTaxProfileRequest @join__type(graph: RQL) {
  name: String
  tinType: String
  tin: String
  dateOfBirth: String
  businessRegistrationNumber: String
  addressAttributes: Input_core_apimessages_AddressEntry
}

input Input_core_apimessages_UpdateInternationalTaxProfileResponse @join__type(graph: RQL) {
  internationalTaxProfile: Input_core_apimessages_InternationalTaxProfile
  businessRegistrationNumber: Input_core_apimessages_BusinessRegistrationNumber
}

input Input_core_apimessages_UpdateListingRequest @join__type(graph: RQL) {
  listingEntry: Input_core_apimessages_ListingEntry
  updateType: core_apimessages_UpdateListingRequest_UpdateType
  fields: [String]
}

input Input_core_apimessages_UpdateListingResponse @join__type(graph: RQL) {
  listing: Input_core_apimessages_Listing
}

input Input_core_apimessages_UpdateListingStateRequest @join__type(graph: RQL) {
  productId: String
  newState: core_apimessages_ListingStateUpdate
  endingReason: String
}

input Input_core_apimessages_UpdateListingStateResponse @join__type(graph: RQL) {
  newState: core_apimessages_ListingStateUpdate
}

input Input_core_apimessages_UpdateMyCreditCardRequest @join__type(graph: RQL) {
  id: String
  creditCard: Input_core_apimessages_UpdateMyCreditCardRequest_CreditCardEntry
  billingAddress: Input_core_apimessages_AddressEntry
}

input Input_core_apimessages_UpdateMyCreditCardRequest_CreditCardEntry @join__type(graph: RQL) {
  """Expiration month on card. Example: "2" for February"""
  expirationMonth: String
  """
  Full expiration year on card. Example: "2049"
  """
  expirationYear: String
  cardholderName: String
  primaryForCheckout: Boolean
}

input Input_core_apimessages_UpdateMyCreditCardResponse @join__type(graph: RQL) {
  creditCard: Input_core_apimessages_CreditCard
}

input Input_core_apimessages_UpdateMyGearCollectionSettingsRequest @join__type(graph: RQL) {
  autoAddOrders: Boolean
}

input Input_core_apimessages_UpdateMyGearCollectionSettingsResponse @join__type(graph: RQL) {
  gearCollectionSettings: Input_core_apimessages_GearCollectionSettingsResponse
}

input Input_core_apimessages_UpdateMyShippingProfile @join__type(graph: RQL) {
  id: String
  name: String
  categoryUuids: [String]
  localPickup: Boolean
  offersIncrementalRates: Boolean
  shippingRates: [Input_core_apimessages_ShippingRates]
}

input Input_core_apimessages_UpdateMyShopCampaignRequest @join__type(graph: RQL) {
  shopCampaignEntry: Input_core_apimessages_MyShopCampaignEntry
}

input Input_core_apimessages_UpdateMyShopCampaignResponse @join__type(graph: RQL) {
  shopCampaign: Input_core_apimessages_MyShopCampaign
}

input Input_core_apimessages_UpdateMyShopRequest @join__type(graph: RQL) {
  shop: Input_core_apimessages_ShopEntry
}

input Input_core_apimessages_UpdateMyShopResponse @join__type(graph: RQL) {
  errors: [Input_core_apimessages_Error]
  shop: Input_core_apimessages_Shop
  address: Input_core_apimessages_Address
}

input Input_core_apimessages_UpdateMyShopShippingProfilesRequest @join__type(graph: RQL) {
  shippingProfiles: [Input_core_apimessages_UpdateMyShippingProfile]
}

input Input_core_apimessages_UpdateMyShopShippingProfilesResponse @join__type(graph: RQL) {
  shippingProfiles: [Input_core_apimessages_UpdateMyShippingProfile]
}

input Input_core_apimessages_UpdateNegotiationRequest @join__type(graph: RQL) {
  """negotiations.id"""
  id: String
  message: String
  offerItems: [Input_core_apimessages_OfferItemRequest]
  action: core_apimessages_NegotiationAction
  shippingAddressUuid: String
  creditCardId: String
  conditionallyAcceptedBySeller: Boolean
}

input Input_core_apimessages_UpdateNegotiationResponse @join__type(graph: RQL) {
  negotiation: Input_core_apimessages_Negotiation
}

input Input_core_apimessages_UpdateProductReviewRequest @join__type(graph: RQL) {
  rating: Int
  body: String
  title: String
  comparisonShoppingPageId: String
}

input Input_core_apimessages_UpdateProductReviewResponse @join__type(graph: RQL) {
  id: String
}

input Input_core_apimessages_UpdateReturnPolicyRequest @join__type(graph: RQL) {
  newReturnWindowDays: Int
  usedReturnWindowDays: Int
  restockingFeePercent: Int
  specialConditions: String
}

input Input_core_apimessages_UpdateReturnPolicyResponse @join__type(graph: RQL) {
  errors: [Input_core_apimessages_Error]
  returnPolicy: Input_core_apimessages_ReturnPolicy
}

input Input_core_apimessages_UpdateTaxIdentificationRequest @join__type(graph: RQL) {
  taxIdentification: Input_core_apimessages_TaxIdentificationUpdate
}

input Input_core_apimessages_UpdateTaxIdentificationResponse @join__type(graph: RQL) {
  taxIdentification: Input_core_apimessages_TaxIdentification
  shopId: String
}

input Input_core_apimessages_UpdateUniversalPromoCampaignRequest @join__type(graph: RQL) {
  universalPromoCampaign: Input_core_apimessages_UniversalPromoCampaign
}

input Input_core_apimessages_UpdateUniversalPromoCampaignResponse @join__type(graph: RQL) {
  universalPromoCampaign: Input_core_apimessages_UniversalPromoCampaign
}

input Input_core_apimessages_UpdateUserShopPermissionRequest @join__type(graph: RQL) {
  userId: String
  permissionLevel: core_apimessages_UserShopPermission_PermissionLevel
}

input Input_core_apimessages_UpdateWatchResponse @join__type(graph: RQL) {
  listingId: String
  userId: String
  id: String
}

"""
  UpsertMyFavoriteRequest field spec:
  - query_params should be used when favoriting a filtered query, a CSP (can include filters), Shop saved searches, etc.
  - shop_id should be used when favoriting a shop
We could have reused query_params to contain shop_id (e.g. "shop_id=1"), but doing seems
burdensome/possibly confusing for clients. So we are opting to keep this request proto explicit,
aware that as we add more types to Favorite (articles warrants article_id field), this proto will
grow in width.
"""
input Input_core_apimessages_UpsertMyFavoriteRequest @join__type(graph: RQL) {
  feedEnabled: Boolean
  emailEnabled: Boolean
  shopId: Int
  queryParams: String
}

input Input_core_apimessages_UpsertMyFavoriteResponse @join__type(graph: RQL) {
  errors: [Input_core_apimessages_Error]
  favorite: Input_core_apimessages_Favorite
}

input Input_core_apimessages_User @join__type(graph: RQL) {
  uuid: String
  name: String
  shopUuid: String
  """users.id"""
  id: String
  firstName: String
  shortname: String
}

input Input_core_apimessages_UserBadge @join__type(graph: RQL) {
  count: Int
  displayText: String
  Links: Input_core_apimessages_UserBadgeLinks
  badgeLinks: Input_core_apimessages_UserBadgeLinks
}

input Input_core_apimessages_UserBadgeLinks @join__type(graph: RQL) {
  web: Input_core_apimessages_Link
}

input Input_core_apimessages_UserNotification @join__type(graph: RQL) {
  notificationType: core_apimessages_UserNotificationType
  title: String
  description: String
  notificationLinks: Input_core_apimessages_UserNotificationLinks
  key: core_apimessages_UserNotification_UserNotificationKey
  hidden: Boolean
}

input Input_core_apimessages_UserNotificationLinks @join__type(graph: RQL) {
  web: Input_core_apimessages_Link
}

input Input_core_apimessages_UserSearchResult @join__type(graph: RQL) {
  id: String
  email: String
  shopId: String
  shopName: String
  fullName: String
}

input Input_core_apimessages_UserService @join__type(graph: RQL) {
  """internal id"""
  id: String
  """The provider's user email, not Reverb's"""
  email: String
  provider: core_apimessages_UserService_Provider
}

input Input_core_apimessages_UserShopPermission @join__type(graph: RQL) {
  id: String
  userId: String
  email: String
  permissionLevel: core_apimessages_UserShopPermission_PermissionLevel
}

input Input_core_apimessages_UserWatchesRequest @join__type(graph: RQL) {
  listingIds: [String]
  offset: Int
  limit: Int
  channel: core_apimessages_Channel
  listingsState: core_apimessages_UserWatchesRequest_ListingState
  profileSlug: String
}

input Input_core_apimessages_UsersRequest @join__type(graph: RQL) {
  uuids: [String]
  fullname: Boolean
}

input Input_core_apimessages_UsersResponse @join__type(graph: RQL) {
  users: [Input_core_apimessages_User]
}

input Input_core_apimessages_VerifyPromotionalCodeRequest @join__type(graph: RQL) {
  token: String
}

input Input_core_apimessages_VerifyPromotionalCodeResponse @join__type(graph: RQL) {
  success: Boolean
  message: String
}

input Input_core_apimessages_Video @join__type(graph: RQL) {
  """video_links.id"""
  id: String
  """
  video_links.videolinkable_id (polymorphic foreign key, with 'item_type')
  """
  itemId: String
  itemType: String
  link: String
  """video_links.youtube_video_id"""
  youtubeVideoId: String
  empty: Boolean
}

input Input_core_apimessages_VideoLink @join__type(graph: RQL) {
  youtubeVideoId: String
  youtubeLink: String
}

input Input_core_apimessages_VideosRequest @join__type(graph: RQL) {
  type: core_apimessages_VideosRequest_VideolinkableType
  """(products|shops).id"""
  ids: [String]
  uuids: [String]
  slugs: [String]
}

input Input_core_apimessages_VideosResponse @join__type(graph: RQL) {
  videos: [Input_core_apimessages_Video]
}

input Input_core_apimessages_WatchResponse @join__type(graph: RQL) {
  listingId: String
  watching: Boolean
}

input Input_core_apimessages_WatchesRequest @join__type(graph: RQL) {
  listingIds: [String]
  offset: Int
  limit: Int
  channel: core_apimessages_Channel
  listingsState: core_apimessages_WatchesRequest_ListingState
}

input Input_core_apimessages_WatchesResponse @join__type(graph: RQL) {
  watches: [Input_core_apimessages_WatchResponse]
  offset: Int
  limit: Int
  total: Int
}

"""A custom pattern is used for defining custom HTTP verb."""
input Input_google_api_CustomHttpPattern @join__type(graph: RQL) {
  """The name of this custom HTTP verb."""
  kind: String
  """The path matched by this custom verb."""
  path: String
}

"""
  Defines the HTTP configuration for an API service. It contains a list of
[HttpRule][google.api.HttpRule], each specifying the mapping of an RPC method
to one or more HTTP REST API methods.
"""
input Input_google_api_Http @join__type(graph: RQL) {
  """
    A list of HTTP configuration rules that apply to individual API methods.
  
  **NOTE:** All service configuration rules follow "last one wins" order.
  """
  rules: [Input_google_api_HttpRule]
  """
    When set to true, URL path parmeters will be fully URI-decoded except in
  cases of single segment matches in reserved expansion, where "%2F" will be
  left encoded.
  
  The default behavior is to not decode RFC 6570 reserved characters in multi
  segment matches.
  """
  fullyDecodeReservedExpansion: Boolean
}

"""
  `HttpRule` defines the mapping of an RPC method to one or more HTTP
REST API methods. The mapping specifies how different portions of the RPC
request message are mapped to URL path, URL query parameters, and
HTTP request body. The mapping is typically specified as an
`google.api.http` annotation on the RPC method,
see "google/api/annotations.proto" for details.

The mapping consists of a field specifying the path template and
method kind.  The path template can refer to fields in the request
message, as in the example below which describes a REST GET
operation on a resource collection of messages:


    service Messaging {
      rpc GetMessage(GetMessageRequest) returns (Message) {
        option (google.api.http).get = "/v1/messages/{message_id}/{sub.subfield}";
      }
    }
    message GetMessageRequest {
      message SubMessage {
        string subfield = 1;
      }
      string message_id = 1; // mapped to the URL
      SubMessage sub = 2;    // `sub.subfield` is url-mapped
    }
    message Message {
      string text = 1; // content of the resource
    }

The same http annotation can alternatively be expressed inside the
`GRPC API Configuration` YAML file.

    http:
      rules:
        - selector: <proto_package_name>.Messaging.GetMessage
          get: /v1/messages/{message_id}/{sub.subfield}

This definition enables an automatic, bidrectional mapping of HTTP
JSON to RPC. Example:

HTTP | RPC
-----|-----
`GET /v1/messages/123456/foo`  | `GetMessage(message_id: "123456" sub: SubMessage(subfield: "foo"))`

In general, not only fields but also field paths can be referenced
from a path pattern. Fields mapped to the path pattern cannot be
repeated and must have a primitive (non-message) type.

Any fields in the request message which are not bound by the path
pattern automatically become (optional) HTTP query
parameters. Assume the following definition of the request message:


    service Messaging {
      rpc GetMessage(GetMessageRequest) returns (Message) {
        option (google.api.http).get = "/v1/messages/{message_id}";
      }
    }
    message GetMessageRequest {
      message SubMessage {
        string subfield = 1;
      }
      string message_id = 1; // mapped to the URL
      int64 revision = 2;    // becomes a parameter
      SubMessage sub = 3;    // `sub.subfield` becomes a parameter
    }


This enables a HTTP JSON to RPC mapping as below:

HTTP | RPC
-----|-----
`GET /v1/messages/123456?revision=2&sub.subfield=foo` | `GetMessage(message_id: "123456" revision: 2 sub: SubMessage(subfield: "foo"))`

Note that fields which are mapped to HTTP parameters must have a
primitive type or a repeated primitive type. Message types are not
allowed. In the case of a repeated type, the parameter can be
repeated in the URL, as in `...?param=A&param=B`.

For HTTP method kinds which allow a request body, the `body` field
specifies the mapping. Consider a REST update method on the
message resource collection:


    service Messaging {
      rpc UpdateMessage(UpdateMessageRequest) returns (Message) {
        option (google.api.http) = {
          put: "/v1/messages/{message_id}"
          body: "message"
        };
      }
    }
    message UpdateMessageRequest {
      string message_id = 1; // mapped to the URL
      Message message = 2;   // mapped to the body
    }


The following HTTP JSON to RPC mapping is enabled, where the
representation of the JSON in the request body is determined by
protos JSON encoding:

HTTP | RPC
-----|-----
`PUT /v1/messages/123456 { "text": "Hi!" }` | `UpdateMessage(message_id: "123456" message { text: "Hi!" })`

The special name `*` can be used in the body mapping to define that
every field not bound by the path template should be mapped to the
request body.  This enables the following alternative definition of
the update method:

    service Messaging {
      rpc UpdateMessage(Message) returns (Message) {
        option (google.api.http) = {
          put: "/v1/messages/{message_id}"
          body: "*"
        };
      }
    }
    message Message {
      string message_id = 1;
      string text = 2;
    }


The following HTTP JSON to RPC mapping is enabled:

HTTP | RPC
-----|-----
`PUT /v1/messages/123456 { "text": "Hi!" }` | `UpdateMessage(message_id: "123456" text: "Hi!")`

Note that when using `*` in the body mapping, it is not possible to
have HTTP parameters, as all fields not bound by the path end in
the body. This makes this option more rarely used in practice of
defining REST APIs. The common usage of `*` is in custom methods
which don't use the URL at all for transferring data.

It is possible to define multiple HTTP methods for one RPC by using
the `additional_bindings` option. Example:

    service Messaging {
      rpc GetMessage(GetMessageRequest) returns (Message) {
        option (google.api.http) = {
          get: "/v1/messages/{message_id}"
          additional_bindings {
            get: "/v1/users/{user_id}/messages/{message_id}"
          }
        };
      }
    }
    message GetMessageRequest {
      string message_id = 1;
      string user_id = 2;
    }


This enables the following two alternative HTTP JSON to RPC
mappings:

HTTP | RPC
-----|-----
`GET /v1/messages/123456` | `GetMessage(message_id: "123456")`
`GET /v1/users/me/messages/123456` | `GetMessage(user_id: "me" message_id: "123456")`

# Rules for HTTP mapping

The rules for mapping HTTP path, query parameters, and body fields
to the request message are as follows:

1. The `body` field specifies either `*` or a field path, or is
   omitted. If omitted, it indicates there is no HTTP request body.
2. Leaf fields (recursive expansion of nested messages in the
   request) can be classified into three types:
    (a) Matched in the URL template.
    (b) Covered by body (if body is `*`, everything except (a) fields;
        else everything under the body field)
    (c) All other fields.
3. URL query parameters found in the HTTP request are mapped to (c) fields.
4. Any body sent with an HTTP request can contain only (b) fields.

The syntax of the path template is as follows:

    Template = "/" Segments [ Verb ] ;
    Segments = Segment { "/" Segment } ;
    Segment  = "*" | "**" | LITERAL | Variable ;
    Variable = "{" FieldPath [ "=" Segments ] "}" ;
    FieldPath = IDENT { "." IDENT } ;
    Verb     = ":" LITERAL ;

The syntax `*` matches a single path segment. The syntax `**` matches zero
or more path segments, which must be the last part of the path except the
`Verb`. The syntax `LITERAL` matches literal text in the path.

The syntax `Variable` matches part of the URL path as specified by its
template. A variable template must not contain other variables. If a variable
matches a single path segment, its template may be omitted, e.g. `{var}`
is equivalent to `{var=*}`.

If a variable contains exactly one path segment, such as `"{var}"` or
`"{var=*}"`, when such a variable is expanded into a URL path, all characters
except `[-_.~0-9a-zA-Z]` are percent-encoded. Such variables show up in the
Discovery Document as `{var}`.

If a variable contains one or more path segments, such as `"{var=foo/*}"`
or `"{var=**}"`, when such a variable is expanded into a URL path, all
characters except `[-_.~/0-9a-zA-Z]` are percent-encoded. Such variables
show up in the Discovery Document as `{+var}`.

NOTE: While the single segment variable matches the semantics of
[RFC 6570](https://tools.ietf.org/html/rfc6570) Section 3.2.2
Simple String Expansion, the multi segment variable **does not** match
RFC 6570 Reserved Expansion. The reason is that the Reserved Expansion
does not expand special characters like `?` and `#`, which would lead
to invalid URLs.

NOTE: the field paths in variables and in the `body` must not refer to
repeated fields or map fields.
"""
input Input_google_api_HttpRule @join__type(graph: RQL) {
  """
    Selects methods to which this rule applies.
  
  Refer to [selector][google.api.DocumentationRule.selector] for syntax details.
  """
  selector: String
  """Used for listing and getting information about resources."""
  get: String
  """Used for updating a resource."""
  put: String
  """Used for creating a resource."""
  post: String
  """Used for deleting a resource."""
  delete: String
  """Used for updating a resource."""
  patch: String
  """
    The custom pattern is used for specifying an HTTP method that is not
  included in the `pattern` field, such as HEAD, or "*" to leave the
  HTTP method unspecified for this rule. The wild-card rule is useful
  for services that provide content to Web (HTML) clients.
  """
  custom: Input_google_api_CustomHttpPattern
  """
    The name of the request field whose value is mapped to the HTTP body, or
  `*` for mapping all fields not captured by the path pattern to the HTTP
  body. NOTE: the referred field must not be a repeated field and must be
  present at the top-level of request message type.
  """
  body: String
  """
    Additional HTTP bindings for the selector. Nested bindings must
  not contain an `additional_bindings` field themselves (that is,
  the nesting may only be one level deep).
  """
  additionalBindings: [Input_google_api_HttpRule]
}

"""
  Wrapper message for `bool`.

The JSON representation for `BoolValue` is JSON `true` and `false`.
"""
input Input_google_protobuf_BoolValue @join__type(graph: RQL) {
  """The bool value."""
  value: Boolean
}

"""
  Wrapper message for `bytes`.

The JSON representation for `BytesValue` is JSON string.
"""
input Input_google_protobuf_BytesValue @join__type(graph: RQL) {
  """The bytes value."""
  value: String
}

"""Describes a message type."""
input Input_google_protobuf_DescriptorProto @join__type(graph: RQL) {
  name: String
  field: [Input_google_protobuf_FieldDescriptorProto]
  extension: [Input_google_protobuf_FieldDescriptorProto]
  nestedType: [Input_google_protobuf_DescriptorProto]
  enumType: [Input_google_protobuf_EnumDescriptorProto]
  extensionRange: [Input_google_protobuf_DescriptorProto_ExtensionRange]
  oneofDecl: [Input_google_protobuf_OneofDescriptorProto]
  options: Input_google_protobuf_MessageOptions
  reservedRange: [Input_google_protobuf_DescriptorProto_ReservedRange]
  """
    Reserved field names, which may not be used by fields in the same message.
  A given name may only be reserved once.
  """
  reservedName: [String]
}

input Input_google_protobuf_DescriptorProto_ExtensionRange @join__type(graph: RQL) {
  start: Int
  end: Int
  options: Input_google_protobuf_ExtensionRangeOptions
}

"""
  Range of reserved tag numbers. Reserved tag numbers may not be used by
fields or extension ranges in the same message. Reserved ranges may
not overlap.
"""
input Input_google_protobuf_DescriptorProto_ReservedRange @join__type(graph: RQL) {
  """Inclusive."""
  start: Int
  """Exclusive."""
  end: Int
}

"""
  Wrapper message for `double`.

The JSON representation for `DoubleValue` is JSON number.
"""
input Input_google_protobuf_DoubleValue @join__type(graph: RQL) {
  """The double value."""
  value: Float
}

"""
  A Duration represents a signed, fixed-length span of time represented
as a count of seconds and fractions of seconds at nanosecond
resolution. It is independent of any calendar and concepts like "day"
or "month". It is related to Timestamp in that the difference between
two Timestamp values is a Duration and it can be added or subtracted
from a Timestamp. Range is approximately +-10,000 years.

# Examples

Example 1: Compute Duration from two Timestamps in pseudo code.

    Timestamp start = ...;
    Timestamp end = ...;
    Duration duration = ...;

    duration.seconds = end.seconds - start.seconds;
    duration.nanos = end.nanos - start.nanos;

    if (duration.seconds < 0 && duration.nanos > 0) {
      duration.seconds += 1;
      duration.nanos -= 1000000000;
    } else if (durations.seconds > 0 && duration.nanos < 0) {
      duration.seconds -= 1;
      duration.nanos += 1000000000;
    }

Example 2: Compute Timestamp from Timestamp + Duration in pseudo code.

    Timestamp start = ...;
    Duration duration = ...;
    Timestamp end = ...;

    end.seconds = start.seconds + duration.seconds;
    end.nanos = start.nanos + duration.nanos;

    if (end.nanos < 0) {
      end.seconds -= 1;
      end.nanos += 1000000000;
    } else if (end.nanos >= 1000000000) {
      end.seconds += 1;
      end.nanos -= 1000000000;
    }

Example 3: Compute Duration from datetime.timedelta in Python.

    td = datetime.timedelta(days=3, minutes=10)
    duration = Duration()
    duration.FromTimedelta(td)

# JSON Mapping

In JSON format, the Duration type is encoded as a string rather than an
object, where the string ends in the suffix "s" (indicating seconds) and
is preceded by the number of seconds, with nanoseconds expressed as
fractional seconds. For example, 3 seconds with 0 nanoseconds should be
encoded in JSON format as "3s", while 3 seconds and 1 nanosecond should
be expressed in JSON format as "3.000000001s", and 3 seconds and 1
microsecond should be expressed in JSON format as "3.000001s".
"""
input Input_google_protobuf_Duration @join__type(graph: RQL) {
  """
    Signed seconds of the span of time. Must be from -315,576,000,000
  to +315,576,000,000 inclusive. Note: these bounds are computed from:
  60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
  """
  seconds: Int
  """
    Signed fractions of a second at nanosecond resolution of the span
  of time. Durations less than one second are represented with a 0
  `seconds` field and a positive or negative `nanos` field. For durations
  of one second or more, a non-zero value for the `nanos` field must be
  of the same sign as the `seconds` field. Must be from -999,999,999
  to +999,999,999 inclusive.
  """
  nanos: Int
}

"""
  A generic empty message that you can re-use to avoid defining duplicated
empty messages in your APIs. A typical example is to use it as the request
or the response type of an API method. For instance:

    service Foo {
      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
    }

The JSON representation for `Empty` is empty JSON object `{}`.
"""
input Input_google_protobuf_Empty @join__type(graph: RQL) {
  _: Boolean
}

"""Describes an enum type."""
input Input_google_protobuf_EnumDescriptorProto @join__type(graph: RQL) {
  name: String
  value: [Input_google_protobuf_EnumValueDescriptorProto]
  options: Input_google_protobuf_EnumOptions
  """
    Range of reserved numeric values. Reserved numeric values may not be used
  by enum values in the same enum declaration. Reserved ranges may not
  overlap.
  """
  reservedRange: [Input_google_protobuf_EnumDescriptorProto_EnumReservedRange]
  """
    Reserved enum value names, which may not be reused. A given name may only
  be reserved once.
  """
  reservedName: [String]
}

"""
  Range of reserved numeric values. Reserved values may not be used by
entries in the same enum. Reserved ranges may not overlap.

Note that this is distinct from DescriptorProto.ReservedRange in that it
is inclusive such that it can appropriately represent the entire int32
domain.
"""
input Input_google_protobuf_EnumDescriptorProto_EnumReservedRange @join__type(graph: RQL) {
  """Inclusive."""
  start: Int
  """Inclusive."""
  end: Int
}

input Input_google_protobuf_EnumOptions @join__type(graph: RQL) {
  """
    Set this option to true to allow mapping different tag names to the same
  value.
  """
  allowAlias: Boolean
  """
    Is this enum deprecated?
  Depending on the target platform, this can emit Deprecated annotations
  for the enum, or it will be completely ignored; in the very least, this
  is a formalization for deprecating enums.
  """
  deprecated: Boolean
  """The parser stores options it doesn't recognize here. See above."""
  uninterpretedOption: [Input_google_protobuf_UninterpretedOption]
}

"""Describes a value within an enum."""
input Input_google_protobuf_EnumValueDescriptorProto @join__type(graph: RQL) {
  name: String
  number: Int
  options: Input_google_protobuf_EnumValueOptions
}

input Input_google_protobuf_EnumValueOptions @join__type(graph: RQL) {
  """
    Is this enum value deprecated?
  Depending on the target platform, this can emit Deprecated annotations
  for the enum value, or it will be completely ignored; in the very least,
  this is a formalization for deprecating enum values.
  """
  deprecated: Boolean
  """The parser stores options it doesn't recognize here. See above."""
  uninterpretedOption: [Input_google_protobuf_UninterpretedOption]
}

input Input_google_protobuf_ExtensionRangeOptions @join__type(graph: RQL) {
  """The parser stores options it doesn't recognize here. See above."""
  uninterpretedOption: [Input_google_protobuf_UninterpretedOption]
}

"""Describes a field within a message."""
input Input_google_protobuf_FieldDescriptorProto @join__type(graph: RQL) {
  name: String
  number: Int
  label: google_protobuf_FieldDescriptorProto_Label
  """
    If type_name is set, this need not be set.  If both this and type_name
  are set, this must be one of TYPE_ENUM, TYPE_MESSAGE or TYPE_GROUP.
  """
  type: google_protobuf_FieldDescriptorProto_Type
  """
    For message and enum types, this is the name of the type.  If the name
  starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping
  rules are used to find the type (i.e. first the nested types within this
  message are searched, then within the parent, on up to the root
  namespace).
  """
  typeName: String
  """
    For extensions, this is the name of the type being extended.  It is
  resolved in the same manner as type_name.
  """
  extendee: String
  """
    For numeric types, contains the original text representation of the value.
  For booleans, "true" or "false".
  For strings, contains the default text contents (not escaped in any way).
  For bytes, contains the C escaped value.  All bytes >= 128 are escaped.
  TODO(kenton):  Base-64 encode?
  """
  defaultValue: String
  """
    If set, gives the index of a oneof in the containing type's oneof_decl
  list.  This field is a member of that oneof.
  """
  oneofIndex: Int
  """
    JSON name of this field. The value is set by protocol compiler. If the
  user has set a "json_name" option on this field, that option's value
  will be used. Otherwise, it's deduced from the field's name by converting
  it to camelCase.
  """
  jsonName: String
  options: Input_google_protobuf_FieldOptions
}

input Input_google_protobuf_FieldOptions @join__type(graph: RQL) {
  """
    The ctype option instructs the C++ code generator to use a different
  representation of the field than it normally would.  See the specific
  options below.  This option is not yet implemented in the open source
  release -- sorry, we'll try to include it in a future version!
  """
  ctype: google_protobuf_FieldOptions_CType
  """
    The packed option can be enabled for repeated primitive fields to enable
  a more efficient representation on the wire. Rather than repeatedly
  writing the tag and type for each element, the entire array is encoded as
  a single length-delimited blob. In proto3, only explicit setting it to
  false will avoid using packed encoding.
  """
  packed: Boolean
  """
    The jstype option determines the JavaScript type used for values of the
  field.  The option is permitted only for 64 bit integral and fixed types
  (int64, uint64, sint64, fixed64, sfixed64).  A field with jstype JS_STRING
  is represented as JavaScript string, which avoids loss of precision that
  can happen when a large value is converted to a floating point JavaScript.
  Specifying JS_NUMBER for the jstype causes the generated JavaScript code to
  use the JavaScript "number" type.  The behavior of the default option
  JS_NORMAL is implementation dependent.
  
  This option is an enum to permit additional types to be added, e.g.
  goog.math.Integer.
  """
  jstype: google_protobuf_FieldOptions_JSType
  """
    Should this field be parsed lazily?  Lazy applies only to message-type
  fields.  It means that when the outer message is initially parsed, the
  inner message's contents will not be parsed but instead stored in encoded
  form.  The inner message will actually be parsed when it is first accessed.
  
  This is only a hint.  Implementations are free to choose whether to use
  eager or lazy parsing regardless of the value of this option.  However,
  setting this option true suggests that the protocol author believes that
  using lazy parsing on this field is worth the additional bookkeeping
  overhead typically needed to implement it.
  
  This option does not affect the public interface of any generated code;
  all method signatures remain the same.  Furthermore, thread-safety of the
  interface is not affected by this option; const methods remain safe to
  call from multiple threads concurrently, while non-const methods continue
  to require exclusive access.
  
  
  Note that implementations may choose not to check required fields within
  a lazy sub-message.  That is, calling IsInitialized() on the outer message
  may return true even if the inner message has missing required fields.
  This is necessary because otherwise the inner message would have to be
  parsed in order to perform the check, defeating the purpose of lazy
  parsing.  An implementation which chooses not to check required fields
  must be consistent about it.  That is, for any particular sub-message, the
  implementation must either *always* check its required fields, or *never*
  check its required fields, regardless of whether or not the message has
  been parsed.
  """
  lazy: Boolean
  """
    Is this field deprecated?
  Depending on the target platform, this can emit Deprecated annotations
  for accessors, or it will be completely ignored; in the very least, this
  is a formalization for deprecating fields.
  """
  deprecated: Boolean
  """For Google-internal migration only. Do not use."""
  weak: Boolean
  """The parser stores options it doesn't recognize here. See above."""
  uninterpretedOption: [Input_google_protobuf_UninterpretedOption]
}

"""Describes a complete .proto file."""
input Input_google_protobuf_FileDescriptorProto @join__type(graph: RQL) {
  """file name, relative to root of source tree"""
  name: String
  """e.g. "foo", "foo.bar", etc."""
  package: String
  """Names of files imported by this file."""
  dependency: [String]
  """Indexes of the public imported files in the dependency list above."""
  publicDependency: [Int]
  """
    Indexes of the weak imported files in the dependency list.
  For Google-internal migration only. Do not use.
  """
  weakDependency: [Int]
  """All top-level definitions in this file."""
  messageType: [Input_google_protobuf_DescriptorProto]
  enumType: [Input_google_protobuf_EnumDescriptorProto]
  service: [Input_google_protobuf_ServiceDescriptorProto]
  extension: [Input_google_protobuf_FieldDescriptorProto]
  options: Input_google_protobuf_FileOptions
  """
    This field contains optional information about the original source code.
  You may safely remove this entire field without harming runtime
  functionality of the descriptors -- the information is needed only by
  development tools.
  """
  sourceCodeInfo: Input_google_protobuf_SourceCodeInfo
  """
    The syntax of the proto file.
  The supported values are "proto2" and "proto3".
  """
  syntax: String
}

"""
  The protocol compiler can output a FileDescriptorSet containing the .proto
files it parses.
"""
input Input_google_protobuf_FileDescriptorSet @join__type(graph: RQL) {
  file: [Input_google_protobuf_FileDescriptorProto]
}

input Input_google_protobuf_FileOptions @join__type(graph: RQL) {
  """
    Sets the Java package where classes generated from this .proto will be
  placed.  By default, the proto package is used, but this is often
  inappropriate because proto packages do not normally start with backwards
  domain names.
  """
  javaPackage: String
  """
    If set, all the classes from the .proto file are wrapped in a single
  outer class with the given name.  This applies to both Proto1
  (equivalent to the old "--one_java_file" option) and Proto2 (where
  a .proto always translates to a single class, but you may want to
  explicitly choose the class name).
  """
  javaOuterClassname: String
  """
    If set true, then the Java code generator will generate a separate .java
  file for each top-level message, enum, and service defined in the .proto
  file.  Thus, these types will *not* be nested inside the outer class
  named by java_outer_classname.  However, the outer class will still be
  generated to contain the file's getDescriptor() method as well as any
  top-level extensions defined in the file.
  """
  javaMultipleFiles: Boolean
  """This option does nothing."""
  javaGenerateEqualsAndHash: Boolean
  """
    If set true, then the Java2 code generator will generate code that
  throws an exception whenever an attempt is made to assign a non-UTF-8
  byte sequence to a string field.
  Message reflection will do the same.
  However, an extension field still accepts non-UTF-8 byte sequences.
  This option has no effect on when used with the lite runtime.
  """
  javaStringCheckUtf8: Boolean
  optimizeFor: google_protobuf_FileOptions_OptimizeMode
  """
    Sets the Go package where structs generated from this .proto will be
  placed. If omitted, the Go package will be derived from the following:
    - The basename of the package import path, if provided.
    - Otherwise, the package statement in the .proto file, if present.
    - Otherwise, the basename of the .proto file, without extension.
  """
  goPackage: String
  """
    Should generic services be generated in each language?  "Generic" services
  are not specific to any particular RPC system.  They are generated by the
  main code generators in each language (without additional plugins).
  Generic services were the only kind of service generation supported by
  early versions of google.protobuf.
  
  Generic services are now considered deprecated in favor of using plugins
  that generate code specific to your particular RPC system.  Therefore,
  these default to false.  Old code which depends on generic services should
  explicitly set them to true.
  """
  ccGenericServices: Boolean
  javaGenericServices: Boolean
  pyGenericServices: Boolean
  phpGenericServices: Boolean
  """
    Is this file deprecated?
  Depending on the target platform, this can emit Deprecated annotations
  for everything in the file, or it will be completely ignored; in the very
  least, this is a formalization for deprecating files.
  """
  deprecated: Boolean
  """
    Enables the use of arenas for the proto messages in this file. This applies
  only to generated classes for C++.
  """
  ccEnableArenas: Boolean
  """
    Sets the objective c class prefix which is prepended to all objective c
  generated classes from this .proto. There is no default.
  """
  objcClassPrefix: String
  """Namespace for generated classes; defaults to the package."""
  csharpNamespace: String
  """
    By default Swift generators will take the proto package and CamelCase it
  replacing '.' with underscore and use that to prefix the types/symbols
  defined. When this options is provided, they will use this value instead
  to prefix the types/symbols defined.
  """
  swiftPrefix: String
  """
    Sets the php class prefix which is prepended to all php generated classes
  from this .proto. Default is empty.
  """
  phpClassPrefix: String
  """
    Use this option to change the namespace of php generated classes. Default
  is empty. When this option is empty, the package name will be used for
  determining the namespace.
  """
  phpNamespace: String
  """
    The parser stores options it doesn't recognize here.
  See the documentation for the "Options" section above.
  """
  uninterpretedOption: [Input_google_protobuf_UninterpretedOption]
}

"""
  Wrapper message for `float`.

The JSON representation for `FloatValue` is JSON number.
"""
input Input_google_protobuf_FloatValue @join__type(graph: RQL) {
  """The float value."""
  value: Float
}

"""
  Describes the relationship between generated code and its original source
file. A GeneratedCodeInfo message is associated with only one generated
source file, but may contain references to different source .proto files.
"""
input Input_google_protobuf_GeneratedCodeInfo @join__type(graph: RQL) {
  """
    An Annotation connects some span of text in generated code to an element
  of its generating .proto file.
  """
  annotation: [Input_google_protobuf_GeneratedCodeInfo_Annotation]
}

input Input_google_protobuf_GeneratedCodeInfo_Annotation @join__type(graph: RQL) {
  """
    Identifies the element in the original source .proto file. This field
  is formatted the same as SourceCodeInfo.Location.path.
  """
  path: [Int]
  """Identifies the filesystem path to the original source .proto."""
  sourceFile: String
  """
    Identifies the starting offset in bytes in the generated code
  that relates to the identified object.
  """
  begin: Int
  """
    Identifies the ending offset in bytes in the generated code that
  relates to the identified offset. The end offset should be one past
  the last relevant byte (so the length of the text = end - begin).
  """
  end: Int
}

"""
  Wrapper message for `int32`.

The JSON representation for `Int32Value` is JSON number.
"""
input Input_google_protobuf_Int32Value @join__type(graph: RQL) {
  """The int32 value."""
  value: Int
}

"""
  Wrapper message for `int64`.

The JSON representation for `Int64Value` is JSON string.
"""
input Input_google_protobuf_Int64Value @join__type(graph: RQL) {
  """The int64 value."""
  value: Int
}

input Input_google_protobuf_MessageOptions @join__type(graph: RQL) {
  """
    Set true to use the old proto1 MessageSet wire format for extensions.
  This is provided for backwards-compatibility with the MessageSet wire
  format.  You should not use this for any other reason:  It's less
  efficient, has fewer features, and is more complicated.
  
  The message must be defined exactly as follows:
    message Foo {
      option message_set_wire_format = true;
      extensions 4 to max;
    }
  Note that the message cannot have any defined fields; MessageSets only
  have extensions.
  
  All extensions of your type must be singular messages; e.g. they cannot
  be int32s, enums, or repeated messages.
  
  Because this is an option, the above two restrictions are not enforced by
  the protocol compiler.
  """
  messageSetWireFormat: Boolean
  """
    Disables the generation of the standard "descriptor()" accessor, which can
  conflict with a field of the same name.  This is meant to make migration
  from proto1 easier; new code should avoid fields named "descriptor".
  """
  noStandardDescriptorAccessor: Boolean
  """
    Is this message deprecated?
  Depending on the target platform, this can emit Deprecated annotations
  for the message, or it will be completely ignored; in the very least,
  this is a formalization for deprecating messages.
  """
  deprecated: Boolean
  """
    Whether the message is an automatically generated map entry type for the
  maps field.
  
  For maps fields:
      map<KeyType, ValueType> map_field = 1;
  The parsed descriptor looks like:
      message MapFieldEntry {
          option map_entry = true;
          optional KeyType key = 1;
          optional ValueType value = 2;
      }
      repeated MapFieldEntry map_field = 1;
  
  Implementations may choose not to generate the map_entry=true message, but
  use a native map in the target language to hold the keys and values.
  The reflection APIs in such implementions still need to work as
  if the field is a repeated message field.
  
  NOTE: Do not set the option in .proto files. Always use the maps syntax
  instead. The option should only be implicitly set by the proto compiler
  parser.
  """
  mapEntry: Boolean
  """The parser stores options it doesn't recognize here. See above."""
  uninterpretedOption: [Input_google_protobuf_UninterpretedOption]
}

"""Describes a method of a service."""
input Input_google_protobuf_MethodDescriptorProto @join__type(graph: RQL) {
  name: String
  """
    Input and output type names.  These are resolved in the same way as
  FieldDescriptorProto.type_name, but must refer to a message type.
  """
  inputType: String
  outputType: String
  options: Input_google_protobuf_MethodOptions
  """Identifies if client streams multiple client messages"""
  clientStreaming: Boolean
  """Identifies if server streams multiple server messages"""
  serverStreaming: Boolean
}

input Input_google_protobuf_MethodOptions @join__type(graph: RQL) {
  """
    Is this method deprecated?
  Depending on the target platform, this can emit Deprecated annotations
  for the method, or it will be completely ignored; in the very least,
  this is a formalization for deprecating methods.
  """
  deprecated: Boolean
  idempotencyLevel: google_protobuf_MethodOptions_IdempotencyLevel
  """The parser stores options it doesn't recognize here. See above."""
  uninterpretedOption: [Input_google_protobuf_UninterpretedOption]
}

"""Describes a oneof."""
input Input_google_protobuf_OneofDescriptorProto @join__type(graph: RQL) {
  name: String
  options: Input_google_protobuf_OneofOptions
}

input Input_google_protobuf_OneofOptions @join__type(graph: RQL) {
  """The parser stores options it doesn't recognize here. See above."""
  uninterpretedOption: [Input_google_protobuf_UninterpretedOption]
}

"""Describes a service."""
input Input_google_protobuf_ServiceDescriptorProto @join__type(graph: RQL) {
  name: String
  method: [Input_google_protobuf_MethodDescriptorProto]
  options: Input_google_protobuf_ServiceOptions
}

input Input_google_protobuf_ServiceOptions @join__type(graph: RQL) {
  """
    Is this service deprecated?
  Depending on the target platform, this can emit Deprecated annotations
  for the service, or it will be completely ignored; in the very least,
  this is a formalization for deprecating services.
  """
  deprecated: Boolean
  """The parser stores options it doesn't recognize here. See above."""
  uninterpretedOption: [Input_google_protobuf_UninterpretedOption]
}

"""
  Encapsulates information about the original source file from which a
FileDescriptorProto was generated.
"""
input Input_google_protobuf_SourceCodeInfo @join__type(graph: RQL) {
  """
    A Location identifies a piece of source code in a .proto file which
  corresponds to a particular definition.  This information is intended
  to be useful to IDEs, code indexers, documentation generators, and similar
  tools.
  
  For example, say we have a file like:
    message Foo {
      optional string foo = 1;
    }
  Let's look at just the field definition:
    optional string foo = 1;
    ^       ^^     ^^  ^  ^^^
    a       bc     de  f  ghi
  We have the following locations:
    span   path               represents
    [a,i)  [ 4, 0, 2, 0 ]     The whole field definition.
    [a,b)  [ 4, 0, 2, 0, 4 ]  The label (optional).
    [c,d)  [ 4, 0, 2, 0, 5 ]  The type (string).
    [e,f)  [ 4, 0, 2, 0, 1 ]  The name (foo).
    [g,h)  [ 4, 0, 2, 0, 3 ]  The number (1).
  
  Notes:
  - A location may refer to a repeated field itself (i.e. not to any
    particular index within it).  This is used whenever a set of elements are
    logically enclosed in a single code segment.  For example, an entire
    extend block (possibly containing multiple extension definitions) will
    have an outer location whose path refers to the "extensions" repeated
    field without an index.
  - Multiple locations may have the same path.  This happens when a single
    logical declaration is spread out across multiple places.  The most
    obvious example is the "extend" block again -- there may be multiple
    extend blocks in the same scope, each of which will have the same path.
  - A location's span is not always a subset of its parent's span.  For
    example, the "extendee" of an extension declaration appears at the
    beginning of the "extend" block and is shared by all extensions within
    the block.
  - Just because a location's span is a subset of some other location's span
    does not mean that it is a descendent.  For example, a "group" defines
    both a type and a field in a single declaration.  Thus, the locations
    corresponding to the type and field and their components will overlap.
  - Code which tries to interpret locations should probably be designed to
    ignore those that it doesn't understand, as more types of locations could
    be recorded in the future.
  """
  location: [Input_google_protobuf_SourceCodeInfo_Location]
}

input Input_google_protobuf_SourceCodeInfo_Location @join__type(graph: RQL) {
  """
    Identifies which part of the FileDescriptorProto was defined at this
  location.
  
  Each element is a field number or an index.  They form a path from
  the root FileDescriptorProto to the place where the definition.  For
  example, this path:
    [ 4, 3, 2, 7, 1 ]
  refers to:
    file.message_type(3)  // 4, 3
        .field(7)         // 2, 7
        .name()           // 1
  This is because FileDescriptorProto.message_type has field number 4:
    repeated DescriptorProto message_type = 4;
  and DescriptorProto.field has field number 2:
    repeated FieldDescriptorProto field = 2;
  and FieldDescriptorProto.name has field number 1:
    optional string name = 1;
  
  Thus, the above path gives the location of a field name.  If we removed
  the last element:
    [ 4, 3, 2, 7 ]
  this path refers to the whole field declaration (from the beginning
  of the label to the terminating semicolon).
  """
  path: [Int]
  """
    Always has exactly three or four elements: start line, start column,
  end line (optional, otherwise assumed same as start line), end column.
  These are packed into a single field for efficiency.  Note that line
  and column numbers are zero-based -- typically you will want to add
  1 to each before displaying to a user.
  """
  span: [Int]
  """
    If this SourceCodeInfo represents a complete declaration, these are any
  comments appearing before and after the declaration which appear to be
  attached to the declaration.
  
  A series of line comments appearing on consecutive lines, with no other
  tokens appearing on those lines, will be treated as a single comment.
  
  leading_detached_comments will keep paragraphs of comments that appear
  before (but not connected to) the current element. Each paragraph,
  separated by empty lines, will be one comment element in the repeated
  field.
  
  Only the comment content is provided; comment markers (e.g. //) are
  stripped out.  For block comments, leading whitespace and an asterisk
  will be stripped from the beginning of each line other than the first.
  Newlines are included in the output.
  
  Examples:
  
    optional int32 foo = 1;  // Comment attached to foo.
    // Comment attached to bar.
    optional int32 bar = 2;
  
    optional string baz = 3;
    // Comment attached to baz.
    // Another line attached to baz.
  
    // Comment attached to qux.
    //
    // Another line attached to qux.
    optional double qux = 4;
  
    // Detached comment for corge. This is not leading or trailing comments
    // to qux or corge because there are blank lines separating it from
    // both.
  
    // Detached comment for corge paragraph 2.
  
    optional string corge = 5;
    /* Block comment attached
     * to corge.  Leading asterisks
     * will be removed. */
    /* Block comment attached to
     * grault. */
    optional int32 grault = 6;
  
    // ignored detached comments.
  """
  leadingComments: String
  trailingComments: String
  leadingDetachedComments: [String]
}

"""
  Wrapper message for `string`.

The JSON representation for `StringValue` is JSON string.
"""
input Input_google_protobuf_StringValue @join__type(graph: RQL) {
  """The string value."""
  value: String
}

"""
  Wrapper message for `uint32`.

The JSON representation for `UInt32Value` is JSON number.
"""
input Input_google_protobuf_UInt32Value @join__type(graph: RQL) {
  """The uint32 value."""
  value: Int
}

"""
  Wrapper message for `uint64`.

The JSON representation for `UInt64Value` is JSON string.
"""
input Input_google_protobuf_UInt64Value @join__type(graph: RQL) {
  """The uint64 value."""
  value: Int
}

"""
  A message representing a option the parser does not recognize. This only
appears in options protos created by the compiler::Parser class.
DescriptorPool resolves these when building Descriptor objects. Therefore,
options protos in descriptor objects (e.g. returned by Descriptor::options(),
or produced by Descriptor::CopyTo()) will never have UninterpretedOptions
in them.
"""
input Input_google_protobuf_UninterpretedOption @join__type(graph: RQL) {
  name: [Input_google_protobuf_UninterpretedOption_NamePart]
  """
    The value of the uninterpreted option, in whatever type the tokenizer
  identified it as during parsing. Exactly one of these should be set.
  """
  identifierValue: String
  positiveIntValue: Int
  negativeIntValue: Int
  doubleValue: Float
  stringValue: String
  aggregateValue: String
}

"""
  The name of the uninterpreted option.  Each string represents a segment in
a dot-separated name.  is_extension is true iff a segment represents an
extension (denoted with parentheses in options specs in .proto files).
E.g.,{ ["foo", false], ["bar.baz", true], ["qux", false] } represents
"foo.(bar.baz).qux".
"""
input Input_google_protobuf_UninterpretedOption_NamePart @join__type(graph: RQL) {
  namePart: String
  isExtension: Boolean
}

input Input_loqate_AddressCaptureFindRequest @join__type(graph: RQL) {
  text: String
  container: String
  key: String
  limit: Int
  language: String
  countries: String
}

input Input_loqate_AddressCaptureFindResponse @join__type(graph: RQL) {
  Items: [Input_loqate_AddressCaptureFindResponse_Item]
}

input Input_loqate_AddressCaptureFindResponse_Item @join__type(graph: RQL) {
  Id: String
  Type: loqate_AddressCaptureFindResponse_Item_ItemType
  Text: String
  Description: String
}

input Input_loqate_AddressCaptureRetrieveRequest @join__type(graph: RQL) {
  key: String
  id: String
}

input Input_loqate_AddressCaptureRetrieveResponse @join__type(graph: RQL) {
  Items: [Input_loqate_AddressCaptureRetrieveResponse_Item]
}

input Input_loqate_AddressCaptureRetrieveResponse_Item @join__type(graph: RQL) {
  Id: String
  Line1: String
  SubBuilding: String
  PostalCode: String
  ProvinceCode: String
  City: String
  CountryIso2: String
}

input Input_mparticle_Identity @join__type(graph: RQL) {
  type: String
  value: String
}

input Input_mparticle_Mpid @join__type(graph: RQL) {
  mpid: String
}

input Input_mparticle_ProfileRequest @join__type(graph: RQL) {
  orgId: String
  accountId: String
  workspaceId: String
  environmentType: String
  identity: Input_mparticle_Identity
  mpid: Input_mparticle_Mpid
}

input Input_mparticle_ProfileResponse @join__type(graph: RQL) {
  mpid: String
  topProductType: String
  topProductTypes: [String]
  topCategories: [String]
  topBrands: [String]
  recentlyViewedCsps: [String]
  averageOrderValue: Float
  totalListingsCreated: Int
  totalListingsSold: Int
  totalListingsDraft: Int
  totalListingsSuspended: Int
  totalListingsLive: Int
  cumulativeGmv: Float
  totalPurchases: Int
  buyerLabel: String
  sellerLabel: String
  totalFeedFollows: Int
  totalBuyerOffersCreated: Int
  totalBuyerOffersAccepted: Int
  sellerFeedbackRating: Float
  buyerFeedbackRating: Float
  mostRecentOrderDate: String
  firstOrderDate: String
  topProductTypeUuids: [String]
  topCategoryUuids: [String]
  topBrandCategories: [String]
  brandCategories: [String]
  topMostRecentProductTypes: [String]
}

input Input_mparticle_TokenRequest @join__type(graph: RQL) {
  clientId: String
  clientSecret: String
  audience: String
  grantType: String
}

input Input_mparticle_TokenResponse @join__type(graph: RQL) {
  accessToken: String
  tokenType: String
  expiresIn: Int
}

input Input_reverb_config_cache_AddressFormConfig @join__type(graph: RQL) {
  countryCode: String
  fields: [Input_reverb_config_cache_AddressFormField]
}

input Input_reverb_config_cache_AddressFormField @join__type(graph: RQL) {
  fieldName: String
  displayNames: [Input_reverb_config_cache_LocalizedAddressFormDisplayName]
  required: Boolean
}

input Input_reverb_config_cache_AddressValidation @join__type(graph: RQL) {
  postalCode: String
  state: String
}

input Input_reverb_config_cache_AddressValidationsResponse @join__type(graph: RQL) {
  addresses: [Input_reverb_config_cache_AddressValidation]
}

input Input_reverb_config_cache_CurrencyResponse @join__type(graph: RQL) {
  rates: [Input_reverb_config_cache_ExchangeRate]
}

input Input_reverb_config_cache_ExchangeCurrencyRequest @join__type(graph: RQL) {
  from: String
  to: String
  amountMinorUnits: Int
  inverseReverseRates: Boolean
}

input Input_reverb_config_cache_ExchangeCurrencyResponse @join__type(graph: RQL) {
  amountMinorUnits: Int
  from: String
  to: String
}

input Input_reverb_config_cache_ExchangeRate @join__type(graph: RQL) {
  from: String
  to: String
  rate: Float
}

input Input_reverb_config_cache_ExchangeRateRequest @join__type(graph: RQL) {
  useMajorUnitConversion: Boolean
  inverseReverseRates: Boolean
}

input Input_reverb_config_cache_Filters @join__type(graph: RQL) {
  productType: String
  category: String
  brand: String
  productFamily: String
}

input Input_reverb_config_cache_InternationalAddressFormConfigResponse @join__type(graph: RQL) {
  configs: [Input_reverb_config_cache_AddressFormConfig]
}

input Input_reverb_config_cache_LocalizedAddressFormDisplayName @join__type(graph: RQL) {
  locale: String
  displayName: String
}

input Input_reverb_config_cache_SearchRedirect @join__type(graph: RQL) {
  queryTerm: String
  redirectTerm: String
  type: reverb_config_cache_SearchRedirect_Type
  redirectTerms: [String]
  filters: Input_reverb_config_cache_Filters
}

input Input_reverb_config_cache_SearchRedirectsRequest @join__type(graph: RQL) {
  _: Boolean
}

input Input_reverb_config_cache_SearchRedirectsResponse @join__type(graph: RQL) {
  redirects: [Input_reverb_config_cache_SearchRedirect]
}

input Input_reverb_config_cache_TaxRate @join__type(graph: RQL) {
  postalcode: String
  totalSalesTaxRate: String
  totalSalesTaxRatePrecision: Int
  state: String
}

input Input_reverb_config_cache_TaxRatesResponse @join__type(graph: RQL) {
  rates: [Input_reverb_config_cache_TaxRate]
}

input Input_reverb_config_cache_TranslationsRequest @join__type(graph: RQL) {
  project: String
  resource: String
  locales: [String]
}

input Input_reverb_config_cache_TranslationsResponse @join__type(graph: RQL) {
  translations: [Input_reverb_config_cache_TranslationsResponse_Translation]
}

input Input_reverb_config_cache_TranslationsResponse_Translation @join__type(graph: RQL) {
  project: String
  resource: String
  locale: String
  content: String
}

input Input_reverb_config_cache_VersionedExchangeRatesRequest @join__type(graph: RQL) {
  version: String
  inverseReverseRates: Boolean
}

input Input_reverb_config_cache_VersionedExchangeRatesResponse @join__type(graph: RQL) {
  rates: [Input_reverb_config_cache_ExchangeRate]
}

input Input_reverb_event_AddedToCart @join__type(graph: RQL) {
  userContext: Input_reverb_event_UserContext
  listing: Input_reverb_event_Listing
  otherListings: [Input_reverb_event_Listing]
  referer: String
  aid: String
  cartItemUuid: String
}

input Input_reverb_event_AdminAbilityAndAbilityProfileUpdated @join__type(graph: RQL) {
  abilityManagerUserId: String
  abilityRecipientUserId: String
  adHocAbilities: [String]
  abilityProfiles: [String]
}

input Input_reverb_event_Article @join__type(graph: RQL) {
  id: String
}

input Input_reverb_event_ArticleView @join__type(graph: RQL) {
  userContext: Input_reverb_event_UserContext
  articleId: String
  requestId: String
  referer: String
  url: String
  aid: String
  utmCampaign: String
}

input Input_reverb_event_ArticleViewRelatedContent @join__type(graph: RQL) {
  userContext: Input_reverb_event_UserContext
  articleViewArticleId: String
  type: String
  url: String
  referer: String
  articles: [Input_reverb_event_Article]
}

input Input_reverb_event_AttributeChange @join__type(graph: RQL) {
  name: String
  previousValue: String
  newValue: String
}

input Input_reverb_event_AttributedLanding @join__type(graph: RQL) {
  landingId: String
  landingTime: String
  userId: String
  aid: String
  referer: String
  url: String
  utmCampaign: String
  cookieId: String
  userShippingRegion: String
  landingDevice: String
  landingBucket: String
  orderedAt: String
  productId: String
  orderId: String
  orderDevice: String
  registeredAt: String
}

"""Fingerprint from fingerprintjs2"""
input Input_reverb_event_BrowserFingerprint @join__type(graph: RQL) {
  """Hashed fingerprint"""
  hash: String
  liedLanguages: Boolean
  liedResolution: Boolean
  liedOs: Boolean
  liedBrowser: Boolean
  plugins: Int
  resolution: String
  session: Boolean
  localstorage: Boolean
}

input Input_reverb_event_BumpsReserved @join__type(graph: RQL) {
  userContext: Input_reverb_event_UserContext
  amount: Int
  price: Input_reverb_event_Price
  listing: Input_reverb_event_Listing
  budgetType: String
}

input Input_reverb_event_BundleData @join__type(graph: RQL) {
  paymentGroupsCount: Int
  paymentGroups: [Input_reverb_event_PaymentGroup]
}

input Input_reverb_event_CanonicalProduct @join__type(graph: RQL) {
  id: String
}

input Input_reverb_event_CanonicalProductUpdated @join__type(graph: RQL) {
  userContext: Input_reverb_event_UserContext
  canonicalProduct: Input_reverb_event_CanonicalProduct
  changes: [Input_reverb_event_AttributeChange]
}

input Input_reverb_event_CartBundles @join__type(graph: RQL) {
  userContext: Input_reverb_event_UserContext
  bundleData: Input_reverb_event_BundleData
}

input Input_reverb_event_CartItemBundle @join__type(graph: RQL) {
  cartItemsCount: Int
  paymentMethod: String
  currency: String
}

input Input_reverb_event_CartView @join__type(graph: RQL) {
  userContext: Input_reverb_event_UserContext
  listings: [Input_reverb_event_Listing]
  requestId: String
}

"""includes Cart and Checkout step page views"""
input Input_reverb_event_CheckoutView @join__type(graph: RQL) {
  userContext: Input_reverb_event_UserContext
  paymentMethod: String
  stepName: String
  referer: String
  checkoutId: String
  checkoutUuid: String
}

input Input_reverb_event_ClickStats @join__type(graph: RQL) {
  entityType: String
  entityId: String
  impressions: Int
  clicks: Int
  bumpImpressions: Int
  bumpClicks: Int
}

input Input_reverb_event_ComparisonShoppingPage @join__type(graph: RQL) {
  id: String
  lowestPriceForNew: Input_reverb_event_Price
  lowestPriceForUsed: Input_reverb_event_Price
  usedListingCount: Int
  newListingCount: Int
}

"""Deprecated, use ComponentInteraction"""
input Input_reverb_event_ComparisonShoppingPageClick @join__type(graph: RQL) {
  comparisonShoppingPage: Input_reverb_event_ComparisonShoppingPage
  userContext: Input_reverb_event_UserContext
  url: String
  referer: String
  componentName: String
}

input Input_reverb_event_ComparisonShoppingPageView @join__type(graph: RQL) {
  listings: [Input_reverb_event_Listing]
  canonicalProductIds: [String]
  lowestPriceForNew: Input_reverb_event_Price
  lowestPriceForUsed: Input_reverb_event_Price
  userContext: Input_reverb_event_UserContext
  requestId: String
  buyButtonListingId: String
  buyButtonListingType: String
  comparisonShoppingPageId: String
  buyButtonReason: String
  priceGuideId: String
  condition: String
  referer: String
  url: String
  utmCampaign: String
  utmSource: String
  utmMedium: String
}

input Input_reverb_event_ComparisonShoppingPagesView @join__type(graph: RQL) {
  comparisonShoppingPages: [Input_reverb_event_ComparisonShoppingPage]
  userContext: Input_reverb_event_UserContext
  url: String
  referer: String
  componentName: String
}

input Input_reverb_event_ComponentInteraction @join__type(graph: RQL) {
  componentName: String
  interactionType: String
  url: String
  referer: String
  userContext: Input_reverb_event_UserContext
  context: String
  entityId: String
  entityType: String
  position: Int
  page: Int
  perPage: Int
  totalResults: Int
  targetUrl: String
  pageViewId: String
  impressionUuid: String
  utmSource: String
  utmMedium: String
  utmCampaign: String
  freeTextQuery: String
  bumped: Boolean
}

input Input_reverb_event_ComponentsView @join__type(graph: RQL) {
  componentName: String
  context: String
  url: String
  referer: String
  userContext: Input_reverb_event_UserContext
  entityIds: [String]
  entityType: String
  pageViewId: String
  impressionUuid: String
  algorithmVersion: String
  utmSource: String
  utmMedium: String
  utmCampaign: String
}

input Input_reverb_event_ContestSignUp @join__type(graph: RQL) {
  userContext: Input_reverb_event_UserContext
  referer: String
  aid: String
  utmCampaign: String
  questionResponse: String
}

input Input_reverb_event_ConversationUpdated @join__type(graph: RQL) {
  userContext: Input_reverb_event_UserContext
  id: String
  initialRecipientId: String
  initialAuthorId: String
  listing: Input_reverb_event_Listing
  lastMessageId: String
  requestId: String
}

input Input_reverb_event_CuratedSetView @join__type(graph: RQL) {
  curatedSetId: String
  userContext: Input_reverb_event_UserContext
  listings: [Input_reverb_event_Listing]
  requestId: String
}

input Input_reverb_event_Device @join__type(graph: RQL) {
  """/ DeviceName"""
  name: String
  userAgent: String
  version: String
  appVersion: String
  osVersion: String
  manufacturer: String
  brand: String
  model: String
}

input Input_reverb_event_DigitalListing @join__type(graph: RQL) {
  id: String
  price: Input_reverb_event_Price
  """/ ListingStatus"""
  status: String
  categoryUuids: [String]
}

input Input_reverb_event_DigitalListingDownload @join__type(graph: RQL) {
  userContext: Input_reverb_event_UserContext
  digitalListingId: String
  digitalVariantId: String
  requestId: String
}

input Input_reverb_event_DigitalListingView @join__type(graph: RQL) {
  userContext: Input_reverb_event_UserContext
  digitalListing: Input_reverb_event_DigitalListing
  requestId: String
}

input Input_reverb_event_DiscountCodeApplied @join__type(graph: RQL) {
  userContext: Input_reverb_event_UserContext
  discountCode: String
  success: Boolean
  referer: String
  error: String
}

input Input_reverb_event_EntityUpdated @join__type(graph: RQL) {
  name: String
  id: String
  timestamp: String
  action: reverb_event_EntityUpdated_Action
}

input Input_reverb_event_Error @join__type(graph: RQL) {
  error: String
  userContext: Input_reverb_event_UserContext
}

input Input_reverb_event_Event @join__type(graph: RQL) {
  messageName: String
  payload: String
  level: String
}

input Input_reverb_event_EventRequest @join__type(graph: RQL) {
  events: [Input_reverb_event_Event]
}

input Input_reverb_event_Experiment @join__type(graph: RQL) {
  name: String
  value: String
  useInFrontend: Boolean
  multivariateExperiment: Boolean
  """/ Deprecated in favor of mobile_context"""
  qualifyForMobile: Boolean
  mobileContext: Input_reverb_event_Experiment_MobileContext
  useInMarketplaceListingsSearch: Boolean
  multiClientExperimentContext: String
}

input Input_reverb_event_Experiment_MobileContext @join__type(graph: RQL) {
  value: String
  reportAs: String
}

input Input_reverb_event_FollowAdded @join__type(graph: RQL) {
  userContext: Input_reverb_event_UserContext
  referer: String
  searchableType: String
  searchableId: String
  searchParams: String
}

input Input_reverb_event_FollowUpdated @join__type(graph: RQL) {
  userContext: Input_reverb_event_UserContext
  id: String
  savedSearchId: String
  destroyed: Boolean
}

input Input_reverb_event_GenericMailer @join__type(graph: RQL) {
  userContext: Input_reverb_event_UserContext
  """/ DEPRECATED"""
  emailType: String
  """/ MailerAction"""
  action: String
  """/ Sale"""
  sourceType: String
  """/ sale_id"""
  sourceId: String
  """/ new_user_sale_invitation"""
  utmCampaign: String
  """/ { subject_line: "v2" }.to_json"""
  variations: String
}

input Input_reverb_event_GoogleShoppingClick @join__type(graph: RQL) {
  productId: String
  comparisonShoppingPageId: String
  """/ ISO8601"""
  timestamp: String
  """/ GoogleClickOrigin"""
  origin: String
}

input Input_reverb_event_JsLoad @join__type(graph: RQL) {
  app: String
  userContext: Input_reverb_event_UserContext
  fingerprint: Input_reverb_event_BrowserFingerprint
}

input Input_reverb_event_Listing @join__type(graph: RQL) {
  id: String
  price: Input_reverb_event_Price
  """/ ListingStatus"""
  status: String
  categoryUuids: [String]
  bumped: Boolean
  canonicalProductId: String
}

input Input_reverb_event_ListingMatched @join__type(graph: RQL) {
  userContext: Input_reverb_event_UserContext
  listingId: String
  canonicalProductId: String
}

input Input_reverb_event_ListingUpdated @join__type(graph: RQL) {
  userContext: Input_reverb_event_UserContext
  listing: Input_reverb_event_Listing
  changes: [Input_reverb_event_AttributeChange]
}

input Input_reverb_event_ListingView @join__type(graph: RQL) {
  userContext: Input_reverb_event_UserContext
  listing: Input_reverb_event_Listing
  requestId: String
  url: String
  referer: String
  aid: String
  utmCampaign: String
}

input Input_reverb_event_ListingViewRelatedContent @join__type(graph: RQL) {
  userContext: Input_reverb_event_UserContext
  listingViewListingId: String
  type: String
  url: String
  referer: String
  listings: [Input_reverb_event_Listing]
  articles: [Input_reverb_event_Article]
}

"""
  Reverb Analytics Notes:
Description: Captures views of any listing and parses product_id from url
"""
input Input_reverb_event_ListingsView @join__type(graph: RQL) {
  listings: [Input_reverb_event_Listing]
  query: String
  totalResults: Int
  userContext: Input_reverb_event_UserContext
  viewType: String
  curatedLinkIds: [String]
  curatedSetIds: [String]
  bumpedListings: [Input_reverb_event_Listing]
  featuredListing: Input_reverb_event_Listing
  requestId: String
  bumpAlgorithm: String
  url: String
  referer: String
  utmCampaign: String
  aid: String
  resultCount: Int
  version: Int
  responseTime: Float
  fallbackStrategy: String
  fallbackListings: [Input_reverb_event_Listing]
  totalFallbackListings: Int
}

input Input_reverb_event_MailLinkClick @join__type(graph: RQL) {
  userContext: Input_reverb_event_UserContext
  utmCampaign: String
  url: String
  """/ Sale"""
  sourceType: String
  """/ sale_id"""
  sourceId: String
  """/ { subject_line: "v2" }.to_json"""
  variations: String
}

input Input_reverb_event_MailListSignUp @join__type(graph: RQL) {
  userContext: Input_reverb_event_UserContext
  email: String
  referer: String
  listId: String
  countryCode: String
  source: String
  sourceProductUuid: String
  userId: String
}

input Input_reverb_event_MarketingEmailView @join__type(graph: RQL) {
  userContext: Input_reverb_event_UserContext
  listings: [Input_reverb_event_Listing]
  utmCampaign: String
  upsellOrderId: String
  persona: String
  entityIds: [String]
  entityType: String
}

input Input_reverb_event_Message @join__type(graph: RQL) {
  id: String
  conversationId: String
}

input Input_reverb_event_MessageUpdated @join__type(graph: RQL) {
  userContext: Input_reverb_event_UserContext
  message: Input_reverb_event_Message
  changes: [Input_reverb_event_AttributeChange]
}

input Input_reverb_event_MessagesMailer @join__type(graph: RQL) {
  userContext: Input_reverb_event_UserContext
  messageId: String
  """/ MailerAction"""
  action: String
}

"""/ Deprecated in favor of common ComponentInteraction"""
input Input_reverb_event_MobileInteraction @join__type(graph: RQL) {
  name: String
  action: String
  type: reverb_event_MobileInteraction_InteractionType
  context: String
  userContext: Input_reverb_event_UserContext
}

input Input_reverb_event_NegotiationStarted @join__type(graph: RQL) {
  userContext: Input_reverb_event_UserContext
  id: String
  buyerInitiated: Boolean
  offerId: String
  buyerId: String
  listingIds: [String]
}

input Input_reverb_event_NegotiationUpdated @join__type(graph: RQL) {
  userContext: Input_reverb_event_UserContext
  """/ Status"""
  status: String
  id: String
  lastOfferId: String
  listing: Input_reverb_event_Listing
}

input Input_reverb_event_OrderPaid @join__type(graph: RQL) {
  userContext: Input_reverb_event_UserContext
  id: String
  listingId: String
  buyerId: String
}

input Input_reverb_event_OrderUpdated @join__type(graph: RQL) {
  userContext: Input_reverb_event_UserContext
  id: String
  status: String
  listing: Input_reverb_event_Listing
  buyerId: String
  createdAt: String
}

input Input_reverb_event_PMBView @join__type(graph: RQL) {
  userContext: Input_reverb_event_UserContext
  persona: String
  listings: [Input_reverb_event_Listing]
  utmCampaign: String
}

"""
  Reverb Analytics Notes:
Description: Captures generic catch-all pages viewed by a user on reverb
Warnings:
Includes many backend "views" like API calls and image requests
Any query of events.page_views must reference the partition key dt in the where clause
"""
input Input_reverb_event_PageView @join__type(graph: RQL) {
  userContext: Input_reverb_event_UserContext
  referer: String
  url: String
  aid: String
  utmCampaign: String
  controller: String
  action: String
  remoteAddress: String
  requestId: String
  params: String
  method: String
  viewRuntime: Float
  dbRuntime: Float
  status: String
  duration: Float
  customHeaders: String
  oauthAppId: String
  devTeam: String
  """expectin a JSON serialized hash"""
  pageExperiments: String
  """Client-side pageview ID"""
  id: String
  """params[sku] for debugging and kibana health"""
  sku: String
  """params[id] for debugging and kibana health"""
  paramsId: String
  threadId: String
  utmSource: String
  utmMedium: String
  """_region prefix of requested URL"""
  urlRegion: String
}

input Input_reverb_event_PaymentGroup @join__type(graph: RQL) {
  cartItemBundlesCount: Int
  cartItemBundles: [Input_reverb_event_CartItemBundle]
}

input Input_reverb_event_Price @join__type(graph: RQL) {
  amount: Int
  currency: String
}

input Input_reverb_event_RemovedFromCart @join__type(graph: RQL) {
  userContext: Input_reverb_event_UserContext
  listing: Input_reverb_event_Listing
  cartItemUuid: String
}

input Input_reverb_event_SaleView @join__type(graph: RQL) {
  saleId: String
  userContext: Input_reverb_event_UserContext
  listings: [Input_reverb_event_Listing]
  requestId: String
}

input Input_reverb_event_ScreenView @join__type(graph: RQL) {
  userContext: Input_reverb_event_UserContext
  referer: String
  screenName: String
  context: String
}

input Input_reverb_event_SessionStart @join__type(graph: RQL) {
  userContext: Input_reverb_event_UserContext
  referer: String
  url: String
  aid: String
  utmCampaign: String
  requestId: String
  """session id"""
  id: String
  utmSource: String
  utmMedium: String
  gsPartner: String
}

input Input_reverb_event_ShippingLabelUpdated @join__type(graph: RQL) {
  userContext: Input_reverb_event_UserContext
  id: String
  status: String
}

input Input_reverb_event_ShopEmptied @join__type(graph: RQL) {
  shopId: String
}

"""/ Polymorphic message wrapper"""
input Input_reverb_event_TrackingPixelEvent @join__type(graph: RQL) {
  """/ ex. MessagesMailer"""
  name: String
  data: String
}

input Input_reverb_event_UserContext @join__type(graph: RQL) {
  id: String
  cookieId: String
  distinctId: String
  device: Input_reverb_event_Device
  experiments: [Input_reverb_event_Experiment]
  """/ ISO8601"""
  timestamp: String
  adminId: String
  bot: Boolean
  locale: String
  currency: String
  shippingRegion: String
  lat: Float
  long: Float
  lastGoogleClick: Input_reverb_event_GoogleShoppingClick
  requestId: String
  sellerSitesId: String
  reverbApp: String
  hasLoggedIn: Boolean
  countryCode: String
  sessionId: String
  advertisingId: String
  actingUserId: String
}

input Input_reverb_event_UserSignedIn @join__type(graph: RQL) {
  userContext: Input_reverb_event_UserContext
  referer: String
  userId: String
  signup: Boolean
}

input Input_reverb_event_UserSignedUp @join__type(graph: RQL) {
  """
    Reverb Analytics Notes:
  Description: Captures user registration event
  Known Issues: Currently drops/does not capture user_context_id for majority of events on desktop and mobile web
  """
  newsletterOptIn: Boolean
  userId: String
  registrationSource: String
  referer: String
  aid: String
  utmCampaign: String
  url: String
  countryCode: String
  sourceProductUuid: String
  userContext: Input_reverb_event_UserContext
}

input Input_reverb_event_UserUpdated @join__type(graph: RQL) {
  userContext: Input_reverb_event_UserContext
  id: String
  """/ UserStatus"""
  status: String
  newsletterOptIn: Boolean
}

input Input_reverb_event_WatchAdded @join__type(graph: RQL) {
  userContext: Input_reverb_event_UserContext
  referer: String
  listingId: String
  watchId: String
}

input Input_reverb_event_WatcherListingSoldMailer @join__type(graph: RQL) {
  userContext: Input_reverb_event_UserContext
  """/ MailerAction"""
  action: String
  productId: String
  orderId: String
  similarProductIds: [String]
  comparisonShoppingPageId: String
}

input Input_reverb_feed_AlertableUserWithTz @join__type(graph: RQL) {
  userId: String
  tzRegion: Int
}

input Input_reverb_feed_AlertableUsersInTzStreamRequest @join__type(graph: RQL) {
  chunkSize: Int
  tzRegion: Int
  fromId: Int
}

input Input_reverb_feed_AlertableUsersRequest @join__type(graph: RQL) {
  _: Boolean
}

input Input_reverb_feed_AlertableUsersResponse @join__type(graph: RQL) {
  userIds: [String]
}

input Input_reverb_feed_AlertableUsersStreamRequest @join__type(graph: RQL) {
  chunkSize: Int
}

input Input_reverb_feed_AlertableUsersWithTzResponse @join__type(graph: RQL) {
  users: [Input_reverb_feed_AlertableUserWithTz]
}

input Input_reverb_feed_AlertableUsersWithTzStreamRequest @join__type(graph: RQL) {
  chunkSize: Int
}

input Input_reverb_feed_BackfillSearchDuplicate @join__type(graph: RQL) {
  normalizedParams: String
  searchIds: [Int]
}

input Input_reverb_feed_BatchUpdateSavedSearchRecentListingCountRequest @join__type(graph: RQL) {
  savedSearches: [Input_reverb_feed_BatchUpdateSavedSearchRecentListingCountRequest_SavedSearchInput]
}

input Input_reverb_feed_BatchUpdateSavedSearchRecentListingCountRequest_SavedSearchInput @join__type(graph: RQL) {
  id: String
  recentListingCount: Int
}

input Input_reverb_feed_BatchUpdateSavedSearchRecentListingCountResponse @join__type(graph: RQL) {
  updatedCount: Int
}

input Input_reverb_feed_ClearUserDigestRequest @join__type(graph: RQL) {
  userId: String
}

input Input_reverb_feed_ClearUserDigestResponse @join__type(graph: RQL) {
  _: Boolean
}

input Input_reverb_feed_CreateFollowResponse @join__type(graph: RQL) {
  follow: Input_reverb_feed_Follow
}

input Input_reverb_feed_CreateSavedSearchRequest @join__type(graph: RQL) {
  esQuery: String
  searchableType: reverb_feed_SearchableType
  queryParams: String
  searchableUuid: String
  localizedContents: [Input_reverb_feed_FollowLocalizedContents]
}

input Input_reverb_feed_CreateSavedSearchResponse @join__type(graph: RQL) {
  id: Int
}

input Input_reverb_feed_DataBackfillTopic @join__type(graph: RQL) {
  action: reverb_feed_DataBackfillTopic_Action
  followIds: [Int]
  searchDuplicates: [Input_reverb_feed_BackfillSearchDuplicate]
}

input Input_reverb_feed_DigestFollows @join__type(graph: RQL) {
  follow: Input_reverb_feed_Follow
  entries: [Input_reverb_feed_FeedEntry]
}

input Input_reverb_feed_DigestListings @join__type(graph: RQL) {
  listingIds: [String]
}

input Input_reverb_feed_EntriesRequest @join__type(graph: RQL) {
  userId: String
  perPage: Int
  page: Int
  offset: Int
  locale: String
  limit: Int
  readFromDatabase: Boolean
}

"""
Favorite represents a row in the follows table (a link between a user and a saved search), and is a newer version of the Follow message.
"""
input Input_reverb_feed_Favorite @join__type(graph: RQL) {
  id: String
  title: String
  subtitle: String
  queryParams: String
  searchableType: reverb_feed_SearchableType
  searchableId: String
  feedEnabled: Boolean
  emailEnabled: Boolean
  favorited: Boolean
  userId: String
  savedSearchId: String
  queryText: String
}

input Input_reverb_feed_FeedEntry @join__type(graph: RQL) {
  """
  The `id` field contains a Listing ID. Technically it is the ID of the `EntryType` entity (`entries.entry_id`), but all entries are listings. It does not contain `entries.id`, which is a unique per-user-per-listing value.
  """
  id: Int
  """Currently, all entries are listings."""
  type: reverb_feed_FeedEntry_EntryType
  metadata: Input_reverb_feed_FeedMetadata
  """
  The `uuid` field contains a Listing ID as a string, which is never a UUID. In the past when LP related feed entries were stored, this may have stored a UUID.
  """
  uuid: String
  """Unused by clients, still referenced in feed code & tests."""
  searchableType: reverb_feed_SearchableType
  """Unused by clients, still referenced in feed code & tests."""
  searchableId: String
  """Unused by clients, still referenced in feed code & tests."""
  queryParams: String
  """
  Contains an array of _all_ localized content, 1 per supported locale. This method of handling localization is unusual, and makes client code more complex. The more common pattern is providing a single `FollowLocalizedContents` message (not an array) that is aware of the current user's locale.
  """
  localizedContents: [Input_reverb_feed_FollowLocalizedContents]
  """
  The `deleted` field is for client state management, primarily Apollo Client in frontend.
  """
  deleted: Boolean
  """
  Only relevant for `UserDigestsResponse`, which returns entries for a batch of users.
  """
  userId: String
}

input Input_reverb_feed_FeedEntryUpdated @join__type(graph: RQL) {
  action: reverb_feed_FeedEntryUpdated_Action
  entries: [Input_reverb_feed_FeedEntry]
  userId: Int
  sourceId: Int
  sourceType: reverb_feed_FeedSourceType
  sourceIds: [Int]
  """timestamp of first entry in feed pipeline"""
  entityUpdatedAt: Timestamp
  userIds: [Int]
}

"""Metadata for a feed entry."""
input Input_reverb_feed_FeedMetadata @join__type(graph: RQL) {
  """All `source_type` values are `SAVED_SEARCH`."""
  sourceType: reverb_feed_FeedSourceType
  """The id of the saved search this entry was matched from."""
  sourceId: Int
  matchedAt: Timestamp
  """Unused by clients, still referenced in feed code & tests."""
  fromFeedService: Boolean
}

input Input_reverb_feed_FeedResponse @join__type(graph: RQL) {
  entries: [Input_reverb_feed_FeedEntry]
  page: Int
  perPage: Int
  total: Int
  offset: Int
  limit: Int
}

input Input_reverb_feed_FindFavoriteRequest @join__type(graph: RQL) {
  queryParams: String
  userId: String
}

input Input_reverb_feed_FindFavoriteResponse @join__type(graph: RQL) {
  favorite: Input_reverb_feed_Favorite
}

input Input_reverb_feed_FindFollowByIdRequest @join__type(graph: RQL) {
  id: String
  userId: String
}

input Input_reverb_feed_FindFollowBySearchableRequest @join__type(graph: RQL) {
  searchableId: String
  searchableType: reverb_feed_SearchableType
  userId: String
}

input Input_reverb_feed_FindFollowRequest @join__type(graph: RQL) {
  queryParams: String
  userId: String
}

input Input_reverb_feed_FindFollowsBySearchableRequest @join__type(graph: RQL) {
  searchableId: String
  searchableType: reverb_feed_SearchableType
  limit: Int
  offset: Int
}

input Input_reverb_feed_FindFollowsBySearchableResponse @join__type(graph: RQL) {
  follows: [Input_reverb_feed_Follow]
  limit: Int
  offset: Int
  total: Int
}

input Input_reverb_feed_Follow @join__type(graph: RQL) {
  userId: String
  savedSearchId: String
  createdAt: Timestamp
  queryParams: String
  searchableType: reverb_feed_SearchableType
  searchableId: String
  id: String
  localizedContents: [Input_reverb_feed_FollowLocalizedContents]
  digestEnabled: Boolean
}

"""Contains localized content for a saved search."""
input Input_reverb_feed_FollowLocalizedContents @join__type(graph: RQL) {
  locale: String
  title: String
  subtitle: String
  shortDescription: String
  description: String
}

input Input_reverb_feed_FollowUpdated @join__type(graph: RQL) {
  savedSearchId: Int
  userId: Int
  esQuery: String
  searchableType: reverb_feed_SearchableType
  searchableId: Int
  queryParams: String
  searchableUuid: String
  id: String
  localizedContents: [Input_reverb_feed_FollowLocalizedContents]
  digestEnabled: Boolean
}

input Input_reverb_feed_FollowsRequest @join__type(graph: RQL) {
  userId: String
  perPage: Int
  page: Int
  offset: Int
  locale: String
}

input Input_reverb_feed_FollowsTopic @join__type(graph: RQL) {
  action: reverb_feed_FollowsTopic_Action
  followId: Int
  userId: Int
  searchableId: Int
  searchableType: reverb_feed_SearchableType
  followIds: [Int]
}

input Input_reverb_feed_GetFavoriteSavedSearchesRequest @join__type(graph: RQL) {
  userId: String
  offset: Int
  limit: Int
  locale: String
  excludeOutlet: Boolean
}

input Input_reverb_feed_GetFavoriteSavedSearchesResponse @join__type(graph: RQL) {
  favorites: [Input_reverb_feed_Favorite]
  total: Int
  limit: Int
  offset: Int
  excludeOutlet: Boolean
}

input Input_reverb_feed_GetFavoriteShopsRequest @join__type(graph: RQL) {
  userId: String
  offset: Int
  limit: Int
  locale: String
}

input Input_reverb_feed_GetFavoriteShopsResponse @join__type(graph: RQL) {
  favoriteShops: [Input_reverb_feed_Favorite]
  total: Int
  limit: Int
  offset: Int
}

input Input_reverb_feed_GetFollowResponse @join__type(graph: RQL) {
  following: Boolean
  follow: Input_reverb_feed_Follow
  followCount: Int
}

input Input_reverb_feed_GetFollowedSavedSearchesRequest @join__type(graph: RQL) {
  startId: Int
}

input Input_reverb_feed_GetFollowedSavedSearchesResponse @join__type(graph: RQL) {
  savedSearchIds: [Int]
}

input Input_reverb_feed_GetFollowsResponse @join__type(graph: RQL) {
  follows: [Input_reverb_feed_Follow]
  page: Int
  perPage: Int
  total: Int
}

input Input_reverb_feed_GetSavedSearchRequest @join__type(graph: RQL) {
  id: Int
  withMostRecentFollow: Boolean
}

input Input_reverb_feed_GetSavedSearchResponse @join__type(graph: RQL) {
  esQuery: String
  mostRecentFollowedUserId: String
  queryParams: String
  searchableType: reverb_feed_SearchableType
  searchableId: String
  localizedContents: [Input_reverb_feed_FollowLocalizedContents]
}

input Input_reverb_feed_PreviewUserDigestsRequest @join__type(graph: RQL) {
  users: [Input_reverb_feed_User]
  matchedAfter: Timestamp
  normalized: Boolean
}

input Input_reverb_feed_PruneFeedRequest @join__type(graph: RQL) {
  userId: String
  savedSearchId: Int
  fromFeedService: Boolean
}

input Input_reverb_feed_PruneFeedResponse @join__type(graph: RQL) {
  _: Boolean
}

input Input_reverb_feed_RemoveEntryRequest @join__type(graph: RQL) {
  entryId: String
  userId: String
  entryType: reverb_feed_FeedEntry_EntryType
}

input Input_reverb_feed_RemoveEntryResponse @join__type(graph: RQL) {
  entry: Input_reverb_feed_FeedEntry
}

input Input_reverb_feed_RemoveFavoriteRequest @join__type(graph: RQL) {
  id: String
  userId: String
}

input Input_reverb_feed_RemoveFavoriteResponse @join__type(graph: RQL) {
  favorite: Input_reverb_feed_Favorite
}

input Input_reverb_feed_RemoveFollowRequest @join__type(graph: RQL) {
  follow: Input_reverb_feed_Follow
  locale: String
  removeEntries: Boolean
}

input Input_reverb_feed_RemoveFollowsBySearchableRequest @join__type(graph: RQL) {
  searchableId: Int
  searchableType: reverb_feed_SearchableType
}

input Input_reverb_feed_RemoveFollowsBySearchableResponse @join__type(graph: RQL) {
  _: Boolean
}

input Input_reverb_feed_ReplaceFollowsSavedSearchIdRequest @join__type(graph: RQL) {
  oldSavedSearchId: Int
  newSavedSearchId: Int
}

input Input_reverb_feed_ReplaceFollowsSavedSearchIdResponse @join__type(graph: RQL) {
  oldSavedSearchId: Int
  newSavedSearchId: Int
  followsUpdatedCount: Int
}

input Input_reverb_feed_SavedSearchStreamResponse @join__type(graph: RQL) {
  savedSearchId: Int
  queryParams: String
}

input Input_reverb_feed_SavedSearchesStreamRequest @join__type(graph: RQL) {
  chunkSize: Int
  fromId: Int
}

input Input_reverb_feed_SavedSearchesStreamResponse @join__type(graph: RQL) {
  savedSearches: [Input_reverb_feed_SavedSearchStreamResponse]
}

input Input_reverb_feed_SetAlertableUsersTzRequest @join__type(graph: RQL) {
  tzRegion: Int
  userIds: [String]
}

input Input_reverb_feed_SetAlertableUsersTzResponse @join__type(graph: RQL) {
  _: Boolean
}

input Input_reverb_feed_SetFollowDigestRequest @join__type(graph: RQL) {
  id: String
  userId: String
  digestEnabled: Boolean
  locale: String
}

input Input_reverb_feed_SetFollowDigestResponse @join__type(graph: RQL) {
  follow: Input_reverb_feed_Follow
}

input Input_reverb_feed_SetFollowDigestsByUserRequest @join__type(graph: RQL) {
  userId: String
  digestsEnabled: Boolean
}

input Input_reverb_feed_SetFollowDigestsByUserResponse @join__type(graph: RQL) {
  follows: [Input_reverb_feed_Follow]
}

input Input_reverb_feed_UndoRemoveFavoriteRequest @join__type(graph: RQL) {
  id: String
  userId: String
}

input Input_reverb_feed_UndoRemoveFavoriteResponse @join__type(graph: RQL) {
  favorite: Input_reverb_feed_Favorite
}

input Input_reverb_feed_UpdateSavedSearchRequest @join__type(graph: RQL) {
  id: Int
  esQuery: String
  searchableId: String
  searchableType: reverb_feed_SearchableType
  queryParams: String
  localizedContents: [Input_reverb_feed_FollowLocalizedContents]
}

input Input_reverb_feed_UpdateSavedSearchResponse @join__type(graph: RQL) {
  id: Int
}

input Input_reverb_feed_UpsertFavoriteRequest @join__type(graph: RQL) {
  userId: Int
  esQuery: String
  searchableType: reverb_feed_SearchableType
  searchableId: String
  queryParams: String
  emailEnabled: Boolean
  feedEnabled: Boolean
  localizedContents: [Input_reverb_feed_FollowLocalizedContents]
}

input Input_reverb_feed_UpsertFavoriteResponse @join__type(graph: RQL) {
  favorite: Input_reverb_feed_Favorite
}

input Input_reverb_feed_UpsertFollowResponse @join__type(graph: RQL) {
  follow: Input_reverb_feed_Follow
  following: Boolean
  followCount: Int
}

input Input_reverb_feed_User @join__type(graph: RQL) {
  userId: String
  locale: String
  lastActiveAt: Timestamp
}

input Input_reverb_feed_UserDigest @join__type(graph: RQL) {
  userId: String
  digestFollows: [Input_reverb_feed_DigestFollows]
}

input Input_reverb_feed_UserDigestsRequest @join__type(graph: RQL) {
  users: [Input_reverb_feed_User]
  matchedAfter: Timestamp
}

input Input_reverb_feed_UserDigestsResponse @join__type(graph: RQL) {
  userDigests: [Input_reverb_feed_UserDigest]
}

input Input_reverb_feed_Users @join__type(graph: RQL) {
  users: [Input_reverb_feed_User]
}

input Input_reverb_personalization_GetTrendingSearchesRequest @join__type(graph: RQL) {
  nResults: Int
  categoryUuids: [String]
}

input Input_reverb_personalization_GetUserRequest @join__type(graph: RQL) {
  id: String
  version: Int
}

input Input_reverb_personalization_QuerySuggestionResponse @join__type(graph: RQL) {
  query: Input_reverb_personalization_SearchQuery
  suggestions: [Input_reverb_personalization_SearchQuery]
}

input Input_reverb_personalization_QuerySuggestionsRequest @join__type(graph: RQL) {
  queries: [Input_reverb_personalization_SearchQuery]
  limitPerQuery: Int
}

input Input_reverb_personalization_QuerySuggestionsResponse @join__type(graph: RQL) {
  queries: [Input_reverb_personalization_QuerySuggestionResponse]
}

input Input_reverb_personalization_RefreshListingRecommendationsRequest @join__type(graph: RQL) {
  _: Boolean
}

input Input_reverb_personalization_RefreshListingRecommendationsRequestV2 @join__type(graph: RQL) {
  runId: String
}

input Input_reverb_personalization_RefreshQuerySuggestionsRequest @join__type(graph: RQL) {
  _: Boolean
}

input Input_reverb_personalization_RefreshTrendingSearchesRequest @join__type(graph: RQL) {
  _: Boolean
}

input Input_reverb_personalization_SearchQuery @join__type(graph: RQL) {
  query: String
  productType: String
  make: String
  category: String
  listingIds: [Int]
}

input Input_reverb_personalization_TrendingSearch @join__type(graph: RQL) {
  query: String
  score: Float
  categorySlug: String
  categoryUuid: String
  listingIds: [String]
}

input Input_reverb_personalization_TrendingSearchesResponse @join__type(graph: RQL) {
  trendingSearches: [Input_reverb_personalization_TrendingSearch]
}

input Input_reverb_personalization_User @join__type(graph: RQL) {
  id: String
  recommendedListingIds: [String]
}

input Input_reverb_pricing_CSPPriceRecommendationQuery @join__type(graph: RQL) {
  comparisonShoppingPageId: String
  conditionUuid: String
  currency: String
  countryCode: String
}

input Input_reverb_pricing_CSPPriceRecommendationsRequest @join__type(graph: RQL) {
  cspPriceRecommendationQueries: [Input_reverb_pricing_CSPPriceRecommendationQuery]
  version: Int
  modelVersion: reverb_pricing_ModelVersion
}

input Input_reverb_pricing_Money @join__type(graph: RQL) {
  amount: String
  amountCents: Int
  currency: String
  symbol: String
  display: String
}

input Input_reverb_pricing_PriceRecommendation @join__type(graph: RQL) {
  canonicalProductId: String
  conditionUuid: String
  priceLow: Input_reverb_pricing_Money
  priceHigh: Input_reverb_pricing_Money
  priceMiddle: Input_reverb_pricing_Money
  priceLowThirtyDaysAgo: Input_reverb_pricing_Money
  priceHighThirtyDaysAgo: Input_reverb_pricing_Money
  priceMiddleThirtyDaysAgo: Input_reverb_pricing_Money
  countryCode: String
  comparisonShoppingPageId: String
}

input Input_reverb_pricing_PriceRecommendationQuery @join__type(graph: RQL) {
  canonicalProductId: String
  conditionUuid: String
  currency: String
  countryCode: String
}

input Input_reverb_pricing_PriceRecommendationsRequest @join__type(graph: RQL) {
  priceRecommendationQueries: [Input_reverb_pricing_PriceRecommendationQuery]
  version: Int
  modelVersion: reverb_pricing_ModelVersion
}

input Input_reverb_pricing_PriceRecommendationsResponse @join__type(graph: RQL) {
  priceRecommendations: [Input_reverb_pricing_PriceRecommendation]
}

input Input_reverb_pricing_PriceScore @join__type(graph: RQL) {
  canonicalProductId: String
  conditionUuid: String
  priceScore: Float
  priceMiddle: Input_reverb_pricing_Money
  absResidual: Float
}

input Input_reverb_pricing_PriceScoreQuery @join__type(graph: RQL) {
  canonicalProductId: String
  conditionUuid: String
  price: Input_reverb_pricing_Money
  countryCode: String
}

input Input_reverb_pricing_PriceScoresRequest @join__type(graph: RQL) {
  priceScoreQueries: [Input_reverb_pricing_PriceScoreQuery]
  version: Int
  modelVersion: reverb_pricing_ModelVersion
}

input Input_reverb_pricing_PriceScoresResponse @join__type(graph: RQL) {
  priceScores: [Input_reverb_pricing_PriceScore]
}

input Input_reverb_reporting_CSPStats @join__type(graph: RQL) {
  liveListingCount: Int
  minListingPriceUsc: Input_reverb_reporting_Int32Value
  orderQuantity: Int
  totalOrderValueUsc: Int
  """total_order_value_usc / order_quantity"""
  avgOrderPriceUsc: Input_reverb_reporting_Int32Value
}

input Input_reverb_reporting_CSPStatsByCSP @join__type(graph: RQL) {
  cspId: String
  cspSlug: String
  brandSlug: String
  liveListingCount: Int
  minListingPriceUsc: Input_reverb_reporting_Int32Value
  orderQuantity: Int
  totalOrderValueUsc: Int
  """total_order_value_usc / order_quantity"""
  avgOrderPriceUsc: Input_reverb_reporting_Int32Value
}

input Input_reverb_reporting_CSPStatsByCSPRequest @join__type(graph: RQL) {
  cspIds: [String]
  cspSlugs: [String]
  brandSlugs: [String]
  dateStart: String
  dateEnd: String
  condition: reverb_reporting_Condition
  includeTotal: Boolean
  orderBy: reverb_reporting_CSPStatsMetric
  orderDesc: Boolean
  limit: Int
  offset: Int
}

input Input_reverb_reporting_CSPStatsByCSPResponse @join__type(graph: RQL) {
  byCsp: [Input_reverb_reporting_CSPStatsByCSP]
  totalCount: Int
}

input Input_reverb_reporting_CSPStatsByDate @join__type(graph: RQL) {
  date: String
  liveListingCount: Int
  minListingPriceUsc: Input_reverb_reporting_Int32Value
  orderQuantity: Int
  totalOrderValueUsc: Int
  """total_order_value_usc / order_quantity"""
  avgOrderPriceUsc: Input_reverb_reporting_Int32Value
}

input Input_reverb_reporting_CSPStatsByDateResponse @join__type(graph: RQL) {
  """Agg across csps, 1 row/date"""
  byDate: [Input_reverb_reporting_CSPStatsByDate]
}

input Input_reverb_reporting_CSPStatsRequest @join__type(graph: RQL) {
  cspIds: [String]
  cspSlugs: [String]
  brandSlugs: [String]
  dateStart: String
  dateEnd: String
  condition: reverb_reporting_Condition
}

"""
  To represent a null or an integer. Including in this package instead of using
the google wrapper because we need to implement a Scan method for reading
from db
"""
input Input_reverb_reporting_Int32Value @join__type(graph: RQL) {
  value: Int
}

input Input_reverb_reporting_ShopStatsByDateRequest @join__type(graph: RQL) {
  shopId: String
  currency: String
  startTime: String
  endTime: String
  timeGrouping: reverb_reporting_TimeGrouping
  timeZone: String
}

input Input_reverb_reporting_ShopStatsByDateResponse @join__type(graph: RQL) {
  buckets: [Input_reverb_reporting_ShopStatsTimeBucket]
}

input Input_reverb_reporting_ShopStatsCurrencyCountResponse @join__type(graph: RQL) {
  currencyCount: Int
}

input Input_reverb_reporting_ShopStatsRequest @join__type(graph: RQL) {
  shopId: String
  currency: String
  startTime: String
  endTime: String
}

input Input_reverb_reporting_ShopStatsResponse @join__type(graph: RQL) {
  salesCents: Int
  watchersCount: Int
  offersCount: Int
  ordersCount: Int
  messagesCount: Int
}

input Input_reverb_reporting_ShopStatsTimeBucket @join__type(graph: RQL) {
  timestamp: String
  salesCents: Int
}

input Input_reverb_reporting_ctr_CspCtr @join__type(graph: RQL) {
  cspId: String
  impressions: Int
  clicks: Int
}

input Input_reverb_reporting_ctr_CspsCtrByDateRangeRequest @join__type(graph: RQL) {
  cspIds: [String]
  datetimeStart: String
  datetimeEnd: String
}

input Input_reverb_reporting_ctr_CspsCtrByDateRangeResponse @join__type(graph: RQL) {
  ctrs: [Input_reverb_reporting_ctr_CspCtr]
}

input Input_reverb_search_AggregationDetails @join__type(graph: RQL) {
  key: String
  count: Int
  displayName: String
}

input Input_reverb_search_AggregationResult @join__type(graph: RQL) {
  name: reverb_search_ListingsSearchRequest_Aggregation
  aggregationDetails: [Input_reverb_search_AggregationDetails]
  displayName: String
}

input Input_reverb_search_AuctionsSearchRequest @join__type(graph: RQL) {
  bidderId: String
  query: String
  offset: Int
  limit: Int
  withAggregations: [reverb_search_AuctionsSearchRequest_Aggregation]
  userBidStatus: reverb_search_AuctionsSearchRequest_UserBidStatus
  merchandisingTypes: [reverb_search_AuctionsSearchRequest_MerchandisingType]
}

input Input_reverb_search_AutocompleteRequest @join__type(graph: RQL) {
  query: String
  locale: String
  shippingRegionCode: String
  currency: String
  limit: reverb_search_AutocompleteRequest_Limit
}

input Input_reverb_search_AutocompleteResponse @join__type(graph: RQL) {
  suggestions: [Input_reverb_search_AutocompleteSuggestion]
}

input Input_reverb_search_AutocompleteSuggestion @join__type(graph: RQL) {
  text: String
  subtext: String
  url: Input_reverb_search_Link
  type: String
}

input Input_reverb_search_AverageMonthlyProductPrice @join__type(graph: RQL) {
  date: String
  averageProductPriceInUsd: Input_reverb_search_Money
  docCount: Int
  averageProductPrice: Input_reverb_search_Money
}

"""
Used for feed related queries to find live listings that match any of a user's saved searches.
"""
input Input_reverb_search_BatchListingsSearchRequest @join__type(graph: RQL) {
  """
  Array of JSON-serialized strings. Each string represents query params for 1 search (saved search filters), such as '[{"query":"sp 1200", "currency": "USD", "price_max": "2000.00" }, {"query": "telecaster", "brand_slugs":["fender"]}]'.
  """
  queryParams: [String]
  """
  Optional top-level filters to apply across all results: ((query_params_1 OR query_params_2) AND (listings_filters)).
  """
  listingsFilters: Input_reverb_search_ListingsSearchRequest
  """
  Optional top-level pagination param, use this instead of `listings_filters.limit`.
  """
  limit: Int
  """
  Optional top-level pagination param, use this instead of `listings_filters.offset`.
  """
  offset: Int
}

"""
Request for feed related queries that check if a batch of searches matched any recently updated listings.
"""
input Input_reverb_search_BatchMatchedListingsSearchRequest @join__type(graph: RQL) {
  searches: [Input_reverb_search_BatchMatchedListingsSearchRequest_SearchInput]
  """ISO-8601 timestamp string"""
  updatedAfter: String
}

input Input_reverb_search_BatchMatchedListingsSearchRequest_SearchInput @join__type(graph: RQL) {
  searchId: String
  queryParams: String
}

"""
Response for feed related queries that check if a batch of searches matched any recently updated listings.
"""
input Input_reverb_search_BatchMatchedListingsSearchResponse @join__type(graph: RQL) {
  matchedListingsSearchResults: [Input_reverb_search_BatchMatchedListingsSearchResponse_SearchResult]
}

input Input_reverb_search_BatchMatchedListingsSearchResponse_SearchResult @join__type(graph: RQL) {
  searchId: String
  total: Int
  result: reverb_search_BatchMatchedListingsSearchResponse_SearchResult_ResultType
}

input Input_reverb_search_BestListing @join__type(graph: RQL) {
  key: String
  id: String
}

input Input_reverb_search_BumpRecommendationsResults @join__type(graph: RQL) {
  bumpRecommendationAmount: Float
  maxBumpRecommendationAmount: Float
}

input Input_reverb_search_BumpedSortedListingsQuery @join__type(graph: RQL) {
  total: Int
  bumpedMax: Int
  condition: String
  itemRegion: String
}

input Input_reverb_search_CMSPagesSearchRequest @join__type(graph: RQL) {
  offset: Int
  limit: Int
  ids: [String]
  fullTextQuery: String
  pageTypes: [String]
}

input Input_reverb_search_CSPInventory @join__type(graph: RQL) {
  usedTotal: Int
  newTotal: Int
  newLowPrice: Input_reverb_search_Money
  usedLowPrice: Input_reverb_search_Money
}

input Input_reverb_search_CSPResponse @join__type(graph: RQL) {
  id: String
  title: String
  webLink: String
  newListingsLink: String
  usedListingsLink: String
  cardSquareImageUrl: String
  thumbnailImageUrl: String
  inventory: Input_reverb_search_CSPInventory
  reviewsCount: Int
  averageReviewRating: Float
  uuid: String
  slug: String
}

input Input_reverb_search_CSPSearchRequest @join__type(graph: RQL) {
  fullTextQuery: String
  fuzzy: Boolean
  locale: String
  offset: Int
  limit: Int
  withAggregations: [reverb_search_CSPSearchRequest_Aggregation]
  brandNames: [String]
  finishes: [String]
  categoryUuids: [String]
  decades: [String]
  suggestTitle: String
  excludedCategoryUuids: [String]
  curatedSetId: String
  condition: String
  withInventory: Boolean
  listingsThatShipTo: String
  sortByQuality: Boolean
  boostByClicks: Boolean
  withLimitedAggregations: Input_reverb_search_LimitedAggregation
  categorySlugs: [String]
  brandSlugs: [String]
  maxPriceUsdCents: Int
  minPriceUsdCents: Int
  yearMin: Int
  yearMax: Int
  curatedSetSlugs: [String]
  fullTextQueryOperand: reverb_search_FullTextQueryOperand
  sort: reverb_search_CSPSearchRequest_Sort
  slugs: [String]
  includeFields: [String]
  similarListingId: String
  similarCspSlug: String
  currency: String
  ids: [String]
  includeOutOfStock: Boolean
  searchUrlParams: String
  priceMax: String
  priceMin: String
  traitValues: [String]
  uuids: [String]
  traitSlugs: [String]
  es7: Boolean
  hasExpressSaleBid: Boolean
  countryOfOrigin: [String]
  autodirects: reverb_search_Autodirects
  skipAutodirects: Boolean
  contexts: [reverb_search_Context]
}

input Input_reverb_search_Completion @join__type(graph: RQL) {
  text: String
  options: [Input_reverb_search_SuggestOption]
  type: reverb_search_CompletionType
}

input Input_reverb_search_CompletionsRequest @join__type(graph: RQL) {
  query: String
  types: [reverb_search_CompletionType]
  currency: String
  shippingRegionCode: String
  locale: String
  experiments: [String]
  hideStaleListings: Boolean
}

input Input_reverb_search_DateBucket @join__type(graph: RQL) {
  """ISO8601 date"""
  fromDate: String
  """ISO8601 date"""
  toDate: String
  metrics: Input_reverb_search_OrderMetrics
}

input Input_reverb_search_Distance @join__type(graph: RQL) {
  """/ Both whole numbers and decimals are supported."""
  value: String
  unit: reverb_search_Distance_DistanceUnit
}

input Input_reverb_search_Document @join__type(graph: RQL) {
  id: String
  source: String
  type: String
  esCsp: Input_reverb_search_CSPResponse
  esGearCollectionItem: Input_reverb_search_GearCollectionItemResponse
}

input Input_reverb_search_ExperimentData @join__type(graph: RQL) {
  name: String
  groupNum: Int
  group: String
}

input Input_reverb_search_Filter @join__type(graph: RQL) {
  name: String
  options: [Input_reverb_search_FilterOption]
  widgetType: reverb_search_Filter_WidgetType
  aggregationName: String
  key: String
}

input Input_reverb_search_FilterOption @join__type(graph: RQL) {
  name: String
  optionValue: String
  selected: Boolean
  paramName: String
  setValues: [String]
  unsetValues: [String]
  count: Input_google_protobuf_Int32Value
  all: Boolean
  subFilter: Input_reverb_search_Filter
  urlParamName: String
  autoselected: Boolean
  trackingValue: String
}

input Input_reverb_search_GearCollectionItemResponse @join__type(graph: RQL) {
  id: String
  priceEstimate: Input_reverb_search_PriceEstimate
}

input Input_reverb_search_GearCollectionItemsSearchRequest @join__type(graph: RQL) {
  offset: Int
  limit: Int
  withAggregations: [reverb_search_GearCollectionItemsSearchRequest_Aggregation]
  userUuids: [String]
  categoryUuids: [String]
  categorySlugs: [String]
  ids: [String]
  withCollectionStats: Boolean
  currency: String
  tags: [String]
  canonicalProductIds: [String]
  states: [String]
}

input Input_reverb_search_GearCollectionStats @join__type(graph: RQL) {
  totalCollectionEstimate: Input_reverb_search_GearCollectionTotalEstimate
}

input Input_reverb_search_GearCollectionTotalEstimate @join__type(graph: RQL) {
  totalEstimateLow: Input_reverb_search_Money
  totalEstimateHigh: Input_reverb_search_Money
}

input Input_reverb_search_Inventory @join__type(graph: RQL) {
  listingCount: Int
  listingMinPrice: Input_reverb_search_Money
}

input Input_reverb_search_LPAlbumSearchRequest @join__type(graph: RQL) {
  offset: Int
  limit: Int
  suggest: String
  artistUuid: String
  ids: [String]
  artistSlug: String
  withInventory: Boolean
  slugs: [String]
}

input Input_reverb_search_LPArtistSearchRequest @join__type(graph: RQL) {
  offset: Int
  limit: Int
  suggest: String
}

input Input_reverb_search_LPCompletionsRequest @join__type(graph: RQL) {
  query: String
}

input Input_reverb_search_LPLabelSearchRequest @join__type(graph: RQL) {
  offset: Int
  limit: Int
  suggest: String
}

input Input_reverb_search_LPListingsSearchRequest @join__type(graph: RQL) {
  releaseUuid: String
  offset: Int
  limit: Int
  excludeIds: [String]
  sort: String
  includeBestListings: Boolean
  releaseSlug: String
  albumSlug: String
  shippingRegion: String
  condition: reverb_search_LPListingsSearchRequest_Condition
  format: [String]
  country: [String]
  mediaCondition: [String]
  sleeveCondition: [String]
  releaseDecades: [String]
  lengths: [String]
  acceptsDirectCheckout: Boolean
  acceptsOffers: Boolean
  priceRange: String
  priceMinCents: Int
  priceMaxCents: Int
  currency: String
  sidebarSearch: String
  ids: [String]
  onSale: Boolean
  auctions: Boolean
  itemRegion: String
  storefrontSlug: String
  noAuctions: Boolean
}

input Input_reverb_search_LPReleasesSearchRequest @join__type(graph: RQL) {
  masterUuid: String
  sort: String
  countries: [String]
  formatUuids: [String]
  releaseDecades: [String]
  fullTextQuery: String
  withInventory: Boolean
  withAggregations: [reverb_search_LPReleasesSearchRequest_Aggregation]
  offset: Int
  limit: Int
  withLimitedAggregations: Input_reverb_search_LimitedAggregation
}

input Input_reverb_search_LPTransactionsSearchRequest @join__type(graph: RQL) {
  actionableStatuses: [reverb_search_LPTransactionsSearchRequest_ActionableStatus]
  createdAfter: String
  createdBefore: String
  filterPurchased: Boolean
  releaseUuids: [String]
  withAggregations: [reverb_search_LPTransactionsSearchRequest_Aggregation]
  withLimitedAggregations: Input_reverb_search_LimitedAggregation
}

input Input_reverb_search_LimitedAggregation @join__type(graph: RQL) {
  brandUuids: Int
  categoryUuids: Int
}

input Input_reverb_search_Link @join__type(graph: RQL) {
  href: String
  """rel path for use in web routing"""
  path: String
}

input Input_reverb_search_ListingRecommendationStats @join__type(graph: RQL) {
  totalGreaterThanCompetitivePrice: Int
  totalWithWatchersAndWithoutAutoOffers: Int
}

input Input_reverb_search_ListingRecommendationsRequest @join__type(graph: RQL) {
  mparticleProfileResponse: Input_reverb_search_MparticleProfileResponse
  brandCategories: [String]
}

input Input_reverb_search_ListingsAggregationResponse @join__type(graph: RQL) {
  aggregationResults: [Input_reverb_search_AggregationResult]
  topCollections: Input_reverb_search_TopCollectionsResult
}

input Input_reverb_search_ListingsPercolationQueryRequest @join__type(graph: RQL) {
  savedSearchQueryParams: String
}

input Input_reverb_search_ListingsPercolationQueryResponse @join__type(graph: RQL) {
  esQuery: String
}

input Input_reverb_search_ListingsSearchRequest @join__type(graph: RQL) {
  brandUuids: [String]
  categoryUuids: [String]
  conditionUuids: [String]
  curatedSetId: String
  currency: String
  locale: String
  priceMax: String
  priceMin: String
  query: String
  sort: reverb_search_ListingsSearchRequest_Sort
  statuses: [String]
  yearMax: String
  yearMin: String
  aggregationsOnly: Boolean
  limit: Int
  offset: Int
  withLimitedAggregations: Input_reverb_search_LimitedAggregation
  withAggregations: [reverb_search_ListingsSearchRequest_Aggregation]
  conditionSlugs: [String]
  shippingRegionCodes: [String]
  onSale: Boolean
  saleCuratedSetId: String
  brandSlugs: [String]
  categorySlugs: [String]
  curatedSetSlugs: [String]
  saleSlugs: [String]
  handmade: Boolean
  freeShipping: Boolean
  freeExpeditedShipping: Boolean
  acceptsOffers: Boolean
  acceptsGiftCards: Boolean
  preferredSeller: Boolean
  acceptsPaymentPlans: Boolean
  itemRegion: String
  holidaySale: Boolean
  shopSlug: String
  ids: [String]
  sortSlug: String
  bumpCount: Int
  showOnlySold: Boolean
  decades: [String]
  traitValues: [String]
  cspSlug: String
  showSold: Boolean
  withTopCollections: Input_reverb_search_TopCollectionsRequest
  itemState: [String]
  itemCity: [String]
  bumpedSortedListingsQuery: Input_reverb_search_BumpedSortedListingsQuery
  fallbackToOr: Boolean
  bumpedOnly: Boolean
  filterSuperRegionCode: String
  canonicalFinishes: [String]
  shopId: String
  randomSeed: Int
  """Deprecated"""
  withPageMetadata: Input_reverb_search_PageMetaDataRequest
  shopSlugs: [String]
  searchUrlParams: String
  excludeMerchandisingTypes: [String]
  boostByBumpRate: Boolean
  cspId: String
  notMatchedToCsp: Boolean
  combinedShipping: Boolean
  boostCombinedShippingCategories: [String]
  excludeShopIds: [String]
  collapsible: reverb_search_ListingsSearchRequest_Collapsible
  priceValue: reverb_search_ListingsSearchRequest_PriceValue
  experiments: [String]
  acceptsAffirm: Boolean
  terminateEarly: Boolean
  withProximityFilter: Input_reverb_search_ProximityFilterRequest
  localPickup: Boolean
  querylessBumpBoost: Boolean
  proximity: Input_reverb_search_ProximityRequest
  traitSlugs: [String]
  shopUuids: [String]
  es7: Boolean
  trackTotalHits: reverb_search_TrackTotalHits
  minSaleDiscountPercent: String
  boostedItemRegionCode: String
  useExperimentalQuery: Boolean
  dealsOrWellPriced: Boolean
  similarListingIds: [String]
  useExperimentalBestMatchSignalsV1: Boolean
  useExperimentalRecall: Boolean
  bestMatchSignalsV2ExperimentGroup: Int
  useExperimentalRegionBoost: Boolean
  shipsToMe: Boolean
  priceValueV2: reverb_search_ListingsSearchRequest_PriceValue
  withMyShopAggregations: [reverb_search_ListingsSearchRequest_MyShopAggregation]
  likelihoodToSellExperimentGroup: Int
  useTotalPrice: Boolean
  mpTotalPriceExperimentGroup: Int
  countryOfOrigin: [String]
  itemRegionRelation: reverb_search_ListingItemRegionRelation
  ecsBoostExperimentGroup: Int
  autodirects: reverb_search_Autodirects
  skipAutodirects: Boolean
  listingRecommendationsVersion: Int
  canonicalProductIds: [String]
  includeDrafts: Boolean
  contexts: [reverb_search_Context]
  fallbackToEverywhereElse: Boolean
  excludeLocalPickupOnly: Boolean
  includeQuerySpellCorrections: Boolean
  dealsAndSteals: Boolean
  multiClientExperiments: [Input_reverb_search_ExperimentData]
  greatValue: Boolean
  notGreatValue: Boolean
  greatValueForUsedListings: Boolean
  notGreatValueForUsedListings: Boolean
  mpid: String
  showBestPriceListingsSort: Boolean
  excludeCuratedSets: [String]
  showLikelihoodToSellSort: Boolean
  excludeCarrierCalculated: Boolean
  excludePreorders: Boolean
  excludeCategoryUuids: [String]
  excludeBrandSlugs: [String]
  isUserInCspOptimizationExp: Boolean
  outlet: Boolean
  shippingProfileId: String
  calculatedRate: Boolean
  flatRate: Boolean
  shipsInternationally: Boolean
  shopRegionCode: String
  acceptsBuyerOffers: Boolean
  noBuyerOffers: Boolean
  acceptsAutoOffers: Boolean
  noAutoOffers: Boolean
  zeroPercentFinancingEligible: Boolean
  financingCuratedSetId: String
  eligibleForSales: Boolean
  hasWatchers: Boolean
  inBuyerCarts: Boolean
  withListingRecommendationStats: Boolean
  showMostWatchedListingsSort: Boolean
  onlyStale: Boolean
  excludeStale: Boolean
  applyProximityBoost: Boolean
}

input Input_reverb_search_ListingsSearchResult @join__type(graph: RQL) {
  id: String
  fieldKeys: [String]
  fieldValues: [String]
}

input Input_reverb_search_Location @join__type(graph: RQL) {
  type: reverb_search_Location_LocationType
  value: String
}

input Input_reverb_search_MeResponse @join__type(graph: RQL) {
  """users.id"""
  id: String
  uuid: String
  shopUuid: String
  admin: Boolean
  status: reverb_search_UserStatus
  shopId: String
  shopSlug: String
  requireOptIn: Boolean
}

input Input_reverb_search_Money @join__type(graph: RQL) {
  cents: Float
  currency: String
  """
  carries same data as `cents`, but uses field naming expected by frontend/core money helpers
  """
  amountCents: Int
  symbol: String
  display: String
  amount: String
}

input Input_reverb_search_MparticleProfileResponse @join__type(graph: RQL) {
  mpid: String
  topProductType: String
  topProductTypes: [String]
  topCategories: [String]
  topBrands: [String]
  recentlyViewedCsps: [String]
  averageOrderValue: Float
  totalListingsCreated: Int
  totalListingsSold: Int
  totalListingsDraft: Int
  totalListingsSuspended: Int
  totalListingsLive: Int
  cumulativeGmv: Float
  totalPurchases: Int
  buyerLabel: String
  sellerLabel: String
  totalFeedFollows: Int
  totalBuyerOffersCreated: Int
  totalBuyerOffersAccepted: Int
  sellerFeedbackRating: Float
  buyerFeedbackRating: Float
  mostRecentOrderDate: String
  firstOrderDate: String
  topProductTypeUuids: [String]
  topCategoryUuids: [String]
  topBrandCategories: [String]
  brandCategories: [String]
  topMostRecentProductTypes: [String]
}

input Input_reverb_search_NegotiationSearchRequest @join__type(graph: RQL) {
  offset: Int
  limit: Int
  sellerUuids: [String]
  buyerUuids: [String]
  states: [reverb_search_NegotiationSearchRequest_State]
  ids: [String]
  listingIds: [String]
  sort: String
  fullTextQuery: String
  participantUuids: [String]
  negotiationTypes: [reverb_search_NegotiationSearchRequest_Type]
  withAggregations: [reverb_search_NegotiationSearchRequest_Aggregation]
}

input Input_reverb_search_OrderMetrics @join__type(graph: RQL) {
  totalAmountProductCentsUsd: Int
  averageProductPriceCentsUsd: Int
  topCsps: [Input_reverb_search_TopCSP]
  orderCount: Int
  totalAmountProductCentsUsdDouble: Float
  totalSellerRevenueAmount: Input_reverb_search_Money
  totalBumpSpendAmount: Input_reverb_search_Money
}

input Input_reverb_search_OrderSearchRequest @join__type(graph: RQL) {
  offset: Int
  limit: Int
  buyerUuid: String
  sellerUuid: String
  checkoutUuid: String
  actionableStatuses: [String]
  shippingMethods: [String]
  cspSlugs: [String]
  withMetricAggregations: Boolean
  createdBeforeDate: String
  createdAfterDate: String
  brandSlugs: [String]
  aggregationsOnly: Boolean
  listingConditionSlugs: [String]
  listingCategoryUuids: [String]
  listingConditionUuids: [String]
  canonicalProductIds: [String]
  sellerCountries: [String]
  withPriceStatsAggregations: Boolean
  soldWithBumpOnly: Boolean
  soldWithoutBumpOnly: Boolean
  withAggregations: [reverb_search_OrderSearchRequest_Aggregation]
  categorySlugs: [String]
  categoryUuids: [String]
  conditionSlugs: [String]
  shopCurrency: String
  minAmountProductCentsUsd: String
  maxAmountProductCentsUsd: String
  withGearCollectionItemOnly: Boolean
  withoutGearCollectionItemOnly: Boolean
  searchUrlParams: String
  orderType: String
  expressSaleItemEvaluation: String
  listingId: String
  fullTextQuery: String
  actionableStatusGroup: String
  withAverageMonthlyProductPricesAggregations: Boolean
  averageMonthlyProductPricesCurrency: String
}

"""Deprecated"""
input Input_reverb_search_PageMetaDataRequest @join__type(graph: RQL) {
  excludeCategories: Boolean
  excludeBrands: Boolean
}

input Input_reverb_search_Percentile @join__type(graph: RQL) {
  key: String
  count: Int
  p1: Float
  p5: Float
  p25: Float
  p50: Float
  p75: Float
  p95: Float
  p99: Float
}

input Input_reverb_search_PreprocessListingsSearchResponse @join__type(graph: RQL) {
  preprocessedListingsSearchRequest: Input_reverb_search_ListingsSearchRequest
}

input Input_reverb_search_PriceEstimate @join__type(graph: RQL) {
  priceLow: Input_reverb_search_Money
  priceHigh: Input_reverb_search_Money
}

input Input_reverb_search_PriceGuidesSearchRequest @join__type(graph: RQL) {
  fullTextQuery: String
  locale: String
  offset: Int
  limit: Int
  withAggregations: [reverb_search_PriceGuidesSearchRequest_Aggregation]
  brandNames: [String]
  categoryUuids: [String]
  decades: [String]
  categorySlugs: [String]
  withLimitedAggregations: Input_reverb_search_LimitedAggregation
}

input Input_reverb_search_PriceStatsResult @join__type(graph: RQL) {
  middle: Input_reverb_search_Money
}

input Input_reverb_search_PriceStatsResults @join__type(graph: RQL) {
  purchasePrice: Input_reverb_search_PriceStatsResult
  publicPrice: Input_reverb_search_PriceStatsResult
  docCount: Int
}

input Input_reverb_search_ProductReviewStats @join__type(graph: RQL) {
  averageRating: Float
  total: Int
  ratingsDistribution: [Input_reverb_search_ProductReviewStats_RatingDistribution]
}

input Input_reverb_search_ProductReviewStats_RatingDistribution @join__type(graph: RQL) {
  rating: String
  reviewCount: Int
}

input Input_reverb_search_ProximityFilterRequest @join__type(graph: RQL) {
  """/ 5 digit US postal code"""
  postalCode: String
  """
  / Distance limit in miles. Both whole numbers and decimals are supported.
  """
  distance: String
  """
  / Whether the "distance from postal code" filter should be activated. `postal_code` is also used for `Sort.PROXIMITY_ASC`. While not mutually exclusive, we may want to sort but not filter.
  """
  proximity: Boolean
}

input Input_reverb_search_ProximityRequest @join__type(graph: RQL) {
  """
  / applies proximity filter.  Both distance and location params are required.
  """
  applyFilter: Boolean
  """/ radius used for filter."""
  distance: Input_reverb_search_Distance
  """/ used for both proximity filter and proximity sort."""
  location: Input_reverb_search_Location
}

input Input_reverb_search_QuerySpellCorrection @join__type(graph: RQL) {
  correction: String
}

input Input_reverb_search_SearchResponse @join__type(graph: RQL) {
  resultIds: [String]
  results: [Input_reverb_search_Document]
  total: Int
  offset: Int
  limit: Int
  completions: [Input_reverb_search_Completion]
  percentiles: [Input_reverb_search_Percentile]
  bestListings: [Input_reverb_search_BestListing]
  resultUuids: [String]
  filters: [Input_reverb_search_Filter]
  bumpIds: [String]
  topCollections: Input_reverb_search_TopCollectionsResult
  suggestedQueries: [String]
  fallbackResultIds: [String]
  orderMetrics: Input_reverb_search_OrderMetrics
  dateBuckets: [Input_reverb_search_DateBucket]
  priceStats: Input_reverb_search_PriceStatsResults
  bumpRecommendations: Input_reverb_search_BumpRecommendationsResults
  gearCollectionStats: Input_reverb_search_GearCollectionStats
  totalHits: Input_reverb_search_SearchResponse_TotalHits
  suggestions: [Input_reverb_search_SearchResponse_Suggestion]
  autodirected: Boolean
  eligibleAutodirects: [reverb_search_Autodirects]
  averageMonthlyProductPrices: [Input_reverb_search_AverageMonthlyProductPrice]
  querySpellCorrections: [Input_reverb_search_QuerySpellCorrection]
  productReviewStats: Input_reverb_search_ProductReviewStats
  esScores: [Float]
  listingRecommendationStats: Input_reverb_search_ListingRecommendationStats
}

input Input_reverb_search_SearchResponse_Suggestion @join__type(graph: RQL) {
  text: String
  score: Float
  frequency: Int
}

input Input_reverb_search_SearchResponse_TotalHits @join__type(graph: RQL) {
  value: Int
  relation: reverb_search_SearchResponse_TotalHits_Relation
}

input Input_reverb_search_ShadowRerankingRequest @join__type(graph: RQL) {
  listingsSearchRequest: Input_reverb_search_ListingsSearchRequest
  listingsSearchResults: [Input_reverb_search_ListingsSearchResult]
}

input Input_reverb_search_ShippingRegionFilterRequest @join__type(graph: RQL) {
  paramName: String
  selectedValues: [String]
  locale: String
}

input Input_reverb_search_ShippingRegionFilterResponse @join__type(graph: RQL) {
  filter: Input_reverb_search_Filter
}

input Input_reverb_search_SuggestOption @join__type(graph: RQL) {
  text: String
  output: String
  cspPayload: Input_reverb_search_SuggestOption_CSPPayload
  corePayload: Input_reverb_search_SuggestOption_CorePayload
  lpPayload: Input_reverb_search_SuggestOption_LPPayload
  completionPayload: Input_reverb_search_SuggestOption_CompletionPayload
  score: Int
  id: String
  slug: String
  scope: Input_reverb_search_SuggestOptionScope
  scopes: [Input_reverb_search_SuggestOptionScope]
}

input Input_reverb_search_SuggestOptionScope @join__type(graph: RQL) {
  id: String
  slug: String
  output: String
  type: reverb_search_SuggestOptionScope_Type
}

input Input_reverb_search_SuggestOption_CSPPayload @join__type(graph: RQL) {
  title: String
  categories: [String]
  primaryImage: String
}

input Input_reverb_search_SuggestOption_CompletionPayload @join__type(graph: RQL) {
  thumbnailUrl: String
  inventoryNew: Input_reverb_search_Inventory
  inventoryUsed: Input_reverb_search_Inventory
}

input Input_reverb_search_SuggestOption_CoreFilter @join__type(graph: RQL) {
  name: String
  type: String
  count: Int
  params: Input_reverb_search_SuggestOption_CorePayloadParams
}

input Input_reverb_search_SuggestOption_CorePayload @join__type(graph: RQL) {
  type: String
  uuid: String
  filter: String
  filters: [Input_reverb_search_SuggestOption_CoreFilter]
  params: Input_reverb_search_SuggestOption_CorePayloadParams
}

input Input_reverb_search_SuggestOption_CorePayloadParams @join__type(graph: RQL) {
  productType: String
  query: String
  categoryUuid: String
  brandSlug: String
  shop: String
  id: String
  category: String
  curatedSetSlug: String
}

input Input_reverb_search_SuggestOption_LPMetadata @join__type(graph: RQL) {
  primaryImageUuid: String
  artistName: String
  labelName: String
  releaseDate: String
  formatDescriptions: [String]
}

input Input_reverb_search_SuggestOption_LPParams @join__type(graph: RQL) {
  artist: String
  label: String
  album: String
}

input Input_reverb_search_SuggestOption_LPPayload @join__type(graph: RQL) {
  type: String
  params: Input_reverb_search_SuggestOption_LPParams
  metadata: Input_reverb_search_SuggestOption_LPMetadata
}

input Input_reverb_search_TopCSP @join__type(graph: RQL) {
  count: Int
  id: String
}

input Input_reverb_search_TopCollectionsRequest @join__type(graph: RQL) {
  brandUuids: Int
  categoryUuids: Int
}

input Input_reverb_search_TopCollectionsResult @join__type(graph: RQL) {
  brandUuids: [String]
  categoryUuids: [String]
}

input Input_reverb_signals_Signal @join__type(graph: RQL) {
  name: reverb_signals_Signal_Name
  group: reverb_signals_Signal_Group
  slot: reverb_signals_Signal_Slot
  title: String
  subtitle: String
  tooltipText: String
  link: Input_reverb_signals_SignalLink
  icon: String
  iconDark: String
}

input Input_reverb_signals_SignalLink @join__type(graph: RQL) {
  url: String
  text: String
}

input Input_reverb_updates_Category @join__type(graph: RQL) {
  uuid: String
}

input Input_reverb_updates_CreateMyUpdateRequest @join__type(graph: RQL) {
  entity: Input_reverb_updates_Entity
}

input Input_reverb_updates_DimissMyUpdateResponse @join__type(graph: RQL) {
  updateId: String
  dismissed: Boolean
}

input Input_reverb_updates_DismissMyUpdateRequest @join__type(graph: RQL) {
  userId: String
  updateId: String
}

input Input_reverb_updates_DismissUpdatesByEntityRequest @join__type(graph: RQL) {
  entityIds: [String]
  entityTypes: [String]
  userId: String
  metadata: Input_reverb_updates_Metadata
}

input Input_reverb_updates_Entity @join__type(graph: RQL) {
  """The type of the entity contained within this update"""
  entityType: reverb_updates_Entity_EntityType
  """
  String containing the identifier of the primary piece of content related to this update (i.e. a listing ID)
  """
  entityId: String
  metadata: Input_reverb_updates_Metadata
}

input Input_reverb_updates_Listing @join__type(graph: RQL) {
  id: String
}

input Input_reverb_updates_Metadata @join__type(graph: RQL) {
  priceDrop: Input_reverb_updates_PriceDrop
  listing: Input_reverb_updates_Listing
  siteBanner: Input_reverb_updates_SiteBanner
  categories: [Input_reverb_updates_Category]
  cartCount: Int
  shop: Input_reverb_updates_Shop
  listingsCount: Int
  listings: [Input_reverb_updates_Listing]
  offerCount: Int
  sale: Input_reverb_updates_Sale
  promotion: Input_reverb_updates_Promotion
  offer: Input_reverb_updates_Offer
}

input Input_reverb_updates_MyHomepageNotificationsRequest @join__type(graph: RQL) {
  userId: String
  limit: Int
  includeExperimentalNotifications: Boolean
}

input Input_reverb_updates_MyHomepageNotificationsResponse @join__type(graph: RQL) {
  updates: [Input_reverb_updates_Update]
}

input Input_reverb_updates_MyUpdateResponse @join__type(graph: RQL) {
  update: Input_reverb_updates_Update
}

input Input_reverb_updates_MyUpdatesRequest @join__type(graph: RQL) {
  userId: String
}

input Input_reverb_updates_MyUpdatesResponse @join__type(graph: RQL) {
  updates: [Input_reverb_updates_Update]
}

input Input_reverb_updates_Offer @join__type(graph: RQL) {
  id: String
  typeContext: String
}

input Input_reverb_updates_PriceDrop @join__type(graph: RQL) {
  id: String
  listingId: String
}

input Input_reverb_updates_Promotion @join__type(graph: RQL) {
  id: String
}

input Input_reverb_updates_PruneMyUpdates @join__type(graph: RQL) {
  pruneType: reverb_updates_PruneMyUpdates_PruneType
  userId: Int
  updateId: Int
}

input Input_reverb_updates_Sale @join__type(graph: RQL) {
  id: String
}

input Input_reverb_updates_Shop @join__type(graph: RQL) {
  id: String
}

input Input_reverb_updates_SiteBanner @join__type(graph: RQL) {
  id: String
}

input Input_reverb_updates_Update @join__type(graph: RQL) {
  """
  Describes what the My Updates consumer should do with this message (i.e. an ADD action tells the consumer to write the update to the database)
  """
  action: reverb_updates_Update_Action
  """The underlying content of this update"""
  entity: Input_reverb_updates_Entity
  """
  On write, tells the My Updates consumer which users should receive this update
  """
  userIds: [String]
  """The timestamp of this update"""
  createdAt: String
  updateId: Int
  """The timestamp of this update"""
  updatedAt: String
}

input Input_rql_AddressSuggestion @join__type(graph: RQL) {
  id: String
  type: rql_AddressSuggestion_Type
  text: String
}

input Input_rql_AuthToken @join__type(graph: RQL) {
  token: String
}

"""Used as input type for mutations that don't have any arguments"""
input Input_rql_Blank @join__type(graph: RQL) {
  _: Boolean
}

input Input_rql_BrandManager @join__type(graph: RQL) {
  slug: String
  id: String
}

input Input_rql_BrandOrderSearch @join__type(graph: RQL) {
  createdBeforeDate: String
  createdAfterDate: String
  cspSlugs: [String]
  listingConditionSlugs: [String]
  completedOnly: Boolean
  listingCategoryUuids: [String]
}

input Input_rql_BrandStatsSearch @join__type(graph: RQL) {
  dateStart: String
  dateEnd: String
  condition: reverb_reporting_Condition
  orderBy: reverb_reporting_CSPStatsMetric
  orderDesc: Boolean
  limit: Int
  offset: Int
}

input Input_rql_BumpedListingsQuery @join__type(graph: RQL) {
  entityType: String
  count: Int
}

input Input_rql_CPRecommendationsRequest @join__type(graph: RQL) {
  cpIds: [String]
  multiClientExperiments: [Input_rql_ExperimentData]
  listingsSearchRequest: Input_reverb_search_ListingsSearchRequest
  listingIds: [String]
  limit: Int
}

input Input_rql_CSPPriceRecommendation @join__type(graph: RQL) {
  conditionUuids: [String]
}

input Input_rql_CSPProductReviewSearchResponse @join__type(graph: RQL) {
  stats: Input_reverb_search_ProductReviewStats
}

input Input_rql_CheckoutActionRequestInput @join__type(graph: RQL) {
  reverbApp: String
}

input Input_rql_CheckoutCartEditRequest @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
  order: Input_rql_CheckoutCartEditRequest_OrderEntry
}

input Input_rql_CheckoutCartEditRequest_OrderEntry @join__type(graph: RQL) {
  listingId: String
  quantity: Int
}

input Input_rql_CheckoutCartEditResponse @join__type(graph: RQL) {
  """Checkout UUID"""
  id: String
}

input Input_rql_CollectionWithDraftsQuery @join__type(graph: RQL) {
  ids: [String]
  uuids: [String]
  slugs: [String]
  includeDrafts: Boolean
}

input Input_rql_DiscoverEntry @join__type(graph: RQL) {
  id: String
  type: rql_DiscoverEntryType
  localizedContents: [Input_reverb_feed_FollowLocalizedContents]
  update: Input_rql_Update
  ad: Input_core_apimessages_Ad
  articleEntry: Input_rql_DiscoverEntry_ArticleEntry
  video: Input_youtube_Video
  description: String
}

input Input_rql_DiscoverEntry_ArticleEntry @join__type(graph: RQL) {
  productTypeName: String
}

input Input_rql_DiscoverRequest @join__type(graph: RQL) {
  limit: Int
  offset: Int
  typesToInclude: [rql_DiscoverInclude]
}

input Input_rql_DiscoverResponse @join__type(graph: RQL) {
  limit: Int
  offset: Int
  entries: [Input_rql_DiscoverEntry]
}

input Input_rql_EmailSubscription @join__type(graph: RQL) {
  id: String
  subscribed: Boolean
  translationKey: rql_EmailSubscription_TranslationKey
}

input Input_rql_ExperimentData @join__type(graph: RQL) {
  name: String
  group: String
}

input Input_rql_ExpressSalePriceEstimate @join__type(graph: RQL) {
  conditionUuid: String
}

input Input_rql_Favorite @join__type(graph: RQL) {
  id: String
  type: rql_FavoriteType
  title: String
  subtitle: String
  favorite: Input_core_apimessages_Favorite
  listingsSearchUrlParams: String
}

input Input_rql_FavoritesRequest @join__type(graph: RQL) {
  limit: Int
  offset: Int
  type: rql_FavoriteType
  listingState: rql_FavoritesRequest_ListingState
  sortSlug: String
  itemRegion: String
}

input Input_rql_FavoritesResponse @join__type(graph: RQL) {
  favorites: [Input_rql_Favorite]
  limit: Int
  offset: Int
  total: Int
  filters: [Input_reverb_search_Filter]
}

input Input_rql_FeedQuery @join__type(graph: RQL) {
  limit: Int
  offset: Int
  channel: rql_FeedQuery_Channel
  listingsFilter: Input_reverb_search_ListingsSearchRequest
  readFromDatabase: Boolean
}

input Input_rql_FindAddressSuggestionRequest @join__type(graph: RQL) {
  text: String
  container: String
  countryCode: String
}

input Input_rql_FindAddressSuggestionResponse @join__type(graph: RQL) {
  suggestions: [Input_rql_AddressSuggestion]
}

input Input_rql_FollowsQuery @join__type(graph: RQL) {
  limit: Int
  offset: Int
  channel: rql_FollowsQuery_Channel
}

input Input_rql_GearCollectionItemsSearchRequest @join__type(graph: RQL) {
  as: rql_GearCollectionItemsSearchRequest_Party
  searchInput: Input_reverb_search_GearCollectionItemsSearchRequest
}

input Input_rql_HomepageRequest @join__type(graph: RQL) {
  mpid: String
}

input Input_rql_ImageQuery @join__type(graph: RQL) {
  transform: String
  scope: String
  limit: Int
  namedTransform: core_apimessages_NamedImageTransforms
}

input Input_rql_Me @join__type(graph: RQL) {
  token: String
}

input Input_rql_MeProfileRequest @join__type(graph: RQL) {
  mpid: String
}

"""
  *
This monitoring data can be attached to each endpoint to help us better
document and monitor for changes in performance. This allows clients
to be automatically generated fully aware of this contract, which should
allow us to more easily set things like per request timeouts, warning logs,
or automate monitors to hit specific teams.

As of this writing nothing is yet consuming these extensions, but we hope
to extend RQL to use these to increase our visibility (and configurability)
of each endpoint.
"""
input Input_rql_MonitoringData @join__type(graph: RQL) {
  warn: Int
  timeout: Int
  owner: String
}

input Input_rql_MyCart @join__type(graph: RQL) {
  _: Boolean
}

input Input_rql_MyUpdatesQuery @join__type(graph: RQL) {
  limit: Int
  offset: Int
}

input Input_rql_MyUpdatesResponse @join__type(graph: RQL) {
  updates: [Input_rql_Update]
  limit: Int
  offset: Int
  total: Int
}

input Input_rql_Node @join__type(graph: RQL) {
  Id: String
}

input Input_rql_NodeError @join__type(graph: RQL) {
  type: rql_NodeError_ErrorType
  message: String
}

input Input_rql_OrderQuery @join__type(graph: RQL) {
  limit: Int
  offset: Int
  checkoutUuid: String
  actionableStatuses: [String]
}

input Input_rql_OrdersSearchRequest @join__type(graph: RQL) {
  as: core_apimessages_BulkOrdersRequest_Party
  searchFilters: Input_reverb_search_OrderSearchRequest
}

input Input_rql_PageInfo @join__type(graph: RQL) {
  limit: Int
  offset: Int
  total: Int
}

"""Deprecated"""
input Input_rql_PageMetadata @join__type(graph: RQL) {
  mainClause: String
  prefixClause: String
  hasSubjectClause: Boolean
  fallbackSubject: String
  inPreposition: String
  collectionClause: String
}

input Input_rql_PriceRecordSearchRequest @join__type(graph: RQL) {
  offset: Int
  limit: Int
  actionableStatuses: [String]
  createdBeforeDate: String
  createdAfterDate: String
  listingConditionSlugs: [String]
  listingConditionUuids: [String]
  canonicalProductIds: [String]
  sellerCountries: [String]
  conditionSlugs: [String]
  shopCurrency: String
  minAmountProductCentsUsd: String
  maxAmountProductCentsUsd: String
  orderType: String
  listingId: String
  actionableStatusGroup: String
  withAverageMonthlyProductPricesAggregations: Boolean
  averageMonthlyProductPricesCurrency: String
}

input Input_rql_PublicComponentEntity @join__type(graph: RQL) {
  id: String
  type: String
}

input Input_rql_RecommendationsGenericResponse @join__type(graph: RQL) {
  recommendationEngineInputIds: [String]
  recommendationEngineOutputIds: [String]
  searchResponse: Input_reverb_search_SearchResponse
}

input Input_rql_ReflectCollectionQuery @join__type(graph: RQL) {
  keys: [String]
}

input Input_rql_ReflectQuery @join__type(graph: RQL) {
  key: String
}

input Input_rql_SelectAddressSuggestionRequest @join__type(graph: RQL) {
  id: String
}

input Input_rql_SelectAddressSuggestionResponse @join__type(graph: RQL) {
  id: String
  address: Input_core_apimessages_AddressEntry
}

input Input_rql_SellerCheckoutInput @join__type(graph: RQL) {
  id: String
}

input Input_rql_SetGlobalSubscribeRequest @join__type(graph: RQL) {
  state: rql_SubscribeState
}

input Input_rql_ShopsRecommendationsRequest @join__type(graph: RQL) {
  limit: Int
}

input Input_rql_Update @join__type(graph: RQL) {
  """The underlying content of this update"""
  entity: Input_rql_UpdateEntity
  """The timestamp of this update"""
  createdAt: String
}

input Input_rql_UpdateEntity @join__type(graph: RQL) {
  _: Boolean
}

input Input_youtube_PlaylistItem @join__type(graph: RQL) {
  snippet: Input_youtube_PlaylistSnippet
}

input Input_youtube_PlaylistResourceId @join__type(graph: RQL) {
  videoId: String
}

input Input_youtube_PlaylistSnippet @join__type(graph: RQL) {
  title: String
  description: String
  resourceId: Input_youtube_PlaylistResourceId
}

input Input_youtube_Video @join__type(graph: RQL) {
  id: String
  title: String
  description: String
}

input FilterInput @join__type(graph: SEARCH_REMIXER) {
  key: String!
  selected: Boolean = null
  value: String = null
  values: [String!] = null
  range: RangeInput = null
  geo: GeoInput = null
}

input GeoInput @join__type(graph: SEARCH_REMIXER) {
  distance: Int!
  postalCode: String!
}

input InputReverbSearchBumpedsortedlistingsquery @join__type(graph: SEARCH_REMIXER) {
  total: Int = null
  bumpedMax: Int = null
  condition: String = null
  itemRegion: String = null
}

input InputReverbSearchDistance @join__type(graph: SEARCH_REMIXER) {
  value: String = null
  unit: reverb_search_Distance_DistanceUnit = null
}

input InputReverbSearchExperimentdata @join__type(graph: SEARCH_REMIXER) {
  name: String = null
  groupNum: Int = null
  group: String = null
}

input InputReverbSearchLimitedaggregation @join__type(graph: SEARCH_REMIXER) {
  brandUuids: Int = null
  categoryUuids: Int = null
}

input InputReverbSearchListingssearchrequest @join__type(graph: SEARCH_REMIXER) {
  brandUuids: [String] = null
  categoryUuids: [String] = null
  conditionUuids: [String] = null
  curatedSetId: String = null
  currency: String = null
  locale: String = null
  priceMax: String = null
  priceMin: String = null
  query: String = null
  sort: reverb_search_ListingsSearchRequest_Sort = null
  statuses: [String] = null
  yearMax: String = null
  yearMin: String = null
  aggregationsOnly: Boolean = null
  limit: Int = null
  offset: Int = null
  withLimitedAggregations: InputReverbSearchLimitedaggregation = null
  withAggregations: [reverb_search_ListingsSearchRequest_Aggregation] = null
  conditionSlugs: [String] = null
  shippingRegionCodes: [String] = null
  onSale: Boolean = null
  saleCuratedSetId: String = null
  brandSlugs: [String] = null
  categorySlugs: [String] = null
  curatedSetSlugs: [String] = null
  saleSlugs: [String] = null
  handmade: Boolean = null
  freeShipping: Boolean = null
  freeExpeditedShipping: Boolean = null
  acceptsOffers: Boolean = null
  acceptsGiftCards: Boolean = null
  preferredSeller: Boolean = null
  acceptsPaymentPlans: Boolean = null
  itemRegion: String = null
  holidaySale: Boolean = null
  shopSlug: String = null
  ids: [String] = null
  sortSlug: String = null
  bumpCount: Int = null
  showOnlySold: Boolean = null
  decades: [String] = null
  traitValues: [String] = null
  cspSlug: String = null
  showSold: Boolean = null
  withTopCollections: InputReverbSearchTopcollectionsrequest = null
  itemState: [String] = null
  itemCity: [String] = null
  bumpedSortedListingsQuery: InputReverbSearchBumpedsortedlistingsquery = null
  fallbackToOr: Boolean = null
  bumpedOnly: Boolean = null
  filterSuperRegionCode: String = null
  canonicalFinishes: [String] = null
  shopId: String = null
  randomSeed: Int = null
  withPageMetadata: InputReverbSearchPagemetadatarequest = null
  shopSlugs: [String] = null
  searchUrlParams: String = null
  excludeMerchandisingTypes: [String] = null
  boostByBumpRate: Boolean = null
  cspId: String = null
  notMatchedToCsp: Boolean = null
  combinedShipping: Boolean = null
  boostCombinedShippingCategories: [String] = null
  excludeShopIds: [String] = null
  collapsible: reverb_search_ListingsSearchRequest_Collapsible = null
  priceValue: reverb_search_ListingsSearchRequest_PriceValue = null
  experiments: [String] = null
  acceptsAffirm: Boolean = null
  terminateEarly: Boolean = null
  withProximityFilter: InputReverbSearchProximityfilterrequest = null
  localPickup: Boolean = null
  querylessBumpBoost: Boolean = null
  proximity: InputReverbSearchProximityrequest = null
  traitSlugs: [String] = null
  shopUuids: [String] = null
  es7: Boolean = null
  trackTotalHits: reverb_search_TrackTotalHits = null
  minSaleDiscountPercent: String = null
  boostedItemRegionCode: String = null
  useExperimentalQuery: Boolean = null
  dealsOrWellPriced: Boolean = null
  similarListingIds: [String] = null
  useExperimentalBestMatchSignalsV1: Boolean = null
  useExperimentalRecall: Boolean = null
  bestMatchSignalsV2ExperimentGroup: Int = null
  useExperimentalRegionBoost: Boolean = null
  shipsToMe: Boolean = null
  priceValueV2: reverb_search_ListingsSearchRequest_PriceValue = null
  withMyShopAggregations: [reverb_search_ListingsSearchRequest_MyShopAggregation] = null
  likelihoodToSellExperimentGroup: Int = null
  useTotalPrice: Boolean = null
  mpTotalPriceExperimentGroup: Int = null
  countryOfOrigin: [String] = null
  itemRegionRelation: reverb_search_ListingItemRegionRelation = null
  ecsBoostExperimentGroup: Int = null
  autodirects: reverb_search_Autodirects = null
  skipAutodirects: Boolean = null
  listingRecommendationsVersion: Int = null
  canonicalProductIds: [String] = null
  includeDrafts: Boolean = null
  contexts: [reverb_search_Context] = null
  fallbackToEverywhereElse: Boolean = null
  excludeLocalPickupOnly: Boolean = null
  includeQuerySpellCorrections: Boolean = null
  dealsAndSteals: Boolean = null
  multiClientExperiments: [InputReverbSearchExperimentdata] = null
  greatValue: Boolean = null
  notGreatValue: Boolean = null
  greatValueForUsedListings: Boolean = null
  notGreatValueForUsedListings: Boolean = null
  mpid: String = null
  showBestPriceListingsSort: Boolean = null
  excludeCuratedSets: [String] = null
  showLikelihoodToSellSort: Boolean = null
  excludeCarrierCalculated: Boolean = null
  excludePreorders: Boolean = null
  excludeCategoryUuids: [String] = null
  excludeBrandSlugs: [String] = null
  isUserInCspOptimizationExp: Boolean = null
  outlet: Boolean = null
  shippingProfileId: String = null
  calculatedRate: Boolean = null
  flatRate: Boolean = null
  shipsInternationally: Boolean = null
  shopRegionCode: String = null
  acceptsBuyerOffers: Boolean = null
  noBuyerOffers: Boolean = null
  acceptsAutoOffers: Boolean = null
  noAutoOffers: Boolean = null
  zeroPercentFinancingEligible: Boolean = null
  financingCuratedSetId: String = null
  eligibleForSales: Boolean = null
  hasWatchers: Boolean = null
  inBuyerCarts: Boolean = null
  withListingRecommendationStats: Boolean = null
  showMostWatchedListingsSort: Boolean = null
  onlyStale: Boolean = null
  excludeStale: Boolean = null
  applyProximityBoost: Boolean = null
}

input InputReverbSearchLocation @join__type(graph: SEARCH_REMIXER) {
  type: reverb_search_Location_LocationType = null
  value: String = null
}

"""Deprecated"""
input InputReverbSearchPagemetadatarequest @join__type(graph: SEARCH_REMIXER) {
  excludeCategories: Boolean = null
  excludeBrands: Boolean = null
}

input InputReverbSearchProximityfilterrequest @join__type(graph: SEARCH_REMIXER) {
  postalCode: String = null
  distance: String = null
  proximity: Boolean = null
}

input InputReverbSearchProximityrequest @join__type(graph: SEARCH_REMIXER) {
  applyFilter: Boolean = null
  distance: InputReverbSearchDistance = null
  location: InputReverbSearchLocation = null
}

input InputReverbSearchTopcollectionsrequest @join__type(graph: SEARCH_REMIXER) {
  brandUuids: Int = null
  categoryUuids: Int = null
}

input MarketplaceSearchInput @join__type(graph: SEARCH_REMIXER) {
  legacyInput: InputReverbSearchListingssearchrequest = null
  searchRemixerV0Input: SearchInput = null
}

input RangeInput @join__type(graph: SEARCH_REMIXER) {
  min: Float = null
  max: Float = null
}

input SearchInput @join__type(graph: SEARCH_REMIXER) {
  query: String = null
  filters: [FilterInput!] = null
  locationContext: SearchLocationContext = null
  page: Int! = 1
  pageSize: Int! = 24
  sort: Sort! = BEST_MATCH
  userContext: SearchUserContext = null
}

input SearchLocationContext @join__type(graph: SEARCH_REMIXER) {
  shipTo: String = null
  shipFrom: String = null
  locale: String = null
}

input SearchUserContext @join__type(graph: SEARCH_REMIXER) {
  userId: String = null
  mpid: String = null
  ra: Boolean! = false
  deviceId: String = null
  sessionId: String = null
  shippingRegion: String = null
  platform: String = null
  platformVersion: String = null
  appVersion: String = null
}

type _Trace {
  trace: String! @additionalField
  explorer: String! @additionalField
}